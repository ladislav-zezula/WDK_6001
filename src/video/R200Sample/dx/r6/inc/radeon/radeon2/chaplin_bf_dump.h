#ifndef CHAPLIN_BF_DUMP_H
#define CHAPLIN_BF_DUMP_H

#ifdef  DEFAULT_PITCH
// Apparently Microsoft defines the symbol DEFAULT_PITCH someplace,
// but this is the name of a field in one of the registers.
// This results in a compilation conflict.
#undef  DEFAULT_PITCH
#endif
#ifndef qLittleEndian
#define qLittleEndian
#endif
#include "chaplin_registers.h"
#include "atidxhsl.h"
#include "stdio.h"

#ifdef DEBUG
///////////////////////////////////////////////////////////////
#pragma prefast( disable: __WARNING_BANNED_API_USAGE )

typedef union GENENB regGENENB;

__inline void dump_GENENB(__in  unsigned int *dwreg, __in  char *buff)
{
  regGENENB *reg = (regGENENB *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MM_INDEX regMM_INDEX;

__inline void dump_MM_INDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regMM_INDEX *reg = (regMM_INDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MM_ADDR:%x", buff, reg->bitfields.MM_ADDR);
  sprintf(buff,"%s MM_APER:%x", buff, reg->bitfields.MM_APER);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MM_DATA regMM_DATA;

__inline void dump_MM_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regMM_DATA *reg = (regMM_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BUS_CNTL regBUS_CNTL;

__inline void dump_BUS_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regBUS_CNTL *reg = (regBUS_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BUS_DBL_RESYNC:%x", buff, reg->bitfields.BUS_DBL_RESYNC);
  sprintf(buff,"%s BUS_MSTR_RESET:%x", buff, reg->bitfields.BUS_MSTR_RESET);
  sprintf(buff,"%s BUS_FLUSH_BUF:%x", buff, reg->bitfields.BUS_FLUSH_BUF);
  sprintf(buff,"%s BUS_STOP_REQ_DIS:%x", buff, reg->bitfields.BUS_STOP_REQ_DIS);
  sprintf(buff,"%s BUS_READ_COMBINE_EN:%x", buff, reg->bitfields.BUS_READ_COMBINE_EN);
  sprintf(buff,"%s BUS_WRT_COMBINE_EN:%x", buff, reg->bitfields.BUS_WRT_COMBINE_EN);
  sprintf(buff,"%s BUS_MASTER_DIS:%x", buff, reg->bitfields.BUS_MASTER_DIS);
  sprintf(buff,"%s BIOS_ROM_WRT_EN:%x", buff, reg->bitfields.BIOS_ROM_WRT_EN);
  sprintf(buff,"%s BUS_PREFETCH_MODE:%x", buff, reg->bitfields.BUS_PREFETCH_MODE);
  sprintf(buff,"%s BUS_VGA_PREFETCH_EN:%x", buff, reg->bitfields.BUS_VGA_PREFETCH_EN);
  sprintf(buff,"%s BUS_SGL_READ_DISABLE:%x", buff, reg->bitfields.BUS_SGL_READ_DISABLE);
  sprintf(buff,"%s BIOS_DIS_ROM:%x", buff, reg->bitfields.BIOS_DIS_ROM);
  sprintf(buff,"%s BUS_PCI_READ_RETRY_EN:%x", buff, reg->bitfields.BUS_PCI_READ_RETRY_EN);
  sprintf(buff,"%s BUS_AGP_AD_STEPPING_EN:%x", buff, reg->bitfields.BUS_AGP_AD_STEPPING_EN);
  sprintf(buff,"%s BUS_PCI_WRT_RETRY_EN:%x", buff, reg->bitfields.BUS_PCI_WRT_RETRY_EN);
  sprintf(buff,"%s BUS_RETRY_WS:%x", buff, reg->bitfields.BUS_RETRY_WS);
  sprintf(buff,"%s BUS_MSTR_RD_MULT:%x", buff, reg->bitfields.BUS_MSTR_RD_MULT);
  sprintf(buff,"%s BUS_MSTR_RD_LINE:%x", buff, reg->bitfields.BUS_MSTR_RD_LINE);
  sprintf(buff,"%s BUS_SUSPEND:%x", buff, reg->bitfields.BUS_SUSPEND);
  sprintf(buff,"%s LAT_16X:%x", buff, reg->bitfields.LAT_16X);
  sprintf(buff,"%s BUS_RD_DISCARD_EN:%x", buff, reg->bitfields.BUS_RD_DISCARD_EN);
  sprintf(buff,"%s ENFRCWRDY:%x", buff, reg->bitfields.ENFRCWRDY);
  sprintf(buff,"%s BUS_MSTR_WS:%x", buff, reg->bitfields.BUS_MSTR_WS);
  sprintf(buff,"%s BUS_PARKING_DIS:%x", buff, reg->bitfields.BUS_PARKING_DIS);
  sprintf(buff,"%s BUS_MSTR_DISCONNECT_EN:%x", buff, reg->bitfields.BUS_MSTR_DISCONNECT_EN);
  sprintf(buff,"%s SERR_EN:%x", buff, reg->bitfields.SERR_EN);
  sprintf(buff,"%s BUS_READ_BURST:%x", buff, reg->bitfields.BUS_READ_BURST);
  sprintf(buff,"%s BUS_RDY_READ_DLY:%x", buff, reg->bitfields.BUS_RDY_READ_DLY);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HI_STAT regHI_STAT;

__inline void dump_HI_STAT(__in  unsigned int *dwreg, __in  char *buff)
{
  regHI_STAT *reg = (regHI_STAT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BUS_CNTL1 regBUS_CNTL1;

__inline void dump_BUS_CNTL1(__in  unsigned int *dwreg, __in  char *buff)
{
  regBUS_CNTL1 *reg = (regBUS_CNTL1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PMI_IO_DISABLE:%x", buff, reg->bitfields.PMI_IO_DISABLE);
  sprintf(buff,"%s PMI_MEM_DISABLE:%x", buff, reg->bitfields.PMI_MEM_DISABLE);
  sprintf(buff,"%s PMI_BM_DISABLE:%x", buff, reg->bitfields.PMI_BM_DISABLE);
  sprintf(buff,"%s PMI_INT_DISABLE:%x", buff, reg->bitfields.PMI_INT_DISABLE);
  sprintf(buff,"%s BUS2_WBF_DURING_REG_WRT_EN:%x", buff, reg->bitfields.BUS2_WBF_DURING_REG_WRT_EN);
  sprintf(buff,"%s BUS2_IMMEDIATE_PMI_DISABLE:%x", buff, reg->bitfields.BUS2_IMMEDIATE_PMI_DISABLE);
  sprintf(buff,"%s BUS2_VGA_REG_COHERENCY_DIS:%x", buff, reg->bitfields.BUS2_VGA_REG_COHERENCY_DIS);
  sprintf(buff,"%s BUS2_VGA_MEM_COHERENCY_DIS:%x", buff, reg->bitfields.BUS2_VGA_MEM_COHERENCY_DIS);
  sprintf(buff,"%s BUS2_HDP_REG_COHERENCY_DIS:%x", buff, reg->bitfields.BUS2_HDP_REG_COHERENCY_DIS);
  sprintf(buff,"%s BUS2_GUI_INITIATOR_COHERENCY_DIS:%x", buff, reg->bitfields.BUS2_GUI_INITIATOR_COHERENCY_DIS);
  sprintf(buff,"%s BUS2_VGA_FW_COHERENCY_DIS:%x", buff, reg->bitfields.BUS2_VGA_FW_COHERENCY_DIS);
  sprintf(buff,"%s BUS2_ACCEL_FW_COHERENCY_DIS:%x", buff, reg->bitfields.BUS2_ACCEL_FW_COHERENCY_DIS);
  sprintf(buff,"%s BUS2_RD_PANIC_VAL:%x", buff, reg->bitfields.BUS2_RD_PANIC_VAL);
  sprintf(buff,"%s BUS2_WRT_PANIC_VAL:%x", buff, reg->bitfields.BUS2_WRT_PANIC_VAL);
  sprintf(buff,"%s MOBILE_PLATFORM_SEL:%x", buff, reg->bitfields.MOBILE_PLATFORM_SEL);
  sprintf(buff,"%s SEND_SBA_LATENCY:%x", buff, reg->bitfields.SEND_SBA_LATENCY);
  sprintf(buff,"%s AGPCLK_VALID:%x", buff, reg->bitfields.AGPCLK_VALID);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CONFIG_CNTL regCONFIG_CNTL;

__inline void dump_CONFIG_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCONFIG_CNTL *reg = (regCONFIG_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s APER_REG_ENDIAN:%x", buff, reg->bitfields.APER_REG_ENDIAN);
  sprintf(buff,"%s CFG_VGA_RAM_EN:%x", buff, reg->bitfields.CFG_VGA_RAM_EN);
  sprintf(buff,"%s CFG_VGA_IO_DIS:%x", buff, reg->bitfields.CFG_VGA_IO_DIS);
  sprintf(buff,"%s CFG_ATI_REV_ID:%x", buff, reg->bitfields.CFG_ATI_REV_ID);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CONFIG_MEMSIZE regCONFIG_MEMSIZE;

__inline void dump_CONFIG_MEMSIZE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCONFIG_MEMSIZE *reg = (regCONFIG_MEMSIZE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CONFIG_APER_0_BASE regCONFIG_APER_0_BASE;

__inline void dump_CONFIG_APER_0_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCONFIG_APER_0_BASE *reg = (regCONFIG_APER_0_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CONFIG_APER_1_BASE regCONFIG_APER_1_BASE;

__inline void dump_CONFIG_APER_1_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCONFIG_APER_1_BASE *reg = (regCONFIG_APER_1_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CONFIG_APER_SIZE regCONFIG_APER_SIZE;

__inline void dump_CONFIG_APER_SIZE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCONFIG_APER_SIZE *reg = (regCONFIG_APER_SIZE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CONFIG_REG_1_BASE regCONFIG_REG_1_BASE;

__inline void dump_CONFIG_REG_1_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCONFIG_REG_1_BASE *reg = (regCONFIG_REG_1_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s REG_APER_1_SELECT:%x", buff, reg->bitfields.REG_APER_1_SELECT);
  sprintf(buff,"%s REG_1_BASE:%x", buff, reg->bitfields.REG_1_BASE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CONFIG_REG_APER_SIZE regCONFIG_REG_APER_SIZE;

__inline void dump_CONFIG_REG_APER_SIZE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCONFIG_REG_APER_SIZE *reg = (regCONFIG_REG_APER_SIZE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PAD_AGPINPUT_DELAY regPAD_AGPINPUT_DELAY;

__inline void dump_PAD_AGPINPUT_DELAY(__in  unsigned int *dwreg, __in  char *buff)
{
  regPAD_AGPINPUT_DELAY *reg = (regPAD_AGPINPUT_DELAY *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PAD_CTLR_STRENGTH regPAD_CTLR_STRENGTH;

__inline void dump_PAD_CTLR_STRENGTH(__in  unsigned int *dwreg, __in  char *buff)
{
  regPAD_CTLR_STRENGTH *reg = (regPAD_CTLR_STRENGTH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PAD_N_STRENGTH_READ_BACK:%x", buff, reg->bitfields.PAD_N_STRENGTH_READ_BACK);
  sprintf(buff,"%s PAD_P_STRENGTH_READ_BACK:%x", buff, reg->bitfields.PAD_P_STRENGTH_READ_BACK);
  sprintf(buff,"%s PAD_N_MANUAL_STRENGTH:%x", buff, reg->bitfields.PAD_N_MANUAL_STRENGTH);
  sprintf(buff,"%s PAD_P_MANUAL_STRENGTH:%x", buff, reg->bitfields.PAD_P_MANUAL_STRENGTH);
  sprintf(buff,"%s PAD_MANUAL_OVERRIDE:%x", buff, reg->bitfields.PAD_MANUAL_OVERRIDE);
  sprintf(buff,"%s PAD_TEST_OUT:%x", buff, reg->bitfields.PAD_TEST_OUT);
  sprintf(buff,"%s PAD_DUMMY_OUT:%x", buff, reg->bitfields.PAD_DUMMY_OUT);
  sprintf(buff,"%s PAD_HI_IO_DFR:%x", buff, reg->bitfields.PAD_HI_IO_DFR);
  sprintf(buff,"%s PAD_HI_IO_SCHMEN:%x", buff, reg->bitfields.PAD_HI_IO_SCHMEN);
  sprintf(buff,"%s PAD_HI_IO_DREN:%x", buff, reg->bitfields.PAD_HI_IO_DREN);
  sprintf(buff,"%s PAD_HI_IO_VDIFF:%x", buff, reg->bitfields.PAD_HI_IO_VDIFF);
  sprintf(buff,"%s PAD_HI_IO_DFR_OVERRIDE:%x", buff, reg->bitfields.PAD_HI_IO_DFR_OVERRIDE);
  sprintf(buff,"%s PAD_HI_IO_SCHMEN_OVERRIDE:%x", buff, reg->bitfields.PAD_HI_IO_SCHMEN_OVERRIDE);
  sprintf(buff,"%s PAD_HI_IO_DREN_OVERRIDE:%x", buff, reg->bitfields.PAD_HI_IO_DREN_OVERRIDE);
  sprintf(buff,"%s PAD_HI_IO_VDIFF_OVERRIDE:%x", buff, reg->bitfields.PAD_HI_IO_VDIFF_OVERRIDE);
  sprintf(buff,"%s PAD_HI_IO_SLEWN:%x", buff, reg->bitfields.PAD_HI_IO_SLEWN);
  sprintf(buff,"%s PAD_HI_IO_SLEWP:%x", buff, reg->bitfields.PAD_HI_IO_SLEWP);
  sprintf(buff,"%s PAD_HI_IO_SLEW_OVERRIDE:%x", buff, reg->bitfields.PAD_HI_IO_SLEW_OVERRIDE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PAD_CTLR_UPDATE regPAD_CTLR_UPDATE;

__inline void dump_PAD_CTLR_UPDATE(__in  unsigned int *dwreg, __in  char *buff)
{
  regPAD_CTLR_UPDATE *reg = (regPAD_CTLR_UPDATE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PAD_UPDATE_RATE:%x", buff, reg->bitfields.PAD_UPDATE_RATE);
  sprintf(buff,"%s PAD_SAMPLE_DELAY:%x", buff, reg->bitfields.PAD_SAMPLE_DELAY);
  sprintf(buff,"%s PAD_INC_THRESHOLD:%x", buff, reg->bitfields.PAD_INC_THRESHOLD);
  sprintf(buff,"%s PAD_DEC_THRESHOLD:%x", buff, reg->bitfields.PAD_DEC_THRESHOLD);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FW_CNTL regFW_CNTL;

__inline void dump_FW_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regFW_CNTL *reg = (regFW_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s WBF_WM_MAX:%x", buff, reg->bitfields.WBF_WM_MAX);
  sprintf(buff,"%s WBF_WM_MIN:%x", buff, reg->bitfields.WBF_WM_MIN);
  sprintf(buff,"%s DISCONNECT_W_DATA_STOPTRDY_MIN:%x", buff, reg->bitfields.DISCONNECT_W_DATA_STOPTRDY_MIN);
  sprintf(buff,"%s DISCONNECT_WO_DATA_STOPTRDY_MIN:%x", buff, reg->bitfields.DISCONNECT_WO_DATA_STOPTRDY_MIN);
  sprintf(buff,"%s HOLD_FW_FIFO:%x", buff, reg->bitfields.HOLD_FW_FIFO);
  sprintf(buff,"%s FORCE_FW_WBF:%x", buff, reg->bitfields.FORCE_FW_WBF);
  sprintf(buff,"%s DIS_FW_WBF:%x", buff, reg->bitfields.DIS_FW_WBF);
  sprintf(buff,"%s DISCONNECT_MODE:%x", buff, reg->bitfields.DISCONNECT_MODE);
  sprintf(buff,"%s DIS_WBF_WAIT_FOR_FRAME:%x", buff, reg->bitfields.DIS_WBF_WAIT_FOR_FRAME);
  sprintf(buff,"%s EN_TRDY_WAIT_FOR_FIFOAVL:%x", buff, reg->bitfields.EN_TRDY_WAIT_FOR_FIFOAVL);
  sprintf(buff,"%s TRDY_WS_COUNT:%x", buff, reg->bitfields.TRDY_WS_COUNT);
  sprintf(buff,"%s DIS_FW_ROTATION:%x", buff, reg->bitfields.DIS_FW_ROTATION);
  sprintf(buff,"%s FORCE_TRDY_1WS:%x", buff, reg->bitfields.FORCE_TRDY_1WS);
  sprintf(buff,"%s IGNORE_STRAP_FW_DIS:%x", buff, reg->bitfields.IGNORE_STRAP_FW_DIS);
  sprintf(buff,"%s FW_MISC:%x", buff, reg->bitfields.FW_MISC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FW_STATUS regFW_STATUS;

__inline void dump_FW_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regFW_STATUS *reg = (regFW_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FW_IDLE:%x", buff, reg->bitfields.FW_IDLE);
  sprintf(buff,"%s STAT_FW_CLEAN:%x", buff, reg->bitfields.STAT_FW_CLEAN);
  sprintf(buff,"%s FW_WAVL:%x", buff, reg->bitfields.FW_WAVL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AGP_CNTL regAGP_CNTL;

__inline void dump_AGP_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regAGP_CNTL *reg = (regAGP_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MAX_IDLE_CLK:%x", buff, reg->bitfields.MAX_IDLE_CLK);
  sprintf(buff,"%s HOLD_RD_FIFO:%x", buff, reg->bitfields.HOLD_RD_FIFO);
  sprintf(buff,"%s HOLD_RQ_FIFO:%x", buff, reg->bitfields.HOLD_RQ_FIFO);
  sprintf(buff,"%s EN_2X_STBB:%x", buff, reg->bitfields.EN_2X_STBB);
  sprintf(buff,"%s FORCE_FULL_SBA:%x", buff, reg->bitfields.FORCE_FULL_SBA);
  sprintf(buff,"%s SBA_DIS:%x", buff, reg->bitfields.SBA_DIS);
  sprintf(buff,"%s AGP_REV_ID:%x", buff, reg->bitfields.AGP_REV_ID);
  sprintf(buff,"%s REG_CRIPPLE_AGP4X:%x", buff, reg->bitfields.REG_CRIPPLE_AGP4X);
  sprintf(buff,"%s REG_CRIPPLE_AGP2X4X:%x", buff, reg->bitfields.REG_CRIPPLE_AGP2X4X);
  sprintf(buff,"%s FORCE_INT_VREF:%x", buff, reg->bitfields.FORCE_INT_VREF);
  sprintf(buff,"%s PENDING_SLOTS_VAL:%x", buff, reg->bitfields.PENDING_SLOTS_VAL);
  sprintf(buff,"%s PENDING_SLOTS_SEL:%x", buff, reg->bitfields.PENDING_SLOTS_SEL);
  sprintf(buff,"%s EN_EXTENDED_AD_STB_2X:%x", buff, reg->bitfields.EN_EXTENDED_AD_STB_2X);
  sprintf(buff,"%s DIS_QUEUED_GNT_FIX:%x", buff, reg->bitfields.DIS_QUEUED_GNT_FIX);
  sprintf(buff,"%s EN_RDATA2X4X_MULTIRESET:%x", buff, reg->bitfields.EN_RDATA2X4X_MULTIRESET);
  sprintf(buff,"%s EN_RBFCALM:%x", buff, reg->bitfields.EN_RBFCALM);
  sprintf(buff,"%s FORCE_EXT_VREF:%x", buff, reg->bitfields.FORCE_EXT_VREF);
  sprintf(buff,"%s DIS_RBF:%x", buff, reg->bitfields.DIS_RBF);
  sprintf(buff,"%s DELAY_FIRST_SBA_EN:%x", buff, reg->bitfields.DELAY_FIRST_SBA_EN);
  sprintf(buff,"%s DELAY_FIRST_SBA_VAL:%x", buff, reg->bitfields.DELAY_FIRST_SBA_VAL);
  sprintf(buff,"%s AGP_MISC:%x", buff, reg->bitfields.AGP_MISC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BM_STATUS regBM_STATUS;

__inline void dump_BM_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regBM_STATUS *reg = (regBM_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PAD_CTLR_MISC regPAD_CTLR_MISC;

__inline void dump_PAD_CTLR_MISC(__in  unsigned int *dwreg, __in  char *buff)
{
  regPAD_CTLR_MISC *reg = (regPAD_CTLR_MISC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VENDOR_ID regVENDOR_ID;

__inline void dump_VENDOR_ID(__in  unsigned int *dwreg, __in  char *buff)
{
  regVENDOR_ID *reg = (regVENDOR_ID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEVICE_ID regDEVICE_ID;

__inline void dump_DEVICE_ID(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEVICE_ID *reg = (regDEVICE_ID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union COMMAND regCOMMAND;

__inline void dump_COMMAND(__in  unsigned int *dwreg, __in  char *buff)
{
  regCOMMAND *reg = (regCOMMAND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s IO_ACCESS_EN:%x", buff, reg->bitfields.IO_ACCESS_EN);
  sprintf(buff,"%s MEM_ACCESS_EN:%x", buff, reg->bitfields.MEM_ACCESS_EN);
  sprintf(buff,"%s BUS_MASTER_EN:%x", buff, reg->bitfields.BUS_MASTER_EN);
  sprintf(buff,"%s SPECIAL_CYCLE_EN:%x", buff, reg->bitfields.SPECIAL_CYCLE_EN);
  sprintf(buff,"%s MEM_WRITE_INVALIDATE_EN:%x", buff, reg->bitfields.MEM_WRITE_INVALIDATE_EN);
  sprintf(buff,"%s PAL_SNOOP_EN:%x", buff, reg->bitfields.PAL_SNOOP_EN);
  sprintf(buff,"%s PARITY_ERROR_EN:%x", buff, reg->bitfields.PARITY_ERROR_EN);
  sprintf(buff,"%s AD_STEPPING:%x", buff, reg->bitfields.AD_STEPPING);
  sprintf(buff,"%s SERR_EN:%x", buff, reg->bitfields.SERR_EN);
  sprintf(buff,"%s FAST_B2B_EN:%x", buff, reg->bitfields.FAST_B2B_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union STATUS regSTATUS;

__inline void dump_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regSTATUS *reg = (regSTATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_LIST:%x", buff, reg->bitfields.CAP_LIST);
  sprintf(buff,"%s PCI_66_EN:%x", buff, reg->bitfields.PCI_66_EN);
  sprintf(buff,"%s UDF_EN:%x", buff, reg->bitfields.UDF_EN);
  sprintf(buff,"%s FAST_BACK_CAPABLE:%x", buff, reg->bitfields.FAST_BACK_CAPABLE);
  sprintf(buff,"%s DEVSEL_TIMING:%x", buff, reg->bitfields.DEVSEL_TIMING);
  sprintf(buff,"%s SIGNAL_TARGET_ABORT:%x", buff, reg->bitfields.SIGNAL_TARGET_ABORT);
  sprintf(buff,"%s RECEIVED_TARGET_ABORT:%x", buff, reg->bitfields.RECEIVED_TARGET_ABORT);
  sprintf(buff,"%s RECEIVED_MASTER_ABORT:%x", buff, reg->bitfields.RECEIVED_MASTER_ABORT);
  sprintf(buff,"%s SIGNALED_SYSTEM_ERROR:%x", buff, reg->bitfields.SIGNALED_SYSTEM_ERROR);
  sprintf(buff,"%s PARITY_ERROR_DETECTED:%x", buff, reg->bitfields.PARITY_ERROR_DETECTED);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union REVISION_ID regREVISION_ID;

__inline void dump_REVISION_ID(__in  unsigned int *dwreg, __in  char *buff)
{
  regREVISION_ID *reg = (regREVISION_ID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MINOR_REV_ID:%x", buff, reg->bitfields.MINOR_REV_ID);
  sprintf(buff,"%s MAJOR_REV_ID:%x", buff, reg->bitfields.MAJOR_REV_ID);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union REGPROG_INF regREGPROG_INF;

__inline void dump_REGPROG_INF(__in  unsigned int *dwreg, __in  char *buff)
{
  regREGPROG_INF *reg = (regREGPROG_INF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUB_CLASS regSUB_CLASS;

__inline void dump_SUB_CLASS(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUB_CLASS *reg = (regSUB_CLASS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BASE_CODE regBASE_CODE;

__inline void dump_BASE_CODE(__in  unsigned int *dwreg, __in  char *buff)
{
  regBASE_CODE *reg = (regBASE_CODE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CACHE_LINE regCACHE_LINE;

__inline void dump_CACHE_LINE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCACHE_LINE *reg = (regCACHE_LINE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union LATENCY regLATENCY;

__inline void dump_LATENCY(__in  unsigned int *dwreg, __in  char *buff)
{
  regLATENCY *reg = (regLATENCY *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HEADER regHEADER;

__inline void dump_HEADER(__in  unsigned int *dwreg, __in  char *buff)
{
  regHEADER *reg = (regHEADER *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HEADER_TYPE:%x", buff, reg->bitfields.HEADER_TYPE);
  sprintf(buff,"%s DEVICE_TYPE:%x", buff, reg->bitfields.DEVICE_TYPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BIST regBIST;

__inline void dump_BIST(__in  unsigned int *dwreg, __in  char *buff)
{
  regBIST *reg = (regBIST *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BIST_COMP:%x", buff, reg->bitfields.BIST_COMP);
  sprintf(buff,"%s BIST_STRT:%x", buff, reg->bitfields.BIST_STRT);
  sprintf(buff,"%s BIST_CAP:%x", buff, reg->bitfields.BIST_CAP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MEM_BASE regMEM_BASE;

__inline void dump_MEM_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regMEM_BASE *reg = (regMEM_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PREFETCH_EN:%x", buff, reg->bitfields.PREFETCH_EN);
  sprintf(buff,"%s MEM_BASE:%x", buff, reg->bitfields.MEM_BASE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union IO_BASE regIO_BASE;

__inline void dump_IO_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regIO_BASE *reg = (regIO_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BLOCK_IO_BIT:%x", buff, reg->bitfields.BLOCK_IO_BIT);
  sprintf(buff,"%s IO_BASE:%x", buff, reg->bitfields.IO_BASE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union REG_BASE regREG_BASE;

__inline void dump_REG_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regREG_BASE *reg = (regREG_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ADAPTER_ID regADAPTER_ID;

__inline void dump_ADAPTER_ID(__in  unsigned int *dwreg, __in  char *buff)
{
  regADAPTER_ID *reg = (regADAPTER_ID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SUBSYSTEM_VENDOR_ID:%x", buff, reg->bitfields.SUBSYSTEM_VENDOR_ID);
  sprintf(buff,"%s SUBSYSTEM_ID:%x", buff, reg->bitfields.SUBSYSTEM_ID);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BIOS_ROM regBIOS_ROM;

__inline void dump_BIOS_ROM(__in  unsigned int *dwreg, __in  char *buff)
{
  regBIOS_ROM *reg = (regBIOS_ROM *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BIOS_ROM_EN:%x", buff, reg->bitfields.BIOS_ROM_EN);
  sprintf(buff,"%s BIOS_BASE_ADDR:%x", buff, reg->bitfields.BIOS_BASE_ADDR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAPABILITIES_PTR regCAPABILITIES_PTR;

__inline void dump_CAPABILITIES_PTR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAPABILITIES_PTR *reg = (regCAPABILITIES_PTR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union INTERRUPT_LINE regINTERRUPT_LINE;

__inline void dump_INTERRUPT_LINE(__in  unsigned int *dwreg, __in  char *buff)
{
  regINTERRUPT_LINE *reg = (regINTERRUPT_LINE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union INTERRUPT_PIN regINTERRUPT_PIN;

__inline void dump_INTERRUPT_PIN(__in  unsigned int *dwreg, __in  char *buff)
{
  regINTERRUPT_PIN *reg = (regINTERRUPT_PIN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MIN_GRANT regMIN_GRANT;

__inline void dump_MIN_GRANT(__in  unsigned int *dwreg, __in  char *buff)
{
  regMIN_GRANT *reg = (regMIN_GRANT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MAX_LATENCY regMAX_LATENCY;

__inline void dump_MAX_LATENCY(__in  unsigned int *dwreg, __in  char *buff)
{
  regMAX_LATENCY *reg = (regMAX_LATENCY *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ADAPTER_ID_W regADAPTER_ID_W;

__inline void dump_ADAPTER_ID_W(__in  unsigned int *dwreg, __in  char *buff)
{
  regADAPTER_ID_W *reg = (regADAPTER_ID_W *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SUBSYSTEM_VENDOR_ID:%x", buff, reg->bitfields.SUBSYSTEM_VENDOR_ID);
  sprintf(buff,"%s SUBSYSTEM_ID:%x", buff, reg->bitfields.SUBSYSTEM_ID);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PMI_CAP_ID regPMI_CAP_ID;

__inline void dump_PMI_CAP_ID(__in  unsigned int *dwreg, __in  char *buff)
{
  regPMI_CAP_ID *reg = (regPMI_CAP_ID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PMI_NXT_CAP_PTR regPMI_NXT_CAP_PTR;

__inline void dump_PMI_NXT_CAP_PTR(__in  unsigned int *dwreg, __in  char *buff)
{
  regPMI_NXT_CAP_PTR *reg = (regPMI_NXT_CAP_PTR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PMI_PMC_REG regPMI_PMC_REG;

__inline void dump_PMI_PMC_REG(__in  unsigned int *dwreg, __in  char *buff)
{
  regPMI_PMC_REG *reg = (regPMI_PMC_REG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PMI_VERSION:%x", buff, reg->bitfields.PMI_VERSION);
  sprintf(buff,"%s PMI_PME_CLOCK:%x", buff, reg->bitfields.PMI_PME_CLOCK);
  sprintf(buff,"%s PMI_DEV_SPECIFIC_INIT:%x", buff, reg->bitfields.PMI_DEV_SPECIFIC_INIT);
  sprintf(buff,"%s PMI_D1_SUPPORT:%x", buff, reg->bitfields.PMI_D1_SUPPORT);
  sprintf(buff,"%s PMI_D2_SUPPORT:%x", buff, reg->bitfields.PMI_D2_SUPPORT);
  sprintf(buff,"%s PMI_PME_SUPPORT:%x", buff, reg->bitfields.PMI_PME_SUPPORT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PM_STATUS regPM_STATUS;

__inline void dump_PM_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regPM_STATUS *reg = (regPM_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PMI_POWER_STATE:%x", buff, reg->bitfields.PMI_POWER_STATE);
  sprintf(buff,"%s PMI_PME_EN:%x", buff, reg->bitfields.PMI_PME_EN);
  sprintf(buff,"%s PMI_DATA_SELECT:%x", buff, reg->bitfields.PMI_DATA_SELECT);
  sprintf(buff,"%s PMI_DATA_SCALE:%x", buff, reg->bitfields.PMI_DATA_SCALE);
  sprintf(buff,"%s PMI_PME_STATUS:%x", buff, reg->bitfields.PMI_PME_STATUS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PMI_DATA regPMI_DATA;

__inline void dump_PMI_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regPMI_DATA *reg = (regPMI_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AGP_CAP_ID regAGP_CAP_ID;

__inline void dump_AGP_CAP_ID(__in  unsigned int *dwreg, __in  char *buff)
{
  regAGP_CAP_ID *reg = (regAGP_CAP_ID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_ID:%x", buff, reg->bitfields.CAP_ID);
  sprintf(buff,"%s NEXT_PTR:%x", buff, reg->bitfields.NEXT_PTR);
  sprintf(buff,"%s AGP_MINOR:%x", buff, reg->bitfields.AGP_MINOR);
  sprintf(buff,"%s AGP_MAJOR:%x", buff, reg->bitfields.AGP_MAJOR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AGP_STATUS regAGP_STATUS;

__inline void dump_AGP_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regAGP_STATUS *reg = (regAGP_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s RATE1X:%x", buff, reg->bitfields.RATE1X);
  sprintf(buff,"%s RATE2X:%x", buff, reg->bitfields.RATE2X);
  sprintf(buff,"%s RATE4X:%x", buff, reg->bitfields.RATE4X);
  sprintf(buff,"%s FW:%x", buff, reg->bitfields.FW);
  sprintf(buff,"%s MODE_4G:%x", buff, reg->bitfields.MODE_4G);
  sprintf(buff,"%s SBA:%x", buff, reg->bitfields.SBA);
  sprintf(buff,"%s RQ:%x", buff, reg->bitfields.RQ);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AGP_COMMAND regAGP_COMMAND;

__inline void dump_AGP_COMMAND(__in  unsigned int *dwreg, __in  char *buff)
{
  regAGP_COMMAND *reg = (regAGP_COMMAND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DATA_RATE:%x", buff, reg->bitfields.DATA_RATE);
  sprintf(buff,"%s FW_EN:%x", buff, reg->bitfields.FW_EN);
  sprintf(buff,"%s MODE_4G_EN:%x", buff, reg->bitfields.MODE_4G_EN);
  sprintf(buff,"%s AGP_EN:%x", buff, reg->bitfields.AGP_EN);
  sprintf(buff,"%s SBA_EN:%x", buff, reg->bitfields.SBA_EN);
  sprintf(buff,"%s RQ_DEPTH:%x", buff, reg->bitfields.RQ_DEPTH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_VENDOR_ID regF1_VENDOR_ID;

__inline void dump_F1_VENDOR_ID(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_VENDOR_ID *reg = (regF1_VENDOR_ID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_DEVICE_ID regF1_DEVICE_ID;

__inline void dump_F1_DEVICE_ID(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_DEVICE_ID *reg = (regF1_DEVICE_ID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_COMMAND regF1_COMMAND;

__inline void dump_F1_COMMAND(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_COMMAND *reg = (regF1_COMMAND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F1_IO_ACCESS_EN:%x", buff, reg->bitfields.F1_IO_ACCESS_EN);
  sprintf(buff,"%s F1_MEM_ACCESS_EN:%x", buff, reg->bitfields.F1_MEM_ACCESS_EN);
  sprintf(buff,"%s F1_BUS_MASTER_EN:%x", buff, reg->bitfields.F1_BUS_MASTER_EN);
  sprintf(buff,"%s F1_AD_STEPPING:%x", buff, reg->bitfields.F1_AD_STEPPING);
  sprintf(buff,"%s F1_FAST_B2B_EN:%x", buff, reg->bitfields.F1_FAST_B2B_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_STATUS regF1_STATUS;

__inline void dump_F1_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_STATUS *reg = (regF1_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F1_CAP_LIST:%x", buff, reg->bitfields.F1_CAP_LIST);
  sprintf(buff,"%s F1_PCI_66_EN:%x", buff, reg->bitfields.F1_PCI_66_EN);
  sprintf(buff,"%s F1_UDF_EN:%x", buff, reg->bitfields.F1_UDF_EN);
  sprintf(buff,"%s F1_FAST_BACK_CAPABLE:%x", buff, reg->bitfields.F1_FAST_BACK_CAPABLE);
  sprintf(buff,"%s F1_DEVSEL_TIMING:%x", buff, reg->bitfields.F1_DEVSEL_TIMING);
  sprintf(buff,"%s F1_SIGNAL_TARGET_ABORT:%x", buff, reg->bitfields.F1_SIGNAL_TARGET_ABORT);
  sprintf(buff,"%s F1_RECEIVED_TARGET_ABORT:%x", buff, reg->bitfields.F1_RECEIVED_TARGET_ABORT);
  sprintf(buff,"%s F1_RECEIVED_MASTER_ABORT:%x", buff, reg->bitfields.F1_RECEIVED_MASTER_ABORT);
  sprintf(buff,"%s F1_PARITY_ERROR_DETECTED:%x", buff, reg->bitfields.F1_PARITY_ERROR_DETECTED);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_REVISION_ID regF1_REVISION_ID;

__inline void dump_F1_REVISION_ID(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_REVISION_ID *reg = (regF1_REVISION_ID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F1_MINOR_REV_ID:%x", buff, reg->bitfields.F1_MINOR_REV_ID);
  sprintf(buff,"%s F1_MAJOR_REV_ID:%x", buff, reg->bitfields.F1_MAJOR_REV_ID);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_REGPROG_INF regF1_REGPROG_INF;

__inline void dump_F1_REGPROG_INF(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_REGPROG_INF *reg = (regF1_REGPROG_INF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_SUB_CLASS regF1_SUB_CLASS;

__inline void dump_F1_SUB_CLASS(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_SUB_CLASS *reg = (regF1_SUB_CLASS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_BASE_CODE regF1_BASE_CODE;

__inline void dump_F1_BASE_CODE(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_BASE_CODE *reg = (regF1_BASE_CODE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_CACHE_LINE regF1_CACHE_LINE;

__inline void dump_F1_CACHE_LINE(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_CACHE_LINE *reg = (regF1_CACHE_LINE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_LATENCY regF1_LATENCY;

__inline void dump_F1_LATENCY(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_LATENCY *reg = (regF1_LATENCY *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_HEADER regF1_HEADER;

__inline void dump_F1_HEADER(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_HEADER *reg = (regF1_HEADER *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F1_HEADER_TYPE:%x", buff, reg->bitfields.F1_HEADER_TYPE);
  sprintf(buff,"%s F1_DEVICE_TYPE:%x", buff, reg->bitfields.F1_DEVICE_TYPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_BIST regF1_BIST;

__inline void dump_F1_BIST(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_BIST *reg = (regF1_BIST *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F1_BIST_COMP:%x", buff, reg->bitfields.F1_BIST_COMP);
  sprintf(buff,"%s F1_BIST_STRT:%x", buff, reg->bitfields.F1_BIST_STRT);
  sprintf(buff,"%s F1_BIST_CAP:%x", buff, reg->bitfields.F1_BIST_CAP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_MEM_BASE regF1_MEM_BASE;

__inline void dump_F1_MEM_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_MEM_BASE *reg = (regF1_MEM_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F1_PREFETCH_EN:%x", buff, reg->bitfields.F1_PREFETCH_EN);
  sprintf(buff,"%s F1_MEM_BASE:%x", buff, reg->bitfields.F1_MEM_BASE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_REG_BASE regF1_REG_BASE;

__inline void dump_F1_REG_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_REG_BASE *reg = (regF1_REG_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_ADAPTER_ID regF1_ADAPTER_ID;

__inline void dump_F1_ADAPTER_ID(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_ADAPTER_ID *reg = (regF1_ADAPTER_ID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F1_SUBSYSTEM_VENDOR_ID:%x", buff, reg->bitfields.F1_SUBSYSTEM_VENDOR_ID);
  sprintf(buff,"%s F1_SUBSYSTEM_ID:%x", buff, reg->bitfields.F1_SUBSYSTEM_ID);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_CAPABILITIES_PTR regF1_CAPABILITIES_PTR;

__inline void dump_F1_CAPABILITIES_PTR(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_CAPABILITIES_PTR *reg = (regF1_CAPABILITIES_PTR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_INTERRUPT_LINE regF1_INTERRUPT_LINE;

__inline void dump_F1_INTERRUPT_LINE(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_INTERRUPT_LINE *reg = (regF1_INTERRUPT_LINE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_INTERRUPT_PIN regF1_INTERRUPT_PIN;

__inline void dump_F1_INTERRUPT_PIN(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_INTERRUPT_PIN *reg = (regF1_INTERRUPT_PIN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_MIN_GRANT regF1_MIN_GRANT;

__inline void dump_F1_MIN_GRANT(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_MIN_GRANT *reg = (regF1_MIN_GRANT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_MAX_LATENCY regF1_MAX_LATENCY;

__inline void dump_F1_MAX_LATENCY(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_MAX_LATENCY *reg = (regF1_MAX_LATENCY *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_PMI_CAP_ID regF1_PMI_CAP_ID;

__inline void dump_F1_PMI_CAP_ID(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_PMI_CAP_ID *reg = (regF1_PMI_CAP_ID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_PMI_NXT_CAP_PTR regF1_PMI_NXT_CAP_PTR;

__inline void dump_F1_PMI_NXT_CAP_PTR(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_PMI_NXT_CAP_PTR *reg = (regF1_PMI_NXT_CAP_PTR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_PMI_PMC_REG regF1_PMI_PMC_REG;

__inline void dump_F1_PMI_PMC_REG(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_PMI_PMC_REG *reg = (regF1_PMI_PMC_REG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F1_PMI_VERSION:%x", buff, reg->bitfields.F1_PMI_VERSION);
  sprintf(buff,"%s F1_PMI_PME_CLOCK:%x", buff, reg->bitfields.F1_PMI_PME_CLOCK);
  sprintf(buff,"%s F1_PMI_DEV_SPECIFIC_INIT:%x", buff, reg->bitfields.F1_PMI_DEV_SPECIFIC_INIT);
  sprintf(buff,"%s F1_PMI_D1_SUPPORT:%x", buff, reg->bitfields.F1_PMI_D1_SUPPORT);
  sprintf(buff,"%s F1_PMI_D2_SUPPORT:%x", buff, reg->bitfields.F1_PMI_D2_SUPPORT);
  sprintf(buff,"%s F1_PMI_PME_SUPPORT:%x", buff, reg->bitfields.F1_PMI_PME_SUPPORT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_PM_STATUS regF1_PM_STATUS;

__inline void dump_F1_PM_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_PM_STATUS *reg = (regF1_PM_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F1_PMI_POWER_STATE:%x", buff, reg->bitfields.F1_PMI_POWER_STATE);
  sprintf(buff,"%s F1_PMI_PME_EN:%x", buff, reg->bitfields.F1_PMI_PME_EN);
  sprintf(buff,"%s F1_PMI_DATA_SELECT:%x", buff, reg->bitfields.F1_PMI_DATA_SELECT);
  sprintf(buff,"%s F1_PMI_DATA_SCALE:%x", buff, reg->bitfields.F1_PMI_DATA_SCALE);
  sprintf(buff,"%s F1_PMI_PME_STATUS:%x", buff, reg->bitfields.F1_PMI_PME_STATUS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_PMI_DATA regF1_PMI_DATA;

__inline void dump_F1_PMI_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_PMI_DATA *reg = (regF1_PMI_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_AGP_CAP_ID regF1_AGP_CAP_ID;

__inline void dump_F1_AGP_CAP_ID(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_AGP_CAP_ID *reg = (regF1_AGP_CAP_ID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F1_CAP_ID:%x", buff, reg->bitfields.F1_CAP_ID);
  sprintf(buff,"%s F1_NEXT_PTR:%x", buff, reg->bitfields.F1_NEXT_PTR);
  sprintf(buff,"%s F1_AGP_MINOR:%x", buff, reg->bitfields.F1_AGP_MINOR);
  sprintf(buff,"%s F1_AGP_MAJOR:%x", buff, reg->bitfields.F1_AGP_MAJOR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_AGP_STATUS regF1_AGP_STATUS;

__inline void dump_F1_AGP_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_AGP_STATUS *reg = (regF1_AGP_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F1_RATE1X:%x", buff, reg->bitfields.F1_RATE1X);
  sprintf(buff,"%s F1_RATE2X:%x", buff, reg->bitfields.F1_RATE2X);
  sprintf(buff,"%s F1_RATE4X:%x", buff, reg->bitfields.F1_RATE4X);
  sprintf(buff,"%s F1_FW:%x", buff, reg->bitfields.F1_FW);
  sprintf(buff,"%s F1_MODE_4G:%x", buff, reg->bitfields.F1_MODE_4G);
  sprintf(buff,"%s F1_SBA:%x", buff, reg->bitfields.F1_SBA);
  sprintf(buff,"%s F1_RQ:%x", buff, reg->bitfields.F1_RQ);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union F1_AGP_COMMAND regF1_AGP_COMMAND;

__inline void dump_F1_AGP_COMMAND(__in  unsigned int *dwreg, __in  char *buff)
{
  regF1_AGP_COMMAND *reg = (regF1_AGP_COMMAND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F1_DATA_RATE:%x", buff, reg->bitfields.F1_DATA_RATE);
  sprintf(buff,"%s F1_FW_EN:%x", buff, reg->bitfields.F1_FW_EN);
  sprintf(buff,"%s F1_MODE_4G_EN:%x", buff, reg->bitfields.F1_MODE_4G_EN);
  sprintf(buff,"%s F1_AGP_EN:%x", buff, reg->bitfields.F1_AGP_EN);
  sprintf(buff,"%s F1_SBA_EN:%x", buff, reg->bitfields.F1_SBA_EN);
  sprintf(buff,"%s F1_RQ_DEPTH:%x", buff, reg->bitfields.F1_RQ_DEPTH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AIC_CTRL regAIC_CTRL;

__inline void dump_AIC_CTRL(__in  unsigned int *dwreg, __in  char *buff)
{
  regAIC_CTRL *reg = (regAIC_CTRL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TRANSLATE_EN:%x", buff, reg->bitfields.TRANSLATE_EN);
  sprintf(buff,"%s DIS_OUT_OF_PCI_GART_ACCESS:%x", buff, reg->bitfields.DIS_OUT_OF_PCI_GART_ACCESS);
  sprintf(buff,"%s HW_1_DEBUG:%x", buff, reg->bitfields.HW_1_DEBUG);
  sprintf(buff,"%s HW_2_DEBUG:%x", buff, reg->bitfields.HW_2_DEBUG);
  sprintf(buff,"%s HW_3_DEBUG:%x", buff, reg->bitfields.HW_3_DEBUG);
  sprintf(buff,"%s HW_4_DEBUG:%x", buff, reg->bitfields.HW_4_DEBUG);
  sprintf(buff,"%s HW_5_DEBUG:%x", buff, reg->bitfields.HW_5_DEBUG);
  sprintf(buff,"%s HW_6_DEBUG:%x", buff, reg->bitfields.HW_6_DEBUG);
  sprintf(buff,"%s HW_7_DEBUG:%x", buff, reg->bitfields.HW_7_DEBUG);
  sprintf(buff,"%s HW_8_DEBUG:%x", buff, reg->bitfields.HW_8_DEBUG);
  sprintf(buff,"%s HW_9_DEBUG:%x", buff, reg->bitfields.HW_9_DEBUG);
  sprintf(buff,"%s HW_A_DEBUG:%x", buff, reg->bitfields.HW_A_DEBUG);
  sprintf(buff,"%s HW_B_DEBUG:%x", buff, reg->bitfields.HW_B_DEBUG);
  sprintf(buff,"%s HW_C_DEBUG:%x", buff, reg->bitfields.HW_C_DEBUG);
  sprintf(buff,"%s HW_D_DEBUG:%x", buff, reg->bitfields.HW_D_DEBUG);
  sprintf(buff,"%s HW_E_DEBUG:%x", buff, reg->bitfields.HW_E_DEBUG);
  sprintf(buff,"%s HW_F_DEBUG:%x", buff, reg->bitfields.HW_F_DEBUG);
  sprintf(buff,"%s HW_10_DEBUG:%x", buff, reg->bitfields.HW_10_DEBUG);
  sprintf(buff,"%s HW_11_DEBUG:%x", buff, reg->bitfields.HW_11_DEBUG);
  sprintf(buff,"%s HW_12_DEBUG:%x", buff, reg->bitfields.HW_12_DEBUG);
  sprintf(buff,"%s HW_13_DEBUG:%x", buff, reg->bitfields.HW_13_DEBUG);
  sprintf(buff,"%s HW_14_DEBUG:%x", buff, reg->bitfields.HW_14_DEBUG);
  sprintf(buff,"%s HW_15_DEBUG:%x", buff, reg->bitfields.HW_15_DEBUG);
  sprintf(buff,"%s HW_16_DEBUG:%x", buff, reg->bitfields.HW_16_DEBUG);
  sprintf(buff,"%s HW_17_DEBUG:%x", buff, reg->bitfields.HW_17_DEBUG);
  sprintf(buff,"%s HW_18_DEBUG:%x", buff, reg->bitfields.HW_18_DEBUG);
  sprintf(buff,"%s HW_19_DEBUG:%x", buff, reg->bitfields.HW_19_DEBUG);
  sprintf(buff,"%s HW_1A_DEBUG:%x", buff, reg->bitfields.HW_1A_DEBUG);
  sprintf(buff,"%s HW_1B_DEBUG:%x", buff, reg->bitfields.HW_1B_DEBUG);
  sprintf(buff,"%s HW_1C_DEBUG:%x", buff, reg->bitfields.HW_1C_DEBUG);
  sprintf(buff,"%s HW_1D_DEBUG:%x", buff, reg->bitfields.HW_1D_DEBUG);
  sprintf(buff,"%s HW_1E_DEBUG:%x", buff, reg->bitfields.HW_1E_DEBUG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AIC_STAT regAIC_STAT;

__inline void dump_AIC_STAT(__in  unsigned int *dwreg, __in  char *buff)
{
  regAIC_STAT *reg = (regAIC_STAT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s AIC_TLB_VLD:%x", buff, reg->bitfields.AIC_TLB_VLD);
  sprintf(buff,"%s AIC_STAT1:%x", buff, reg->bitfields.AIC_STAT1);
  sprintf(buff,"%s AIC_STAT0:%x", buff, reg->bitfields.AIC_STAT0);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AIC_PT_BASE regAIC_PT_BASE;

__inline void dump_AIC_PT_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regAIC_PT_BASE *reg = (regAIC_PT_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AIC_LO_ADDR regAIC_LO_ADDR;

__inline void dump_AIC_LO_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regAIC_LO_ADDR *reg = (regAIC_LO_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AIC_HI_ADDR regAIC_HI_ADDR;

__inline void dump_AIC_HI_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regAIC_HI_ADDR *reg = (regAIC_HI_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AIC_TLB_ADDR regAIC_TLB_ADDR;

__inline void dump_AIC_TLB_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regAIC_TLB_ADDR *reg = (regAIC_TLB_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AIC_TLB_DATA regAIC_TLB_DATA;

__inline void dump_AIC_TLB_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regAIC_TLB_DATA *reg = (regAIC_TLB_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GENMO_WT regGENMO_WT;

__inline void dump_GENMO_WT(__in  unsigned int *dwreg, __in  char *buff)
{
  regGENMO_WT *reg = (regGENMO_WT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GENMO_MONO_ADDRESS_B:%x", buff, reg->bitfields.GENMO_MONO_ADDRESS_B);
  sprintf(buff,"%s VGA_RAM_EN:%x", buff, reg->bitfields.VGA_RAM_EN);
  sprintf(buff,"%s VGA_CKSEL:%x", buff, reg->bitfields.VGA_CKSEL);
  sprintf(buff,"%s ODD_EVEN_MD_PGSEL:%x", buff, reg->bitfields.ODD_EVEN_MD_PGSEL);
  sprintf(buff,"%s VGA_HSYNC_POL:%x", buff, reg->bitfields.VGA_HSYNC_POL);
  sprintf(buff,"%s VGA_VSYNC_POL:%x", buff, reg->bitfields.VGA_VSYNC_POL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GENMO_RD regGENMO_RD;

__inline void dump_GENMO_RD(__in  unsigned int *dwreg, __in  char *buff)
{
  regGENMO_RD *reg = (regGENMO_RD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GENMO_MONO_ADDRESS_B:%x", buff, reg->bitfields.GENMO_MONO_ADDRESS_B);
  sprintf(buff,"%s VGA_RAM_EN:%x", buff, reg->bitfields.VGA_RAM_EN);
  sprintf(buff,"%s VGA_CKSEL:%x", buff, reg->bitfields.VGA_CKSEL);
  sprintf(buff,"%s ODD_EVEN_MD_PGSEL:%x", buff, reg->bitfields.ODD_EVEN_MD_PGSEL);
  sprintf(buff,"%s VGA_HSYNC_POL:%x", buff, reg->bitfields.VGA_HSYNC_POL);
  sprintf(buff,"%s VGA_VSYNC_POL:%x", buff, reg->bitfields.VGA_VSYNC_POL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250DAC_CNTL regrv250DAC_CNTL;

__inline void dump_rv250DAC_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250DAC_CNTL *reg = (regrv250DAC_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_RANGE_CNTL:%x", buff, reg->bitfields.DAC_RANGE_CNTL);
  sprintf(buff,"%s DAC_BLANKING:%x", buff, reg->bitfields.DAC_BLANKING);
  sprintf(buff,"%s DAC_CMP_EN:%x", buff, reg->bitfields.DAC_CMP_EN);
  sprintf(buff,"%s DAC_CMP_OUT_R:%x", buff, reg->bitfields.DAC_CMP_OUT_R);
  sprintf(buff,"%s DAC_CMP_OUT_G:%x", buff, reg->bitfields.DAC_CMP_OUT_G);
  sprintf(buff,"%s DAC_CMP_OUT_B:%x", buff, reg->bitfields.DAC_CMP_OUT_B);
  sprintf(buff,"%s DAC_CMP_OUTPUT:%x", buff, reg->bitfields.DAC_CMP_OUTPUT);
  sprintf(buff,"%s DAC_8BIT_EN:%x", buff, reg->bitfields.DAC_8BIT_EN);
  sprintf(buff,"%s DAC_4BPP_PIX_ORDER:%x", buff, reg->bitfields.DAC_4BPP_PIX_ORDER);
  sprintf(buff,"%s DAC_VGA_ADR_EN:%x", buff, reg->bitfields.DAC_VGA_ADR_EN);
  sprintf(buff,"%s DAC_EXPAND_MODE:%x", buff, reg->bitfields.DAC_EXPAND_MODE);
  sprintf(buff,"%s DAC_PDWN:%x", buff, reg->bitfields.DAC_PDWN);
  sprintf(buff,"%s CRT_SENSE:%x", buff, reg->bitfields.CRT_SENSE);
  sprintf(buff,"%s CRT_DETECTION_ON:%x", buff, reg->bitfields.CRT_DETECTION_ON);
  sprintf(buff,"%s DAC_CRC_CONT_EN:%x", buff, reg->bitfields.DAC_CRC_CONT_EN);
  sprintf(buff,"%s DAC_CRC_EN:%x", buff, reg->bitfields.DAC_CRC_EN);
  sprintf(buff,"%s DAC_CRC_FIELD:%x", buff, reg->bitfields.DAC_CRC_FIELD);
  sprintf(buff,"%s DAC_LUT_COUNTER_LIMIT:%x", buff, reg->bitfields.DAC_LUT_COUNTER_LIMIT);
  sprintf(buff,"%s DAC_LUT_READ_SEL:%x", buff, reg->bitfields.DAC_LUT_READ_SEL);
  sprintf(buff,"%s DAC_MASK:%x", buff, reg->bitfields.DAC_MASK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250CRTC_GEN_CNTL regrv250CRTC_GEN_CNTL;

__inline void dump_rv250CRTC_GEN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250CRTC_GEN_CNTL *reg = (regrv250CRTC_GEN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_DBL_SCAN_EN:%x", buff, reg->bitfields.CRTC_DBL_SCAN_EN);
  sprintf(buff,"%s CRTC_INTERLACE_EN:%x", buff, reg->bitfields.CRTC_INTERLACE_EN);
  sprintf(buff,"%s CRTC_C_SYNC_EN:%x", buff, reg->bitfields.CRTC_C_SYNC_EN);
  sprintf(buff,"%s CRTC_PIX_WIDTH:%x", buff, reg->bitfields.CRTC_PIX_WIDTH);
  sprintf(buff,"%s CRTC_MODE9_COLOR_ORDER:%x", buff, reg->bitfields.CRTC_MODE9_COLOR_ORDER);
  sprintf(buff,"%s CRTC_BYPASS_LUT_EN:%x", buff, reg->bitfields.CRTC_BYPASS_LUT_EN);
  sprintf(buff,"%s CRTC_ICON_EN:%x", buff, reg->bitfields.CRTC_ICON_EN);
  sprintf(buff,"%s CRTC_CUR_EN:%x", buff, reg->bitfields.CRTC_CUR_EN);
  sprintf(buff,"%s CRTC_VSTAT_MODE:%x", buff, reg->bitfields.CRTC_VSTAT_MODE);
  sprintf(buff,"%s CRTC_CUR_MODE:%x", buff, reg->bitfields.CRTC_CUR_MODE);
  sprintf(buff,"%s CRTC_EXT_DISP_EN:%x", buff, reg->bitfields.CRTC_EXT_DISP_EN);
  sprintf(buff,"%s CRTC_EN:%x", buff, reg->bitfields.CRTC_EN);
  sprintf(buff,"%s CRTC_DISP_REQ_EN_B:%x", buff, reg->bitfields.CRTC_DISP_REQ_EN_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MEM_TIMING_CNTL regMEM_TIMING_CNTL;

__inline void dump_MEM_TIMING_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMEM_TIMING_CNTL *reg = (regMEM_TIMING_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_TRCD:%x", buff, reg->bitfields.MEM_TRCD);
  sprintf(buff,"%s MEM_TRCDW:%x", buff, reg->bitfields.MEM_TRCDW);
  sprintf(buff,"%s MEM_TRP:%x", buff, reg->bitfields.MEM_TRP);
  sprintf(buff,"%s MEM_TRAS:%x", buff, reg->bitfields.MEM_TRAS);
  sprintf(buff,"%s MEM_TRRD:%x", buff, reg->bitfields.MEM_TRRD);
  sprintf(buff,"%s MEM_TR2W:%x", buff, reg->bitfields.MEM_TR2W);
  sprintf(buff,"%s MEM_TWR:%x", buff, reg->bitfields.MEM_TWR);
  sprintf(buff,"%s MEM_TW2R:%x", buff, reg->bitfields.MEM_TW2R);
  sprintf(buff,"%s MEM_TW2R_SAME_BANK:%x", buff, reg->bitfields.MEM_TW2R_SAME_BANK);
  sprintf(buff,"%s MEM_TR2R:%x", buff, reg->bitfields.MEM_TR2R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_AGP_LOCATION regMC_AGP_LOCATION;

__inline void dump_MC_AGP_LOCATION(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_AGP_LOCATION *reg = (regMC_AGP_LOCATION *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MC_AGP_START:%x", buff, reg->bitfields.MC_AGP_START);
  sprintf(buff,"%s MC_AGP_TOP:%x", buff, reg->bitfields.MC_AGP_TOP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MEM_REFRESH_CNTL regMEM_REFRESH_CNTL;

__inline void dump_MEM_REFRESH_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMEM_REFRESH_CNTL *reg = (regMEM_REFRESH_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_REFRESH_RATE:%x", buff, reg->bitfields.MEM_REFRESH_RATE);
  sprintf(buff,"%s MEM_REFRESH_DIS:%x", buff, reg->bitfields.MEM_REFRESH_DIS);
  sprintf(buff,"%s MEM_DYNAMIC_CKE:%x", buff, reg->bitfields.MEM_DYNAMIC_CKE);
  sprintf(buff,"%s MEM_TRFC:%x", buff, reg->bitfields.MEM_TRFC);
  sprintf(buff,"%s MEM_CLKA0_ENABLE:%x", buff, reg->bitfields.MEM_CLKA0_ENABLE);
  sprintf(buff,"%s MEM_CLKA0b_ENABLE:%x", buff, reg->bitfields.MEM_CLKA0b_ENABLE);
  sprintf(buff,"%s MEM_CLKA1_ENABLE:%x", buff, reg->bitfields.MEM_CLKA1_ENABLE);
  sprintf(buff,"%s MEM_CLKA1b_ENABLE:%x", buff, reg->bitfields.MEM_CLKA1b_ENABLE);
  sprintf(buff,"%s MEM_CLKAFB_ENABLE:%x", buff, reg->bitfields.MEM_CLKAFB_ENABLE);
  sprintf(buff,"%s DLL_FB_SLCT_CKA:%x", buff, reg->bitfields.DLL_FB_SLCT_CKA);
  sprintf(buff,"%s MEM_CLKB0_ENABLE:%x", buff, reg->bitfields.MEM_CLKB0_ENABLE);
  sprintf(buff,"%s MEM_CLKB0b_ENABLE:%x", buff, reg->bitfields.MEM_CLKB0b_ENABLE);
  sprintf(buff,"%s MEM_CLKB1_ENABLE:%x", buff, reg->bitfields.MEM_CLKB1_ENABLE);
  sprintf(buff,"%s MEM_CLKB1b_ENABLE:%x", buff, reg->bitfields.MEM_CLKB1b_ENABLE);
  sprintf(buff,"%s MEM_CLKBFB_ENABLE:%x", buff, reg->bitfields.MEM_CLKBFB_ENABLE);
  sprintf(buff,"%s DLL_FB_SLCT_CKB:%x", buff, reg->bitfields.DLL_FB_SLCT_CKB);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MEM_INIT_LATENCY_TIMER regMEM_INIT_LATENCY_TIMER;

__inline void dump_MEM_INIT_LATENCY_TIMER(__in  unsigned int *dwreg, __in  char *buff)
{
  regMEM_INIT_LATENCY_TIMER *reg = (regMEM_INIT_LATENCY_TIMER *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_RB0R_INIT_LAT:%x", buff, reg->bitfields.MEM_RB0R_INIT_LAT);
  sprintf(buff,"%s MEM_RB1R_INIT_LAT:%x", buff, reg->bitfields.MEM_RB1R_INIT_LAT);
  sprintf(buff,"%s MEM_PPR_INIT_LAT:%x", buff, reg->bitfields.MEM_PPR_INIT_LAT);
  sprintf(buff,"%s MEM_DISPR_INIT_LAT:%x", buff, reg->bitfields.MEM_DISPR_INIT_LAT);
  sprintf(buff,"%s MEM_RB0W_INIT_LAT:%x", buff, reg->bitfields.MEM_RB0W_INIT_LAT);
  sprintf(buff,"%s MEM_RB1W_INIT_LAT:%x", buff, reg->bitfields.MEM_RB1W_INIT_LAT);
  sprintf(buff,"%s MEM_FIXED_INIT_LAT:%x", buff, reg->bitfields.MEM_FIXED_INIT_LAT);
  sprintf(buff,"%s SAME_PAGE_PRIO:%x", buff, reg->bitfields.SAME_PAGE_PRIO);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MEM_SDRAM_MODE_REG regMEM_SDRAM_MODE_REG;

__inline void dump_MEM_SDRAM_MODE_REG(__in  unsigned int *dwreg, __in  char *buff)
{
  regMEM_SDRAM_MODE_REG *reg = (regMEM_SDRAM_MODE_REG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_MODE_REG:%x", buff, reg->bitfields.MEM_MODE_REG);
  sprintf(buff,"%s MEM_WR_LATENCY:%x", buff, reg->bitfields.MEM_WR_LATENCY);
  sprintf(buff,"%s MEM_CAS_LATENCY:%x", buff, reg->bitfields.MEM_CAS_LATENCY);
  sprintf(buff,"%s MEM_CMD_LATENCY:%x", buff, reg->bitfields.MEM_CMD_LATENCY);
  sprintf(buff,"%s MEM_STR_LATENCY:%x", buff, reg->bitfields.MEM_STR_LATENCY);
  sprintf(buff,"%s MEM_FALL_OUT_CMD:%x", buff, reg->bitfields.MEM_FALL_OUT_CMD);
  sprintf(buff,"%s MEM_FALL_OUT_DATA:%x", buff, reg->bitfields.MEM_FALL_OUT_DATA);
  sprintf(buff,"%s MEM_FALL_OUT_STR:%x", buff, reg->bitfields.MEM_FALL_OUT_STR);
  sprintf(buff,"%s MC_INIT_COMPLETE:%x", buff, reg->bitfields.MC_INIT_COMPLETE);
  sprintf(buff,"%s MEM_DDR_DLL:%x", buff, reg->bitfields.MEM_DDR_DLL);
  sprintf(buff,"%s MEM_CFG_TYPE:%x", buff, reg->bitfields.MEM_CFG_TYPE);
  sprintf(buff,"%s MEM_SDRAM_RESET:%x", buff, reg->bitfields.MEM_SDRAM_RESET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AGP_BASE regAGP_BASE;

__inline void dump_AGP_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regAGP_BASE *reg = (regAGP_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MEM_READ_CNTL regMEM_READ_CNTL;

__inline void dump_MEM_READ_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMEM_READ_CNTL *reg = (regMEM_READ_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_RBS_POSITION_A:%x", buff, reg->bitfields.MEM_RBS_POSITION_A);
  sprintf(buff,"%s MEM_STR_SEL_A:%x", buff, reg->bitfields.MEM_STR_SEL_A);
  sprintf(buff,"%s MEM_ERST_POSITION_A:%x", buff, reg->bitfields.MEM_ERST_POSITION_A);
  sprintf(buff,"%s MEM_ERST_EXTEND_A:%x", buff, reg->bitfields.MEM_ERST_EXTEND_A);
  sprintf(buff,"%s MEM_QSREC_POSITION_A:%x", buff, reg->bitfields.MEM_QSREC_POSITION_A);
  sprintf(buff,"%s MEM_QSREC_EXTEND_A:%x", buff, reg->bitfields.MEM_QSREC_EXTEND_A);
  sprintf(buff,"%s MEM_ERST_SYNC_A:%x", buff, reg->bitfields.MEM_ERST_SYNC_A);
  sprintf(buff,"%s MEM_QSREC_SYNC_A:%x", buff, reg->bitfields.MEM_QSREC_SYNC_A);
  sprintf(buff,"%s MEM_READ_STR_FALL_A:%x", buff, reg->bitfields.MEM_READ_STR_FALL_A);
  sprintf(buff,"%s MEM_RBS_POSITION_B:%x", buff, reg->bitfields.MEM_RBS_POSITION_B);
  sprintf(buff,"%s MEM_STR_SEL_B:%x", buff, reg->bitfields.MEM_STR_SEL_B);
  sprintf(buff,"%s MEM_ERST_POSITION_B:%x", buff, reg->bitfields.MEM_ERST_POSITION_B);
  sprintf(buff,"%s MEM_ERST_EXTEND_B:%x", buff, reg->bitfields.MEM_ERST_EXTEND_B);
  sprintf(buff,"%s MEM_QSREC_POSITION_B:%x", buff, reg->bitfields.MEM_QSREC_POSITION_B);
  sprintf(buff,"%s MEM_QSREC_EXTEND_B:%x", buff, reg->bitfields.MEM_QSREC_EXTEND_B);
  sprintf(buff,"%s MEM_ERST_SYNC_B:%x", buff, reg->bitfields.MEM_ERST_SYNC_B);
  sprintf(buff,"%s MEM_QSREC_SYNC_B:%x", buff, reg->bitfields.MEM_QSREC_SYNC_B);
  sprintf(buff,"%s MEM_READ_STR_FALL_B:%x", buff, reg->bitfields.MEM_READ_STR_FALL_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250MC_DEBUG regrv250MC_DEBUG;

__inline void dump_rv250MC_DEBUG(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250MC_DEBUG *reg = (regrv250MC_DEBUG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s IGNORE_RW_PENALTY_RB0R:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_RB0R);
  sprintf(buff,"%s IGNORE_RW_PENALTY_RB1R:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_RB1R);
  sprintf(buff,"%s IGNORE_RW_PENALTY_RB0W:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_RB0W);
  sprintf(buff,"%s IGNORE_RW_PENALTY_RB1W:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_RB1W);
  sprintf(buff,"%s IGNORE_RW_PENALTY_DISPR:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_DISPR);
  sprintf(buff,"%s IGNORE_RW_PENALTY_PPR:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_PPR);
  sprintf(buff,"%s IGNORE_RW_PENALTY_FIXED:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_FIXED);
  sprintf(buff,"%s MEM_VIPW_PRIORITY:%x", buff, reg->bitfields.MEM_VIPW_PRIORITY);
  sprintf(buff,"%s EN_AIC_IDLE_DET:%x", buff, reg->bitfields.EN_AIC_IDLE_DET);
  sprintf(buff,"%s MEM_MC_BLACKOUT:%x", buff, reg->bitfields.MEM_MC_BLACKOUT);
  sprintf(buff,"%s DISABLE_TEE_SM_CHANGES:%x", buff, reg->bitfields.DISABLE_TEE_SM_CHANGES);
  sprintf(buff,"%s IMP_N_VALUE_DQS_R_BACK:%x", buff, reg->bitfields.IMP_N_VALUE_DQS_R_BACK);
  sprintf(buff,"%s IMP_P_VALUE_DQS_R_BACK:%x", buff, reg->bitfields.IMP_P_VALUE_DQS_R_BACK);
  sprintf(buff,"%s MC_BIST_EN:%x", buff, reg->bitfields.MC_BIST_EN);
  sprintf(buff,"%s MC_DEBUG:%x", buff, reg->bitfields.MC_DEBUG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_STATUS regMC_STATUS;

__inline void dump_MC_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_STATUS *reg = (regMC_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_PWRUP_COMPL_A:%x", buff, reg->bitfields.MEM_PWRUP_COMPL_A);
  sprintf(buff,"%s MEM_PWRUP_COMPL_B:%x", buff, reg->bitfields.MEM_PWRUP_COMPL_B);
  sprintf(buff,"%s MC_IDLE:%x", buff, reg->bitfields.MC_IDLE);
  sprintf(buff,"%s IMP_N_VALUE_R_BACK:%x", buff, reg->bitfields.IMP_N_VALUE_R_BACK);
  sprintf(buff,"%s IMP_P_VALUE_R_BACK:%x", buff, reg->bitfields.IMP_P_VALUE_R_BACK);
  sprintf(buff,"%s TEST_OUT_R_BACK:%x", buff, reg->bitfields.TEST_OUT_R_BACK);
  sprintf(buff,"%s DUMMY_OUT_R_BACK:%x", buff, reg->bitfields.DUMMY_OUT_R_BACK);
  sprintf(buff,"%s IMP_N_VALUE_A_R_BACK:%x", buff, reg->bitfields.IMP_N_VALUE_A_R_BACK);
  sprintf(buff,"%s IMP_P_VALUE_A_R_BACK:%x", buff, reg->bitfields.IMP_P_VALUE_A_R_BACK);
  sprintf(buff,"%s IMP_N_VALUE_CK_R_BACK:%x", buff, reg->bitfields.IMP_N_VALUE_CK_R_BACK);
  sprintf(buff,"%s IMP_P_VALUE_CK_R_BACK:%x", buff, reg->bitfields.IMP_P_VALUE_CK_R_BACK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_CHP_IO_OE_CNTL regMC_CHP_IO_OE_CNTL;

__inline void dump_MC_CHP_IO_OE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_CHP_IO_OE_CNTL *reg = (regMC_CHP_IO_OE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DQ_OE_POSITION_A:%x", buff, reg->bitfields.DQ_OE_POSITION_A);
  sprintf(buff,"%s QS_OE_POSITION_A:%x", buff, reg->bitfields.QS_OE_POSITION_A);
  sprintf(buff,"%s DQ_OE_EXTEND_A:%x", buff, reg->bitfields.DQ_OE_EXTEND_A);
  sprintf(buff,"%s QS_OE_EXTEND_A:%x", buff, reg->bitfields.QS_OE_EXTEND_A);
  sprintf(buff,"%s DQ_OE_ADVANCE_A:%x", buff, reg->bitfields.DQ_OE_ADVANCE_A);
  sprintf(buff,"%s QS_OE_ADVANCE_A:%x", buff, reg->bitfields.QS_OE_ADVANCE_A);
  sprintf(buff,"%s DQS_DRIVER_SLCT_A0:%x", buff, reg->bitfields.DQS_DRIVER_SLCT_A0);
  sprintf(buff,"%s DQS_DRIVER_SLCT_A1:%x", buff, reg->bitfields.DQS_DRIVER_SLCT_A1);
  sprintf(buff,"%s DQS_DRIVER_SLCT_A2:%x", buff, reg->bitfields.DQS_DRIVER_SLCT_A2);
  sprintf(buff,"%s DQS_DRIVER_SLCT_A3:%x", buff, reg->bitfields.DQS_DRIVER_SLCT_A3);
  sprintf(buff,"%s MEM_SDR_STROBE_A:%x", buff, reg->bitfields.MEM_SDR_STROBE_A);
  sprintf(buff,"%s DQ_OE_POSITION_B:%x", buff, reg->bitfields.DQ_OE_POSITION_B);
  sprintf(buff,"%s QS_OE_POSITION_B:%x", buff, reg->bitfields.QS_OE_POSITION_B);
  sprintf(buff,"%s DQ_OE_EXTEND_B:%x", buff, reg->bitfields.DQ_OE_EXTEND_B);
  sprintf(buff,"%s QS_OE_EXTEND_B:%x", buff, reg->bitfields.QS_OE_EXTEND_B);
  sprintf(buff,"%s DQ_OE_ADVANCE_B:%x", buff, reg->bitfields.DQ_OE_ADVANCE_B);
  sprintf(buff,"%s QS_OE_ADVANCE_B:%x", buff, reg->bitfields.QS_OE_ADVANCE_B);
  sprintf(buff,"%s DQS_DRIVER_SLCT_B0:%x", buff, reg->bitfields.DQS_DRIVER_SLCT_B0);
  sprintf(buff,"%s DQS_DRIVER_SLCT_B1:%x", buff, reg->bitfields.DQS_DRIVER_SLCT_B1);
  sprintf(buff,"%s DQS_DRIVER_SLCT_B2:%x", buff, reg->bitfields.DQS_DRIVER_SLCT_B2);
  sprintf(buff,"%s DQS_DRIVER_SLCT_B3:%x", buff, reg->bitfields.DQS_DRIVER_SLCT_B3);
  sprintf(buff,"%s MEM_SDR_STROBE_B:%x", buff, reg->bitfields.MEM_SDR_STROBE_B);
  sprintf(buff,"%s MEM_PM_SDRAM_TRI_EN:%x", buff, reg->bitfields.MEM_PM_SDRAM_TRI_EN);
  sprintf(buff,"%s MEM_IO_TRISTATE:%x", buff, reg->bitfields.MEM_IO_TRISTATE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AGP_BASE_2 regAGP_BASE_2;

__inline void dump_AGP_BASE_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regAGP_BASE_2 *reg = (regAGP_BASE_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250MC_IND_INDEX regrv250MC_IND_INDEX;

__inline void dump_rv250MC_IND_INDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250MC_IND_INDEX *reg = (regrv250MC_IND_INDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MC_IND_ADDR:%x", buff, reg->bitfields.MC_IND_ADDR);
  sprintf(buff,"%s MC_IND_WR_EN:%x", buff, reg->bitfields.MC_IND_WR_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_IND_DATA regMC_IND_DATA;

__inline void dump_MC_IND_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_IND_DATA *reg = (regMC_IND_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_PERF_CNTL regMC_PERF_CNTL;

__inline void dump_MC_PERF_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_PERF_CNTL *reg = (regMC_PERF_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MONITOR_PERIOD:%x", buff, reg->bitfields.MONITOR_PERIOD);
  sprintf(buff,"%s CLR_PERF:%x", buff, reg->bitfields.CLR_PERF);
  sprintf(buff,"%s EN_PERF:%x", buff, reg->bitfields.EN_PERF);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_PERF_SEL regMC_PERF_SEL;

__inline void dump_MC_PERF_SEL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_PERF_SEL *reg = (regMC_PERF_SEL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PERFSEL0:%x", buff, reg->bitfields.PERFSEL0);
  sprintf(buff,"%s PERFSEL1:%x", buff, reg->bitfields.PERFSEL1);
  sprintf(buff,"%s PERFSEL2:%x", buff, reg->bitfields.PERFSEL2);
  sprintf(buff,"%s PERFSEL3:%x", buff, reg->bitfields.PERFSEL3);
  sprintf(buff,"%s MEMCH_A_SEL:%x", buff, reg->bitfields.MEMCH_A_SEL);
  sprintf(buff,"%s MEMCH_B_SEL:%x", buff, reg->bitfields.MEMCH_B_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_PERF_REGION_0 regMC_PERF_REGION_0;

__inline void dump_MC_PERF_REGION_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_PERF_REGION_0 *reg = (regMC_PERF_REGION_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SIZE:%x", buff, reg->bitfields.SIZE);
  sprintf(buff,"%s ADDRESS:%x", buff, reg->bitfields.ADDRESS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_PERF_REGION_1 regMC_PERF_REGION_1;

__inline void dump_MC_PERF_REGION_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_PERF_REGION_1 *reg = (regMC_PERF_REGION_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SIZE:%x", buff, reg->bitfields.SIZE);
  sprintf(buff,"%s ADDRESS:%x", buff, reg->bitfields.ADDRESS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_PERF_COUNT_0 regMC_PERF_COUNT_0;

__inline void dump_MC_PERF_COUNT_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_PERF_COUNT_0 *reg = (regMC_PERF_COUNT_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_PERF_COUNT_1 regMC_PERF_COUNT_1;

__inline void dump_MC_PERF_COUNT_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_PERF_COUNT_1 *reg = (regMC_PERF_COUNT_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_PERF_COUNT_2 regMC_PERF_COUNT_2;

__inline void dump_MC_PERF_COUNT_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_PERF_COUNT_2 *reg = (regMC_PERF_COUNT_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_PERF_COUNT_3 regMC_PERF_COUNT_3;

__inline void dump_MC_PERF_COUNT_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_PERF_COUNT_3 *reg = (regMC_PERF_COUNT_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_PERF_COUNT_MEMCH_A regMC_PERF_COUNT_MEMCH_A;

__inline void dump_MC_PERF_COUNT_MEMCH_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_PERF_COUNT_MEMCH_A *reg = (regMC_PERF_COUNT_MEMCH_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_PERF_COUNT_MEMCH_B regMC_PERF_COUNT_MEMCH_B;

__inline void dump_MC_PERF_COUNT_MEMCH_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_PERF_COUNT_MEMCH_B *reg = (regMC_PERF_COUNT_MEMCH_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_IMP_CNTL regMC_IMP_CNTL;

__inline void dump_MC_IMP_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_IMP_CNTL *reg = (regMC_IMP_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_IO_UPDATE_RATE:%x", buff, reg->bitfields.MEM_IO_UPDATE_RATE);
  sprintf(buff,"%s MEM_IO_SAMPLE_DELAY:%x", buff, reg->bitfields.MEM_IO_SAMPLE_DELAY);
  sprintf(buff,"%s MEM_IO_INC_THRESHOLD:%x", buff, reg->bitfields.MEM_IO_INC_THRESHOLD);
  sprintf(buff,"%s MEM_IO_DEC_THRESHOLD:%x", buff, reg->bitfields.MEM_IO_DEC_THRESHOLD);
  sprintf(buff,"%s MEM_IO_MANUAL_OVERRIDE_CK:%x", buff, reg->bitfields.MEM_IO_MANUAL_OVERRIDE_CK);
  sprintf(buff,"%s MEM_IO_MANUAL_OVERRIDE_A:%x", buff, reg->bitfields.MEM_IO_MANUAL_OVERRIDE_A);
  sprintf(buff,"%s MEM_IO_MANUAL_OVERRIDE_DQM:%x", buff, reg->bitfields.MEM_IO_MANUAL_OVERRIDE_DQM);
  sprintf(buff,"%s MEM_IO_MANUAL_OVERRIDE_DQS:%x", buff, reg->bitfields.MEM_IO_MANUAL_OVERRIDE_DQS);
  sprintf(buff,"%s MEM_IO_SLEWN:%x", buff, reg->bitfields.MEM_IO_SLEWN);
  sprintf(buff,"%s MEM_IO_SLEWP:%x", buff, reg->bitfields.MEM_IO_SLEWP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_CHP_IO_CNTL_A0 regMC_CHP_IO_CNTL_A0;

__inline void dump_MC_CHP_IO_CNTL_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_CHP_IO_CNTL_A0 *reg = (regMC_CHP_IO_CNTL_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_N_CKA:%x", buff, reg->bitfields.MEM_N_CKA);
  sprintf(buff,"%s MEM_N_AA:%x", buff, reg->bitfields.MEM_N_AA);
  sprintf(buff,"%s MEM_N_DQMA:%x", buff, reg->bitfields.MEM_N_DQMA);
  sprintf(buff,"%s MEM_N_DQSA:%x", buff, reg->bitfields.MEM_N_DQSA);
  sprintf(buff,"%s MEM_P_CKA:%x", buff, reg->bitfields.MEM_P_CKA);
  sprintf(buff,"%s MEM_P_AA:%x", buff, reg->bitfields.MEM_P_AA);
  sprintf(buff,"%s MEM_P_DQMA:%x", buff, reg->bitfields.MEM_P_DQMA);
  sprintf(buff,"%s MEM_P_DQSA:%x", buff, reg->bitfields.MEM_P_DQSA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_CHP_IO_CNTL_A1 regMC_CHP_IO_CNTL_A1;

__inline void dump_MC_CHP_IO_CNTL_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_CHP_IO_CNTL_A1 *reg = (regMC_CHP_IO_CNTL_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_SLEWN_CKA:%x", buff, reg->bitfields.MEM_SLEWN_CKA);
  sprintf(buff,"%s MEM_SLEWN_AA:%x", buff, reg->bitfields.MEM_SLEWN_AA);
  sprintf(buff,"%s MEM_SLEWN_DQMA:%x", buff, reg->bitfields.MEM_SLEWN_DQMA);
  sprintf(buff,"%s MEM_SLEWN_DQSA:%x", buff, reg->bitfields.MEM_SLEWN_DQSA);
  sprintf(buff,"%s MEM_SLEWP_CKA:%x", buff, reg->bitfields.MEM_SLEWP_CKA);
  sprintf(buff,"%s MEM_SLEWP_AA:%x", buff, reg->bitfields.MEM_SLEWP_AA);
  sprintf(buff,"%s MEM_SLEWP_DQMA:%x", buff, reg->bitfields.MEM_SLEWP_DQMA);
  sprintf(buff,"%s MEM_SLEWP_DQSA:%x", buff, reg->bitfields.MEM_SLEWP_DQSA);
  sprintf(buff,"%s MEM_PREAMP_AA:%x", buff, reg->bitfields.MEM_PREAMP_AA);
  sprintf(buff,"%s MEM_PREAMP_DQMA:%x", buff, reg->bitfields.MEM_PREAMP_DQMA);
  sprintf(buff,"%s MEM_PREAMP_DQSA:%x", buff, reg->bitfields.MEM_PREAMP_DQSA);
  sprintf(buff,"%s MEM_IO_MODEA:%x", buff, reg->bitfields.MEM_IO_MODEA);
  sprintf(buff,"%s MEM_REC_CKA:%x", buff, reg->bitfields.MEM_REC_CKA);
  sprintf(buff,"%s MEM_REC_AA:%x", buff, reg->bitfields.MEM_REC_AA);
  sprintf(buff,"%s MEM_REC_DQMA:%x", buff, reg->bitfields.MEM_REC_DQMA);
  sprintf(buff,"%s MEM_REC_DQSA:%x", buff, reg->bitfields.MEM_REC_DQSA);
  sprintf(buff,"%s MEM_SYNC_PHASEA:%x", buff, reg->bitfields.MEM_SYNC_PHASEA);
  sprintf(buff,"%s MEM_SYNC_CENTERA:%x", buff, reg->bitfields.MEM_SYNC_CENTERA);
  sprintf(buff,"%s MEM_SYNC_ENA:%x", buff, reg->bitfields.MEM_SYNC_ENA);
  sprintf(buff,"%s MEM_CLK_SELA:%x", buff, reg->bitfields.MEM_CLK_SELA);
  sprintf(buff,"%s MEM_CLK_INVA:%x", buff, reg->bitfields.MEM_CLK_INVA);
  sprintf(buff,"%s MEM_DATA_ENIMP_A:%x", buff, reg->bitfields.MEM_DATA_ENIMP_A);
  sprintf(buff,"%s MEM_CNTL_ENIMP_A:%x", buff, reg->bitfields.MEM_CNTL_ENIMP_A);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_CHP_IO_CNTL_B0 regMC_CHP_IO_CNTL_B0;

__inline void dump_MC_CHP_IO_CNTL_B0(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_CHP_IO_CNTL_B0 *reg = (regMC_CHP_IO_CNTL_B0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_N_CKB:%x", buff, reg->bitfields.MEM_N_CKB);
  sprintf(buff,"%s MEM_N_AB:%x", buff, reg->bitfields.MEM_N_AB);
  sprintf(buff,"%s MEM_N_DQMB:%x", buff, reg->bitfields.MEM_N_DQMB);
  sprintf(buff,"%s MEM_N_DQSB:%x", buff, reg->bitfields.MEM_N_DQSB);
  sprintf(buff,"%s MEM_P_CKB:%x", buff, reg->bitfields.MEM_P_CKB);
  sprintf(buff,"%s MEM_P_AB:%x", buff, reg->bitfields.MEM_P_AB);
  sprintf(buff,"%s MEM_P_DQMB:%x", buff, reg->bitfields.MEM_P_DQMB);
  sprintf(buff,"%s MEM_P_DQSB:%x", buff, reg->bitfields.MEM_P_DQSB);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_CHP_IO_CNTL_B1 regMC_CHP_IO_CNTL_B1;

__inline void dump_MC_CHP_IO_CNTL_B1(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_CHP_IO_CNTL_B1 *reg = (regMC_CHP_IO_CNTL_B1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_SLEWN_CKB:%x", buff, reg->bitfields.MEM_SLEWN_CKB);
  sprintf(buff,"%s MEM_SLEWN_AB:%x", buff, reg->bitfields.MEM_SLEWN_AB);
  sprintf(buff,"%s MEM_SLEWN_DQMB:%x", buff, reg->bitfields.MEM_SLEWN_DQMB);
  sprintf(buff,"%s MEM_SLEWN_DQSB:%x", buff, reg->bitfields.MEM_SLEWN_DQSB);
  sprintf(buff,"%s MEM_SLEWP_CKB:%x", buff, reg->bitfields.MEM_SLEWP_CKB);
  sprintf(buff,"%s MEM_SLEWP_AB:%x", buff, reg->bitfields.MEM_SLEWP_AB);
  sprintf(buff,"%s MEM_SLEWP_DQMB:%x", buff, reg->bitfields.MEM_SLEWP_DQMB);
  sprintf(buff,"%s MEM_SLEWP_DQSB:%x", buff, reg->bitfields.MEM_SLEWP_DQSB);
  sprintf(buff,"%s MEM_PREAMP_AB:%x", buff, reg->bitfields.MEM_PREAMP_AB);
  sprintf(buff,"%s MEM_PREAMP_DQMB:%x", buff, reg->bitfields.MEM_PREAMP_DQMB);
  sprintf(buff,"%s MEM_PREAMP_DQSB:%x", buff, reg->bitfields.MEM_PREAMP_DQSB);
  sprintf(buff,"%s MEM_IO_MODEB:%x", buff, reg->bitfields.MEM_IO_MODEB);
  sprintf(buff,"%s MEM_REC_CKB:%x", buff, reg->bitfields.MEM_REC_CKB);
  sprintf(buff,"%s MEM_REC_AB:%x", buff, reg->bitfields.MEM_REC_AB);
  sprintf(buff,"%s MEM_REC_DQMB:%x", buff, reg->bitfields.MEM_REC_DQMB);
  sprintf(buff,"%s MEM_REC_DQSB:%x", buff, reg->bitfields.MEM_REC_DQSB);
  sprintf(buff,"%s MEM_SYNC_PHASEB:%x", buff, reg->bitfields.MEM_SYNC_PHASEB);
  sprintf(buff,"%s MEM_SYNC_CENTERB:%x", buff, reg->bitfields.MEM_SYNC_CENTERB);
  sprintf(buff,"%s MEM_SYNC_ENB:%x", buff, reg->bitfields.MEM_SYNC_ENB);
  sprintf(buff,"%s MEM_CLK_SELB:%x", buff, reg->bitfields.MEM_CLK_SELB);
  sprintf(buff,"%s MEM_CLK_INVB:%x", buff, reg->bitfields.MEM_CLK_INVB);
  sprintf(buff,"%s MEM_DATA_ENIMP_B:%x", buff, reg->bitfields.MEM_DATA_ENIMP_B);
  sprintf(buff,"%s MEM_CNTL_ENIMP_B:%x", buff, reg->bitfields.MEM_CNTL_ENIMP_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_IMP_CNTL_0 regMC_IMP_CNTL_0;

__inline void dump_MC_IMP_CNTL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_IMP_CNTL_0 *reg = (regMC_IMP_CNTL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_STEP_N_A:%x", buff, reg->bitfields.MEM_STEP_N_A);
  sprintf(buff,"%s MEM_STEP_N_CK:%x", buff, reg->bitfields.MEM_STEP_N_CK);
  sprintf(buff,"%s MEM_STEP_N_DQS:%x", buff, reg->bitfields.MEM_STEP_N_DQS);
  sprintf(buff,"%s MEM_STEP_P_A:%x", buff, reg->bitfields.MEM_STEP_P_A);
  sprintf(buff,"%s MEM_STEP_P_CK:%x", buff, reg->bitfields.MEM_STEP_P_CK);
  sprintf(buff,"%s MEM_STEP_P_DQS:%x", buff, reg->bitfields.MEM_STEP_P_DQS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TC_MISMATCH_1 regTC_MISMATCH_1;

__inline void dump_TC_MISMATCH_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regTC_MISMATCH_1 *reg = (regTC_MISMATCH_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TC_MISMATCH_2 regTC_MISMATCH_2;

__inline void dump_TC_MISMATCH_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regTC_MISMATCH_2 *reg = (regTC_MISMATCH_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_BIST_CTRL regMC_BIST_CTRL;

__inline void dump_MC_BIST_CTRL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_BIST_CTRL *reg = (regMC_BIST_CTRL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union REG_COLLAR_WRITE regREG_COLLAR_WRITE;

__inline void dump_REG_COLLAR_WRITE(__in  unsigned int *dwreg, __in  char *buff)
{
  regREG_COLLAR_WRITE *reg = (regREG_COLLAR_WRITE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union REG_COLLAR_READ regREG_COLLAR_READ;

__inline void dump_REG_COLLAR_READ(__in  unsigned int *dwreg, __in  char *buff)
{
  regREG_COLLAR_READ *reg = (regREG_COLLAR_READ *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_FB_LOCATION regMC_FB_LOCATION;

__inline void dump_MC_FB_LOCATION(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_FB_LOCATION *reg = (regMC_FB_LOCATION *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MC_FB_START:%x", buff, reg->bitfields.MC_FB_START);
  sprintf(buff,"%s MC_FB_TOP:%x", buff, reg->bitfields.MC_FB_TOP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRA00 regGRA00;

__inline void dump_GRA00(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRA00 *reg = (regGRA00 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GRPH_SET_RESET0:%x", buff, reg->bitfields.GRPH_SET_RESET0);
  sprintf(buff,"%s GRPH_SET_RESET1:%x", buff, reg->bitfields.GRPH_SET_RESET1);
  sprintf(buff,"%s GRPH_SET_RESET2:%x", buff, reg->bitfields.GRPH_SET_RESET2);
  sprintf(buff,"%s GRPH_SET_RESET3:%x", buff, reg->bitfields.GRPH_SET_RESET3);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRA01 regGRA01;

__inline void dump_GRA01(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRA01 *reg = (regGRA01 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GRPH_SET_RESET_ENA0:%x", buff, reg->bitfields.GRPH_SET_RESET_ENA0);
  sprintf(buff,"%s GRPH_SET_RESET_ENA1:%x", buff, reg->bitfields.GRPH_SET_RESET_ENA1);
  sprintf(buff,"%s GRPH_SET_RESET_ENA2:%x", buff, reg->bitfields.GRPH_SET_RESET_ENA2);
  sprintf(buff,"%s GRPH_SET_RESET_ENA3:%x", buff, reg->bitfields.GRPH_SET_RESET_ENA3);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRA02 regGRA02;

__inline void dump_GRA02(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRA02 *reg = (regGRA02 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRA03 regGRA03;

__inline void dump_GRA03(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRA03 *reg = (regGRA03 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GRPH_ROTATE:%x", buff, reg->bitfields.GRPH_ROTATE);
  sprintf(buff,"%s GRPH_FN_SEL:%x", buff, reg->bitfields.GRPH_FN_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRA04 regGRA04;

__inline void dump_GRA04(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRA04 *reg = (regGRA04 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRA06 regGRA06;

__inline void dump_GRA06(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRA06 *reg = (regGRA06 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GRPH_GRAPHICS:%x", buff, reg->bitfields.GRPH_GRAPHICS);
  sprintf(buff,"%s GRPH_ODDEVEN:%x", buff, reg->bitfields.GRPH_ODDEVEN);
  sprintf(buff,"%s GRPH_ADRSEL:%x", buff, reg->bitfields.GRPH_ADRSEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRA07 regGRA07;

__inline void dump_GRA07(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRA07 *reg = (regGRA07 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GRPH_XCARE0:%x", buff, reg->bitfields.GRPH_XCARE0);
  sprintf(buff,"%s GRPH_XCARE1:%x", buff, reg->bitfields.GRPH_XCARE1);
  sprintf(buff,"%s GRPH_XCARE2:%x", buff, reg->bitfields.GRPH_XCARE2);
  sprintf(buff,"%s GRPH_XCARE3:%x", buff, reg->bitfields.GRPH_XCARE3);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRA08 regGRA08;

__inline void dump_GRA08(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRA08 *reg = (regGRA08 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SEQ02 regSEQ02;

__inline void dump_SEQ02(__in  unsigned int *dwreg, __in  char *buff)
{
  regSEQ02 *reg = (regSEQ02 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SEQ_MAP0_EN:%x", buff, reg->bitfields.SEQ_MAP0_EN);
  sprintf(buff,"%s SEQ_MAP1_EN:%x", buff, reg->bitfields.SEQ_MAP1_EN);
  sprintf(buff,"%s SEQ_MAP2_EN:%x", buff, reg->bitfields.SEQ_MAP2_EN);
  sprintf(buff,"%s SEQ_MAP3_EN:%x", buff, reg->bitfields.SEQ_MAP3_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SEQ04 regSEQ04;

__inline void dump_SEQ04(__in  unsigned int *dwreg, __in  char *buff)
{
  regSEQ04 *reg = (regSEQ04 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SEQ_256K:%x", buff, reg->bitfields.SEQ_256K);
  sprintf(buff,"%s SEQ_ODDEVEN:%x", buff, reg->bitfields.SEQ_ODDEVEN);
  sprintf(buff,"%s SEQ_CHAIN:%x", buff, reg->bitfields.SEQ_CHAIN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT1E regCRT1E;

__inline void dump_CRT1E(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT1E *reg = (regCRT1E *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT1F regCRT1F;

__inline void dump_CRT1F(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT1F *reg = (regCRT1F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT22 regCRT22;

__inline void dump_CRT22(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT22 *reg = (regCRT22 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT1E_S regCRT1E_S;

__inline void dump_CRT1E_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT1E_S *reg = (regCRT1E_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT1F_S regCRT1F_S;

__inline void dump_CRT1F_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT1F_S *reg = (regCRT1F_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT22_S regCRT22_S;

__inline void dump_CRT22_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT22_S *reg = (regCRT22_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HOST_PATH_CNTL regHOST_PATH_CNTL;

__inline void dump_HOST_PATH_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regHOST_PATH_CNTL *reg = (regHOST_PATH_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HDP_WRITE_THROUGH_CACHE_DIS:%x", buff, reg->bitfields.HDP_WRITE_THROUGH_CACHE_DIS);
  sprintf(buff,"%s HDP_APER_CNTL:%x", buff, reg->bitfields.HDP_APER_CNTL);
  sprintf(buff,"%s HP_LIN_RD_CACHE_DIS:%x", buff, reg->bitfields.HP_LIN_RD_CACHE_DIS);
  sprintf(buff,"%s HP_RBBM_LOCK_DIS:%x", buff, reg->bitfields.HP_RBBM_LOCK_DIS);
  sprintf(buff,"%s HDP_SOFT_RESET:%x", buff, reg->bitfields.HDP_SOFT_RESET);
  sprintf(buff,"%s HDP_READ_BUFFER_INVALIDATE:%x", buff, reg->bitfields.HDP_READ_BUFFER_INVALIDATE);
  sprintf(buff,"%s HDP_WRITE_COMBINER_TIMEOUT:%x", buff, reg->bitfields.HDP_WRITE_COMBINER_TIMEOUT);
  sprintf(buff,"%s HP_TEST_RST_CNTL:%x", buff, reg->bitfields.HP_TEST_RST_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MEM_VGA_WP_SEL regMEM_VGA_WP_SEL;

__inline void dump_MEM_VGA_WP_SEL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMEM_VGA_WP_SEL *reg = (regMEM_VGA_WP_SEL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_VGA_WPS0:%x", buff, reg->bitfields.MEM_VGA_WPS0);
  sprintf(buff,"%s MEM_VGA_WPS1:%x", buff, reg->bitfields.MEM_VGA_WPS1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MEM_VGA_RP_SEL regMEM_VGA_RP_SEL;

__inline void dump_MEM_VGA_RP_SEL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMEM_VGA_RP_SEL *reg = (regMEM_VGA_RP_SEL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_VGA_RPS0:%x", buff, reg->bitfields.MEM_VGA_RPS0);
  sprintf(buff,"%s MEM_VGA_RPS1:%x", buff, reg->bitfields.MEM_VGA_RPS1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HDP_DEBUG regHDP_DEBUG;

__inline void dump_HDP_DEBUG(__in  unsigned int *dwreg, __in  char *buff)
{
  regHDP_DEBUG *reg = (regHDP_DEBUG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HDP_0_DEBUG:%x", buff, reg->bitfields.HDP_0_DEBUG);
  sprintf(buff,"%s HDP_1_DEBUG:%x", buff, reg->bitfields.HDP_1_DEBUG);
  sprintf(buff,"%s HDP_2_DEBUG:%x", buff, reg->bitfields.HDP_2_DEBUG);
  sprintf(buff,"%s HDP_3_DEBUG:%x", buff, reg->bitfields.HDP_3_DEBUG);
  sprintf(buff,"%s HDP_4_DEBUG:%x", buff, reg->bitfields.HDP_4_DEBUG);
  sprintf(buff,"%s HDP_5_DEBUG:%x", buff, reg->bitfields.HDP_5_DEBUG);
  sprintf(buff,"%s HDP_6_DEBUG:%x", buff, reg->bitfields.HDP_6_DEBUG);
  sprintf(buff,"%s HDP_7_DEBUG:%x", buff, reg->bitfields.HDP_7_DEBUG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SW_SEMAPHORE regSW_SEMAPHORE;

__inline void dump_SW_SEMAPHORE(__in  unsigned int *dwreg, __in  char *buff)
{
  regSW_SEMAPHORE *reg = (regSW_SEMAPHORE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE_CNTL regSURFACE_CNTL;

__inline void dump_SURFACE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE_CNTL *reg = (regSURFACE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SURF_TRANSLATION_DIS:%x", buff, reg->bitfields.SURF_TRANSLATION_DIS);
  sprintf(buff,"%s NONSURF_AP0_SWP:%x", buff, reg->bitfields.NONSURF_AP0_SWP);
  sprintf(buff,"%s NONSURF_AP1_SWP:%x", buff, reg->bitfields.NONSURF_AP1_SWP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE0_LOWER_BOUND regSURFACE0_LOWER_BOUND;

__inline void dump_SURFACE0_LOWER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE0_LOWER_BOUND *reg = (regSURFACE0_LOWER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE1_LOWER_BOUND regSURFACE1_LOWER_BOUND;

__inline void dump_SURFACE1_LOWER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE1_LOWER_BOUND *reg = (regSURFACE1_LOWER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE2_LOWER_BOUND regSURFACE2_LOWER_BOUND;

__inline void dump_SURFACE2_LOWER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE2_LOWER_BOUND *reg = (regSURFACE2_LOWER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE3_LOWER_BOUND regSURFACE3_LOWER_BOUND;

__inline void dump_SURFACE3_LOWER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE3_LOWER_BOUND *reg = (regSURFACE3_LOWER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE4_LOWER_BOUND regSURFACE4_LOWER_BOUND;

__inline void dump_SURFACE4_LOWER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE4_LOWER_BOUND *reg = (regSURFACE4_LOWER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE5_LOWER_BOUND regSURFACE5_LOWER_BOUND;

__inline void dump_SURFACE5_LOWER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE5_LOWER_BOUND *reg = (regSURFACE5_LOWER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE6_LOWER_BOUND regSURFACE6_LOWER_BOUND;

__inline void dump_SURFACE6_LOWER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE6_LOWER_BOUND *reg = (regSURFACE6_LOWER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE7_LOWER_BOUND regSURFACE7_LOWER_BOUND;

__inline void dump_SURFACE7_LOWER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE7_LOWER_BOUND *reg = (regSURFACE7_LOWER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE0_UPPER_BOUND regSURFACE0_UPPER_BOUND;

__inline void dump_SURFACE0_UPPER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE0_UPPER_BOUND *reg = (regSURFACE0_UPPER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE1_UPPER_BOUND regSURFACE1_UPPER_BOUND;

__inline void dump_SURFACE1_UPPER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE1_UPPER_BOUND *reg = (regSURFACE1_UPPER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE2_UPPER_BOUND regSURFACE2_UPPER_BOUND;

__inline void dump_SURFACE2_UPPER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE2_UPPER_BOUND *reg = (regSURFACE2_UPPER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE3_UPPER_BOUND regSURFACE3_UPPER_BOUND;

__inline void dump_SURFACE3_UPPER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE3_UPPER_BOUND *reg = (regSURFACE3_UPPER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE4_UPPER_BOUND regSURFACE4_UPPER_BOUND;

__inline void dump_SURFACE4_UPPER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE4_UPPER_BOUND *reg = (regSURFACE4_UPPER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE5_UPPER_BOUND regSURFACE5_UPPER_BOUND;

__inline void dump_SURFACE5_UPPER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE5_UPPER_BOUND *reg = (regSURFACE5_UPPER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE6_UPPER_BOUND regSURFACE6_UPPER_BOUND;

__inline void dump_SURFACE6_UPPER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE6_UPPER_BOUND *reg = (regSURFACE6_UPPER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE7_UPPER_BOUND regSURFACE7_UPPER_BOUND;

__inline void dump_SURFACE7_UPPER_BOUND(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE7_UPPER_BOUND *reg = (regSURFACE7_UPPER_BOUND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE0_INFO regSURFACE0_INFO;

__inline void dump_SURFACE0_INFO(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE0_INFO *reg = (regSURFACE0_INFO *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SURF0_PITCHSEL:%x", buff, reg->bitfields.SURF0_PITCHSEL);
  sprintf(buff,"%s SURF0_TILE_MODE:%x", buff, reg->bitfields.SURF0_TILE_MODE);
  sprintf(buff,"%s SURF0_AP0_SWP:%x", buff, reg->bitfields.SURF0_AP0_SWP);
  sprintf(buff,"%s SURF0_AP1_SWP:%x", buff, reg->bitfields.SURF0_AP1_SWP);
  sprintf(buff,"%s SURF0_WRITE_FLAG:%x", buff, reg->bitfields.SURF0_WRITE_FLAG);
  sprintf(buff,"%s SURF0_READ_FLAG:%x", buff, reg->bitfields.SURF0_READ_FLAG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE1_INFO regSURFACE1_INFO;

__inline void dump_SURFACE1_INFO(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE1_INFO *reg = (regSURFACE1_INFO *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SURF1_PITCHSEL:%x", buff, reg->bitfields.SURF1_PITCHSEL);
  sprintf(buff,"%s SURF1_TILE_MODE:%x", buff, reg->bitfields.SURF1_TILE_MODE);
  sprintf(buff,"%s SURF1_AP0_SWP:%x", buff, reg->bitfields.SURF1_AP0_SWP);
  sprintf(buff,"%s SURF1_AP1_SWP:%x", buff, reg->bitfields.SURF1_AP1_SWP);
  sprintf(buff,"%s SURF1_WRITE_FLAG:%x", buff, reg->bitfields.SURF1_WRITE_FLAG);
  sprintf(buff,"%s SURF1_READ_FLAG:%x", buff, reg->bitfields.SURF1_READ_FLAG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE2_INFO regSURFACE2_INFO;

__inline void dump_SURFACE2_INFO(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE2_INFO *reg = (regSURFACE2_INFO *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SURF2_PITCHSEL:%x", buff, reg->bitfields.SURF2_PITCHSEL);
  sprintf(buff,"%s SURF2_TILE_MODE:%x", buff, reg->bitfields.SURF2_TILE_MODE);
  sprintf(buff,"%s SURF2_AP0_SWP:%x", buff, reg->bitfields.SURF2_AP0_SWP);
  sprintf(buff,"%s SURF2_AP1_SWP:%x", buff, reg->bitfields.SURF2_AP1_SWP);
  sprintf(buff,"%s SURF2_WRITE_FLAG:%x", buff, reg->bitfields.SURF2_WRITE_FLAG);
  sprintf(buff,"%s SURF2_READ_FLAG:%x", buff, reg->bitfields.SURF2_READ_FLAG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE3_INFO regSURFACE3_INFO;

__inline void dump_SURFACE3_INFO(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE3_INFO *reg = (regSURFACE3_INFO *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SURF3_PITCHSEL:%x", buff, reg->bitfields.SURF3_PITCHSEL);
  sprintf(buff,"%s SURF3_TILE_MODE:%x", buff, reg->bitfields.SURF3_TILE_MODE);
  sprintf(buff,"%s SURF3_AP0_SWP:%x", buff, reg->bitfields.SURF3_AP0_SWP);
  sprintf(buff,"%s SURF3_AP1_SWP:%x", buff, reg->bitfields.SURF3_AP1_SWP);
  sprintf(buff,"%s SURF3_WRITE_FLAG:%x", buff, reg->bitfields.SURF3_WRITE_FLAG);
  sprintf(buff,"%s SURF3_READ_FLAG:%x", buff, reg->bitfields.SURF3_READ_FLAG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE4_INFO regSURFACE4_INFO;

__inline void dump_SURFACE4_INFO(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE4_INFO *reg = (regSURFACE4_INFO *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SURF4_PITCHSEL:%x", buff, reg->bitfields.SURF4_PITCHSEL);
  sprintf(buff,"%s SURF4_TILE_MODE:%x", buff, reg->bitfields.SURF4_TILE_MODE);
  sprintf(buff,"%s SURF4_AP0_SWP:%x", buff, reg->bitfields.SURF4_AP0_SWP);
  sprintf(buff,"%s SURF4_AP1_SWP:%x", buff, reg->bitfields.SURF4_AP1_SWP);
  sprintf(buff,"%s SURF4_WRITE_FLAG:%x", buff, reg->bitfields.SURF4_WRITE_FLAG);
  sprintf(buff,"%s SURF4_READ_FLAG:%x", buff, reg->bitfields.SURF4_READ_FLAG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE5_INFO regSURFACE5_INFO;

__inline void dump_SURFACE5_INFO(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE5_INFO *reg = (regSURFACE5_INFO *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SURF5_PITCHSEL:%x", buff, reg->bitfields.SURF5_PITCHSEL);
  sprintf(buff,"%s SURF5_TILE_MODE:%x", buff, reg->bitfields.SURF5_TILE_MODE);
  sprintf(buff,"%s SURF5_AP0_SWP:%x", buff, reg->bitfields.SURF5_AP0_SWP);
  sprintf(buff,"%s SURF5_AP1_SWP:%x", buff, reg->bitfields.SURF5_AP1_SWP);
  sprintf(buff,"%s SURF5_WRITE_FLAG:%x", buff, reg->bitfields.SURF5_WRITE_FLAG);
  sprintf(buff,"%s SURF5_READ_FLAG:%x", buff, reg->bitfields.SURF5_READ_FLAG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE6_INFO regSURFACE6_INFO;

__inline void dump_SURFACE6_INFO(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE6_INFO *reg = (regSURFACE6_INFO *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SURF6_PITCHSEL:%x", buff, reg->bitfields.SURF6_PITCHSEL);
  sprintf(buff,"%s SURF6_TILE_MODE:%x", buff, reg->bitfields.SURF6_TILE_MODE);
  sprintf(buff,"%s SURF6_AP0_SWP:%x", buff, reg->bitfields.SURF6_AP0_SWP);
  sprintf(buff,"%s SURF6_AP1_SWP:%x", buff, reg->bitfields.SURF6_AP1_SWP);
  sprintf(buff,"%s SURF6_WRITE_FLAG:%x", buff, reg->bitfields.SURF6_WRITE_FLAG);
  sprintf(buff,"%s SURF6_READ_FLAG:%x", buff, reg->bitfields.SURF6_READ_FLAG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE7_INFO regSURFACE7_INFO;

__inline void dump_SURFACE7_INFO(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE7_INFO *reg = (regSURFACE7_INFO *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SURF7_PITCHSEL:%x", buff, reg->bitfields.SURF7_PITCHSEL);
  sprintf(buff,"%s SURF7_TILE_MODE:%x", buff, reg->bitfields.SURF7_TILE_MODE);
  sprintf(buff,"%s SURF7_AP0_SWP:%x", buff, reg->bitfields.SURF7_AP0_SWP);
  sprintf(buff,"%s SURF7_AP1_SWP:%x", buff, reg->bitfields.SURF7_AP1_SWP);
  sprintf(buff,"%s SURF7_WRITE_FLAG:%x", buff, reg->bitfields.SURF7_WRITE_FLAG);
  sprintf(buff,"%s SURF7_READ_FLAG:%x", buff, reg->bitfields.SURF7_READ_FLAG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE_ACCESS_FLAGS regSURFACE_ACCESS_FLAGS;

__inline void dump_SURFACE_ACCESS_FLAGS(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE_ACCESS_FLAGS *reg = (regSURFACE_ACCESS_FLAGS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SURF0_WRITE_FLAG:%x", buff, reg->bitfields.SURF0_WRITE_FLAG);
  sprintf(buff,"%s SURF1_WRITE_FLAG:%x", buff, reg->bitfields.SURF1_WRITE_FLAG);
  sprintf(buff,"%s SURF2_WRITE_FLAG:%x", buff, reg->bitfields.SURF2_WRITE_FLAG);
  sprintf(buff,"%s SURF3_WRITE_FLAG:%x", buff, reg->bitfields.SURF3_WRITE_FLAG);
  sprintf(buff,"%s SURF4_WRITE_FLAG:%x", buff, reg->bitfields.SURF4_WRITE_FLAG);
  sprintf(buff,"%s SURF5_WRITE_FLAG:%x", buff, reg->bitfields.SURF5_WRITE_FLAG);
  sprintf(buff,"%s SURF6_WRITE_FLAG:%x", buff, reg->bitfields.SURF6_WRITE_FLAG);
  sprintf(buff,"%s SURF7_WRITE_FLAG:%x", buff, reg->bitfields.SURF7_WRITE_FLAG);
  sprintf(buff,"%s NONSURF_WRITE_FLAG:%x", buff, reg->bitfields.NONSURF_WRITE_FLAG);
  sprintf(buff,"%s LINEAR_WRITE_FLAG:%x", buff, reg->bitfields.LINEAR_WRITE_FLAG);
  sprintf(buff,"%s VGA_WRITE_FLAG:%x", buff, reg->bitfields.VGA_WRITE_FLAG);
  sprintf(buff,"%s SURF0_READ_FLAG:%x", buff, reg->bitfields.SURF0_READ_FLAG);
  sprintf(buff,"%s SURF1_READ_FLAG:%x", buff, reg->bitfields.SURF1_READ_FLAG);
  sprintf(buff,"%s SURF2_READ_FLAG:%x", buff, reg->bitfields.SURF2_READ_FLAG);
  sprintf(buff,"%s SURF3_READ_FLAG:%x", buff, reg->bitfields.SURF3_READ_FLAG);
  sprintf(buff,"%s SURF4_READ_FLAG:%x", buff, reg->bitfields.SURF4_READ_FLAG);
  sprintf(buff,"%s SURF5_READ_FLAG:%x", buff, reg->bitfields.SURF5_READ_FLAG);
  sprintf(buff,"%s SURF6_READ_FLAG:%x", buff, reg->bitfields.SURF6_READ_FLAG);
  sprintf(buff,"%s SURF7_READ_FLAG:%x", buff, reg->bitfields.SURF7_READ_FLAG);
  sprintf(buff,"%s NONSURF_READ_FLAG:%x", buff, reg->bitfields.NONSURF_READ_FLAG);
  sprintf(buff,"%s LINEAR_READ_FLAG:%x", buff, reg->bitfields.LINEAR_READ_FLAG);
  sprintf(buff,"%s VGA_READ_FLAG:%x", buff, reg->bitfields.VGA_READ_FLAG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SURFACE_ACCESS_CLR regSURFACE_ACCESS_CLR;

__inline void dump_SURFACE_ACCESS_CLR(__in  unsigned int *dwreg, __in  char *buff)
{
  regSURFACE_ACCESS_CLR *reg = (regSURFACE_ACCESS_CLR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SURF0_WRITE_FLAG_CLR:%x", buff, reg->bitfields.SURF0_WRITE_FLAG_CLR);
  sprintf(buff,"%s SURF1_WRITE_FLAG_CLR:%x", buff, reg->bitfields.SURF1_WRITE_FLAG_CLR);
  sprintf(buff,"%s SURF2_WRITE_FLAG_CLR:%x", buff, reg->bitfields.SURF2_WRITE_FLAG_CLR);
  sprintf(buff,"%s SURF3_WRITE_FLAG_CLR:%x", buff, reg->bitfields.SURF3_WRITE_FLAG_CLR);
  sprintf(buff,"%s SURF4_WRITE_FLAG_CLR:%x", buff, reg->bitfields.SURF4_WRITE_FLAG_CLR);
  sprintf(buff,"%s SURF5_WRITE_FLAG_CLR:%x", buff, reg->bitfields.SURF5_WRITE_FLAG_CLR);
  sprintf(buff,"%s SURF6_WRITE_FLAG_CLR:%x", buff, reg->bitfields.SURF6_WRITE_FLAG_CLR);
  sprintf(buff,"%s SURF7_WRITE_FLAG_CLR:%x", buff, reg->bitfields.SURF7_WRITE_FLAG_CLR);
  sprintf(buff,"%s NONSURF_WRITE_FLAG_CLR:%x", buff, reg->bitfields.NONSURF_WRITE_FLAG_CLR);
  sprintf(buff,"%s LINEAR_WRITE_FLAG_CLR:%x", buff, reg->bitfields.LINEAR_WRITE_FLAG_CLR);
  sprintf(buff,"%s VGA_WRITE_FLAG_CLR:%x", buff, reg->bitfields.VGA_WRITE_FLAG_CLR);
  sprintf(buff,"%s SURF0_READ_FLAG_CLR:%x", buff, reg->bitfields.SURF0_READ_FLAG_CLR);
  sprintf(buff,"%s SURF1_READ_FLAG_CLR:%x", buff, reg->bitfields.SURF1_READ_FLAG_CLR);
  sprintf(buff,"%s SURF2_READ_FLAG_CLR:%x", buff, reg->bitfields.SURF2_READ_FLAG_CLR);
  sprintf(buff,"%s SURF3_READ_FLAG_CLR:%x", buff, reg->bitfields.SURF3_READ_FLAG_CLR);
  sprintf(buff,"%s SURF4_READ_FLAG_CLR:%x", buff, reg->bitfields.SURF4_READ_FLAG_CLR);
  sprintf(buff,"%s SURF5_READ_FLAG_CLR:%x", buff, reg->bitfields.SURF5_READ_FLAG_CLR);
  sprintf(buff,"%s SURF6_READ_FLAG_CLR:%x", buff, reg->bitfields.SURF6_READ_FLAG_CLR);
  sprintf(buff,"%s SURF7_READ_FLAG_CLR:%x", buff, reg->bitfields.SURF7_READ_FLAG_CLR);
  sprintf(buff,"%s NONSURF_READ_FLAG_CLR:%x", buff, reg->bitfields.NONSURF_READ_FLAG_CLR);
  sprintf(buff,"%s LINEAR_READ_FLAG_CLR:%x", buff, reg->bitfields.LINEAR_READ_FLAG_CLR);
  sprintf(buff,"%s VGA_READ_FLAG_CLR:%x", buff, reg->bitfields.VGA_READ_FLAG_CLR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRPH8_IDX regGRPH8_IDX;

__inline void dump_GRPH8_IDX(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRPH8_IDX *reg = (regGRPH8_IDX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRPH8_DATA regGRPH8_DATA;

__inline void dump_GRPH8_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRPH8_DATA *reg = (regGRPH8_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRA05 regGRA05;

__inline void dump_GRA05(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRA05 *reg = (regGRA05 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GRPH_WRITE_MODE:%x", buff, reg->bitfields.GRPH_WRITE_MODE);
  sprintf(buff,"%s GRPH_READ1:%x", buff, reg->bitfields.GRPH_READ1);
  sprintf(buff,"%s CGA_ODDEVEN:%x", buff, reg->bitfields.CGA_ODDEVEN);
  sprintf(buff,"%s GRPH_OES:%x", buff, reg->bitfields.GRPH_OES);
  sprintf(buff,"%s GRPH_PACK:%x", buff, reg->bitfields.GRPH_PACK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SEQ8_IDX regSEQ8_IDX;

__inline void dump_SEQ8_IDX(__in  unsigned int *dwreg, __in  char *buff)
{
  regSEQ8_IDX *reg = (regSEQ8_IDX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SEQ8_DATA regSEQ8_DATA;

__inline void dump_SEQ8_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regSEQ8_DATA *reg = (regSEQ8_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC8_IDX regCRTC8_IDX;

__inline void dump_CRTC8_IDX(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC8_IDX *reg = (regCRTC8_IDX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC8_DATA regCRTC8_DATA;

__inline void dump_CRTC8_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC8_DATA *reg = (regCRTC8_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT14 regCRT14;

__inline void dump_CRT14(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT14 *reg = (regCRT14 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s UNDRLN_LOC:%x", buff, reg->bitfields.UNDRLN_LOC);
  sprintf(buff,"%s ADDR_CNT_BY4:%x", buff, reg->bitfields.ADDR_CNT_BY4);
  sprintf(buff,"%s DOUBLE_WORD:%x", buff, reg->bitfields.DOUBLE_WORD);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT17 regCRT17;

__inline void dump_CRT17(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT17 *reg = (regCRT17 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s RA0_AS_A13B:%x", buff, reg->bitfields.RA0_AS_A13B);
  sprintf(buff,"%s RA1_AS_A14B:%x", buff, reg->bitfields.RA1_AS_A14B);
  sprintf(buff,"%s VCOUNT_BY2:%x", buff, reg->bitfields.VCOUNT_BY2);
  sprintf(buff,"%s ADDR_CNT_BY2:%x", buff, reg->bitfields.ADDR_CNT_BY2);
  sprintf(buff,"%s WRAP_A15TOA0:%x", buff, reg->bitfields.WRAP_A15TOA0);
  sprintf(buff,"%s BYTE_MODE:%x", buff, reg->bitfields.BYTE_MODE);
  sprintf(buff,"%s CRTC_SYNC_EN:%x", buff, reg->bitfields.CRTC_SYNC_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT14_S regCRT14_S;

__inline void dump_CRT14_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT14_S *reg = (regCRT14_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s UNDRLN_LOC_S:%x", buff, reg->bitfields.UNDRLN_LOC_S);
  sprintf(buff,"%s ADDR_CNT_BY4_M:%x", buff, reg->bitfields.ADDR_CNT_BY4_M);
  sprintf(buff,"%s DOUBLE_WORD_M:%x", buff, reg->bitfields.DOUBLE_WORD_M);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT17_S regCRT17_S;

__inline void dump_CRT17_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT17_S *reg = (regCRT17_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s RA0_AS_A13B_M:%x", buff, reg->bitfields.RA0_AS_A13B_M);
  sprintf(buff,"%s RA1_AS_A14B_M:%x", buff, reg->bitfields.RA1_AS_A14B_M);
  sprintf(buff,"%s VCOUNT_BY2_S:%x", buff, reg->bitfields.VCOUNT_BY2_S);
  sprintf(buff,"%s ADDR_CNT_BY2_M:%x", buff, reg->bitfields.ADDR_CNT_BY2_M);
  sprintf(buff,"%s WRAP_A15TOA0_M:%x", buff, reg->bitfields.WRAP_A15TOA0_M);
  sprintf(buff,"%s BYTE_MODE_M:%x", buff, reg->bitfields.BYTE_MODE_M);
  sprintf(buff,"%s CRTC_SYNC_EN_M:%x", buff, reg->bitfields.CRTC_SYNC_EN_M);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250GEN_INT_CNTL regrv250GEN_INT_CNTL;

__inline void dump_rv250GEN_INT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250GEN_INT_CNTL *reg = (regrv250GEN_INT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_VBLANK_MASK:%x", buff, reg->bitfields.CRTC_VBLANK_MASK);
  sprintf(buff,"%s CRTC_VLINE_MASK:%x", buff, reg->bitfields.CRTC_VLINE_MASK);
  sprintf(buff,"%s CRTC_VSYNC_MASK:%x", buff, reg->bitfields.CRTC_VSYNC_MASK);
  sprintf(buff,"%s SNAPSHOT_MASK:%x", buff, reg->bitfields.SNAPSHOT_MASK);
  sprintf(buff,"%s FP_DETECT_MASK:%x", buff, reg->bitfields.FP_DETECT_MASK);
  sprintf(buff,"%s CRTC2_VLINE_MASK:%x", buff, reg->bitfields.CRTC2_VLINE_MASK);
  sprintf(buff,"%s CRTC2_VSYNC_MASK:%x", buff, reg->bitfields.CRTC2_VSYNC_MASK);
  sprintf(buff,"%s SNAPSHOT2_MASK:%x", buff, reg->bitfields.SNAPSHOT2_MASK);
  sprintf(buff,"%s CRTC2_VBLANK_MASK:%x", buff, reg->bitfields.CRTC2_VBLANK_MASK);
  sprintf(buff,"%s FP2_DETECT_MASK:%x", buff, reg->bitfields.FP2_DETECT_MASK);
  sprintf(buff,"%s VSYNC_DIFF_OVER_LIMIT_MASK:%x", buff, reg->bitfields.VSYNC_DIFF_OVER_LIMIT_MASK);
  sprintf(buff,"%s DMA_VIPH0_INT_EN:%x", buff, reg->bitfields.DMA_VIPH0_INT_EN);
  sprintf(buff,"%s DMA_VIPH1_INT_EN:%x", buff, reg->bitfields.DMA_VIPH1_INT_EN);
  sprintf(buff,"%s DMA_VIPH2_INT_EN:%x", buff, reg->bitfields.DMA_VIPH2_INT_EN);
  sprintf(buff,"%s DMA_VIPH3_INT_EN:%x", buff, reg->bitfields.DMA_VIPH3_INT_EN);
  sprintf(buff,"%s I2C_INT_EN:%x", buff, reg->bitfields.I2C_INT_EN);
  sprintf(buff,"%s GUI_IDLE_MASK:%x", buff, reg->bitfields.GUI_IDLE_MASK);
  sprintf(buff,"%s VIPH_INT_EN:%x", buff, reg->bitfields.VIPH_INT_EN);
  sprintf(buff,"%s SW_INT_EN:%x", buff, reg->bitfields.SW_INT_EN);
  sprintf(buff,"%s GEYSERVILLE_MASK:%x", buff, reg->bitfields.GEYSERVILLE_MASK);
  sprintf(buff,"%s HDCP_AUTHORIZED_INT_MASK:%x", buff, reg->bitfields.HDCP_AUTHORIZED_INT_MASK);
  sprintf(buff,"%s DVI_I2C_INT_MASK:%x", buff, reg->bitfields.DVI_I2C_INT_MASK);
  sprintf(buff,"%s GUIDMA_MASK:%x", buff, reg->bitfields.GUIDMA_MASK);
  sprintf(buff,"%s VIDDMA_MASK:%x", buff, reg->bitfields.VIDDMA_MASK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250GEN_INT_STATUS regrv250GEN_INT_STATUS;

__inline void dump_rv250GEN_INT_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250GEN_INT_STATUS *reg = (regrv250GEN_INT_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_VBLANK_STAT:%x", buff, reg->bitfields.CRTC_VBLANK_STAT);
  sprintf(buff,"%s CRTC_VLINE_STAT:%x", buff, reg->bitfields.CRTC_VLINE_STAT);
  sprintf(buff,"%s CRTC_VSYNC_STAT:%x", buff, reg->bitfields.CRTC_VSYNC_STAT);
  sprintf(buff,"%s SNAPSHOT_STAT:%x", buff, reg->bitfields.SNAPSHOT_STAT);
  sprintf(buff,"%s FP_DETECT_STAT:%x", buff, reg->bitfields.FP_DETECT_STAT);
  sprintf(buff,"%s CRTC2_VLINE_STAT:%x", buff, reg->bitfields.CRTC2_VLINE_STAT);
  sprintf(buff,"%s CRTC2_VSYNC_STAT:%x", buff, reg->bitfields.CRTC2_VSYNC_STAT);
  sprintf(buff,"%s SNAPSHOT2_STAT:%x", buff, reg->bitfields.SNAPSHOT2_STAT);
  sprintf(buff,"%s CAP0_INT_ACTIVE:%x", buff, reg->bitfields.CAP0_INT_ACTIVE);
  sprintf(buff,"%s CRTC2_VBLANK_STAT:%x", buff, reg->bitfields.CRTC2_VBLANK_STAT);
  sprintf(buff,"%s FP2_DETECT_STAT:%x", buff, reg->bitfields.FP2_DETECT_STAT);
  sprintf(buff,"%s VSYNC_DIFF_OVER_LIMIT_STAT:%x", buff, reg->bitfields.VSYNC_DIFF_OVER_LIMIT_STAT);
  sprintf(buff,"%s DMA_VIPH0_INT:%x", buff, reg->bitfields.DMA_VIPH0_INT);
  sprintf(buff,"%s DMA_VIPH1_INT:%x", buff, reg->bitfields.DMA_VIPH1_INT);
  sprintf(buff,"%s DMA_VIPH2_INT:%x", buff, reg->bitfields.DMA_VIPH2_INT);
  sprintf(buff,"%s DMA_VIPH3_INT:%x", buff, reg->bitfields.DMA_VIPH3_INT);
  sprintf(buff,"%s I2C_INT:%x", buff, reg->bitfields.I2C_INT);
  sprintf(buff,"%s GUI_IDLE_STAT:%x", buff, reg->bitfields.GUI_IDLE_STAT);
  sprintf(buff,"%s VIPH_INT:%x", buff, reg->bitfields.VIPH_INT);
  sprintf(buff,"%s SW_INT:%x", buff, reg->bitfields.SW_INT);
  sprintf(buff,"%s SW_INT_SET:%x", buff, reg->bitfields.SW_INT_SET);
  sprintf(buff,"%s GEYSERVILLE_STAT:%x", buff, reg->bitfields.GEYSERVILLE_STAT);
  sprintf(buff,"%s HDCP_AUTHORIZED_INT_STAT:%x", buff, reg->bitfields.HDCP_AUTHORIZED_INT_STAT);
  sprintf(buff,"%s DVI_I2C_INT_STAT:%x", buff, reg->bitfields.DVI_I2C_INT_STAT);
  sprintf(buff,"%s GUIDMA_STAT:%x", buff, reg->bitfields.GUIDMA_STAT);
  sprintf(buff,"%s VIDDMA_STAT:%x", buff, reg->bitfields.VIDDMA_STAT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_EXT_CNTL regCRTC_EXT_CNTL;

__inline void dump_CRTC_EXT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_EXT_CNTL *reg = (regCRTC_EXT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_VGA_XOVERSCAN:%x", buff, reg->bitfields.CRTC_VGA_XOVERSCAN);
  sprintf(buff,"%s VGA_BLINK_RATE:%x", buff, reg->bitfields.VGA_BLINK_RATE);
  sprintf(buff,"%s VGA_ATI_LINEAR:%x", buff, reg->bitfields.VGA_ATI_LINEAR);
  sprintf(buff,"%s VGA_128KAP_PAGING:%x", buff, reg->bitfields.VGA_128KAP_PAGING);
  sprintf(buff,"%s VGA_TEXT_132:%x", buff, reg->bitfields.VGA_TEXT_132);
  sprintf(buff,"%s VGA_XCRT_CNT_EN:%x", buff, reg->bitfields.VGA_XCRT_CNT_EN);
  sprintf(buff,"%s CRTC_HSYNC_DIS:%x", buff, reg->bitfields.CRTC_HSYNC_DIS);
  sprintf(buff,"%s CRTC_VSYNC_DIS:%x", buff, reg->bitfields.CRTC_VSYNC_DIS);
  sprintf(buff,"%s CRTC_DISPLAY_DIS:%x", buff, reg->bitfields.CRTC_DISPLAY_DIS);
  sprintf(buff,"%s CRTC_SYNC_TRISTATE:%x", buff, reg->bitfields.CRTC_SYNC_TRISTATE);
  sprintf(buff,"%s CRTC_HSYNC_TRISTATE:%x", buff, reg->bitfields.CRTC_HSYNC_TRISTATE);
  sprintf(buff,"%s CRTC_VSYNC_TRISTATE:%x", buff, reg->bitfields.CRTC_VSYNC_TRISTATE);
  sprintf(buff,"%s CRT_ON:%x", buff, reg->bitfields.CRT_ON);
  sprintf(buff,"%s VGA_CUR_B_TEST:%x", buff, reg->bitfields.VGA_CUR_B_TEST);
  sprintf(buff,"%s VGA_PACK_DIS:%x", buff, reg->bitfields.VGA_PACK_DIS);
  sprintf(buff,"%s VGA_MEM_PS_EN:%x", buff, reg->bitfields.VGA_MEM_PS_EN);
  sprintf(buff,"%s VCRTC_IDX_MASTER:%x", buff, reg->bitfields.VCRTC_IDX_MASTER);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union WAIT_UNTIL regWAIT_UNTIL;

__inline void dump_WAIT_UNTIL(__in  unsigned int *dwreg, __in  char *buff)
{
  regWAIT_UNTIL *reg = (regWAIT_UNTIL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s WAIT_CRTC_PFLIP:%x", buff, reg->bitfields.WAIT_CRTC_PFLIP);
  sprintf(buff,"%s WAIT_RE_CRTC_VLINE:%x", buff, reg->bitfields.WAIT_RE_CRTC_VLINE);
  sprintf(buff,"%s WAIT_FE_CRTC_VLINE:%x", buff, reg->bitfields.WAIT_FE_CRTC_VLINE);
  sprintf(buff,"%s WAIT_CRTC_VLINE:%x", buff, reg->bitfields.WAIT_CRTC_VLINE);
  sprintf(buff,"%s WAIT_DMA_VIPH0_IDLE:%x", buff, reg->bitfields.WAIT_DMA_VIPH0_IDLE);
  sprintf(buff,"%s WAIT_DMA_VIPH1_IDLE:%x", buff, reg->bitfields.WAIT_DMA_VIPH1_IDLE);
  sprintf(buff,"%s WAIT_DMA_VIPH2_IDLE:%x", buff, reg->bitfields.WAIT_DMA_VIPH2_IDLE);
  sprintf(buff,"%s WAIT_DMA_VIPH3_IDLE:%x", buff, reg->bitfields.WAIT_DMA_VIPH3_IDLE);
  sprintf(buff,"%s WAIT_DMA_VID_IDLE:%x", buff, reg->bitfields.WAIT_DMA_VID_IDLE);
  sprintf(buff,"%s WAIT_DMA_GUI_IDLE:%x", buff, reg->bitfields.WAIT_DMA_GUI_IDLE);
  sprintf(buff,"%s WAIT_CMDFIFO:%x", buff, reg->bitfields.WAIT_CMDFIFO);
  sprintf(buff,"%s WAIT_OV0_FLIP:%x", buff, reg->bitfields.WAIT_OV0_FLIP);
  sprintf(buff,"%s WAIT_OV0_SLICEDONE:%x", buff, reg->bitfields.WAIT_OV0_SLICEDONE);
  sprintf(buff,"%s WAIT_2D_IDLE:%x", buff, reg->bitfields.WAIT_2D_IDLE);
  sprintf(buff,"%s WAIT_3D_IDLE:%x", buff, reg->bitfields.WAIT_3D_IDLE);
  sprintf(buff,"%s WAIT_2D_IDLECLEAN:%x", buff, reg->bitfields.WAIT_2D_IDLECLEAN);
  sprintf(buff,"%s WAIT_3D_IDLECLEAN:%x", buff, reg->bitfields.WAIT_3D_IDLECLEAN);
  sprintf(buff,"%s WAIT_HOST_IDLECLEAN:%x", buff, reg->bitfields.WAIT_HOST_IDLECLEAN);
  sprintf(buff,"%s WAIT_EXTERN_SIG:%x", buff, reg->bitfields.WAIT_EXTERN_SIG);
  sprintf(buff,"%s CMDFIFO_ENTRIES:%x", buff, reg->bitfields.CMDFIFO_ENTRIES);
  sprintf(buff,"%s WAIT_BOTH_CRTC_PFLIP:%x", buff, reg->bitfields.WAIT_BOTH_CRTC_PFLIP);
  sprintf(buff,"%s ENG_DISPLAY_SELECT:%x", buff, reg->bitfields.ENG_DISPLAY_SELECT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ISYNC_CNTL regISYNC_CNTL;

__inline void dump_ISYNC_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regISYNC_CNTL *reg = (regISYNC_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ISYNC_ANY2D_IDLE3D:%x", buff, reg->bitfields.ISYNC_ANY2D_IDLE3D);
  sprintf(buff,"%s ISYNC_ANY3D_IDLE2D:%x", buff, reg->bitfields.ISYNC_ANY3D_IDLE2D);
  sprintf(buff,"%s ISYNC_TRIG2D_IDLE3D:%x", buff, reg->bitfields.ISYNC_TRIG2D_IDLE3D);
  sprintf(buff,"%s ISYNC_TRIG3D_IDLE2D:%x", buff, reg->bitfields.ISYNC_TRIG3D_IDLE2D);
  sprintf(buff,"%s ISYNC_WAIT_IDLEGUI:%x", buff, reg->bitfields.ISYNC_WAIT_IDLEGUI);
  sprintf(buff,"%s ISYNC_CPSCRATCH_IDLEGUI:%x", buff, reg->bitfields.ISYNC_CPSCRATCH_IDLEGUI);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RBBM_GUICNTL regRBBM_GUICNTL;

__inline void dump_RBBM_GUICNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRBBM_GUICNTL *reg = (regRBBM_GUICNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RBBM_STATUS regRBBM_STATUS;

__inline void dump_RBBM_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regRBBM_STATUS *reg = (regRBBM_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CMDFIFO_AVAIL:%x", buff, reg->bitfields.CMDFIFO_AVAIL);
  sprintf(buff,"%s HIRQ_ON_RBB:%x", buff, reg->bitfields.HIRQ_ON_RBB);
  sprintf(buff,"%s CPRQ_ON_RBB:%x", buff, reg->bitfields.CPRQ_ON_RBB);
  sprintf(buff,"%s CFRQ_ON_RBB:%x", buff, reg->bitfields.CFRQ_ON_RBB);
  sprintf(buff,"%s HIRQ_IN_RTBUF:%x", buff, reg->bitfields.HIRQ_IN_RTBUF);
  sprintf(buff,"%s CPRQ_IN_RTBUF:%x", buff, reg->bitfields.CPRQ_IN_RTBUF);
  sprintf(buff,"%s CFRQ_IN_RTBUF:%x", buff, reg->bitfields.CFRQ_IN_RTBUF);
  sprintf(buff,"%s CF_PIPE_BUSY:%x", buff, reg->bitfields.CF_PIPE_BUSY);
  sprintf(buff,"%s ENG_EV_BUSY:%x", buff, reg->bitfields.ENG_EV_BUSY);
  sprintf(buff,"%s CP_CMDSTRM_BUSY:%x", buff, reg->bitfields.CP_CMDSTRM_BUSY);
  sprintf(buff,"%s E2_BUSY:%x", buff, reg->bitfields.E2_BUSY);
  sprintf(buff,"%s RB2D_BUSY:%x", buff, reg->bitfields.RB2D_BUSY);
  sprintf(buff,"%s RB3D_BUSY:%x", buff, reg->bitfields.RB3D_BUSY);
  sprintf(buff,"%s VAP_BUSY:%x", buff, reg->bitfields.VAP_BUSY);
  sprintf(buff,"%s RE_BUSY:%x", buff, reg->bitfields.RE_BUSY);
  sprintf(buff,"%s TAM_BUSY:%x", buff, reg->bitfields.TAM_BUSY);
  sprintf(buff,"%s TDM_BUSY:%x", buff, reg->bitfields.TDM_BUSY);
  sprintf(buff,"%s PB_BUSY:%x", buff, reg->bitfields.PB_BUSY);
  sprintf(buff,"%s TIM_BUSY:%x", buff, reg->bitfields.TIM_BUSY);
  sprintf(buff,"%s GUI_ACTIVE:%x", buff, reg->bitfields.GUI_ACTIVE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RBBM_CNTL regRBBM_CNTL;

__inline void dump_RBBM_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRBBM_CNTL *reg = (regRBBM_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s RB_SETTLE:%x", buff, reg->bitfields.RB_SETTLE);
  sprintf(buff,"%s ABORTCLKS_HI:%x", buff, reg->bitfields.ABORTCLKS_HI);
  sprintf(buff,"%s ABORTCLKS_CP:%x", buff, reg->bitfields.ABORTCLKS_CP);
  sprintf(buff,"%s ABORTCLKS_CFIFO:%x", buff, reg->bitfields.ABORTCLKS_CFIFO);
  sprintf(buff,"%s CPQ_DATA_SWAP:%x", buff, reg->bitfields.CPQ_DATA_SWAP);
  sprintf(buff,"%s NO_ABORT_IDCT:%x", buff, reg->bitfields.NO_ABORT_IDCT);
  sprintf(buff,"%s NO_ABORT_BIOS:%x", buff, reg->bitfields.NO_ABORT_BIOS);
  sprintf(buff,"%s NO_ABORT_TVOUT:%x", buff, reg->bitfields.NO_ABORT_TVOUT);
  sprintf(buff,"%s NO_ABORT_CP:%x", buff, reg->bitfields.NO_ABORT_CP);
  sprintf(buff,"%s NO_ABORT_HI:%x", buff, reg->bitfields.NO_ABORT_HI);
  sprintf(buff,"%s NO_ABORT_HDP:%x", buff, reg->bitfields.NO_ABORT_HDP);
  sprintf(buff,"%s NO_ABORT_MC:%x", buff, reg->bitfields.NO_ABORT_MC);
  sprintf(buff,"%s NO_ABORT_AIC:%x", buff, reg->bitfields.NO_ABORT_AIC);
  sprintf(buff,"%s NO_ABORT_VIP:%x", buff, reg->bitfields.NO_ABORT_VIP);
  sprintf(buff,"%s NO_ABORT_DISP:%x", buff, reg->bitfields.NO_ABORT_DISP);
  sprintf(buff,"%s NO_ABORT_CG:%x", buff, reg->bitfields.NO_ABORT_CG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RBBM_SOFT_RESET regRBBM_SOFT_RESET;

__inline void dump_RBBM_SOFT_RESET(__in  unsigned int *dwreg, __in  char *buff)
{
  regRBBM_SOFT_RESET *reg = (regRBBM_SOFT_RESET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SOFT_RESET_CP:%x", buff, reg->bitfields.SOFT_RESET_CP);
  sprintf(buff,"%s SOFT_RESET_HI:%x", buff, reg->bitfields.SOFT_RESET_HI);
  sprintf(buff,"%s SOFT_RESET_VAP:%x", buff, reg->bitfields.SOFT_RESET_VAP);
  sprintf(buff,"%s SOFT_RESET_RE:%x", buff, reg->bitfields.SOFT_RESET_RE);
  sprintf(buff,"%s SOFT_RESET_PP:%x", buff, reg->bitfields.SOFT_RESET_PP);
  sprintf(buff,"%s SOFT_RESET_E2:%x", buff, reg->bitfields.SOFT_RESET_E2);
  sprintf(buff,"%s SOFT_RESET_RB:%x", buff, reg->bitfields.SOFT_RESET_RB);
  sprintf(buff,"%s SOFT_RESET_HDP:%x", buff, reg->bitfields.SOFT_RESET_HDP);
  sprintf(buff,"%s SOFT_RESET_MC:%x", buff, reg->bitfields.SOFT_RESET_MC);
  sprintf(buff,"%s SOFT_RESET_AIC:%x", buff, reg->bitfields.SOFT_RESET_AIC);
  sprintf(buff,"%s SOFT_RESET_VIP:%x", buff, reg->bitfields.SOFT_RESET_VIP);
  sprintf(buff,"%s SOFT_RESET_DISP:%x", buff, reg->bitfields.SOFT_RESET_DISP);
  sprintf(buff,"%s SOFT_RESET_CG:%x", buff, reg->bitfields.SOFT_RESET_CG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union NQWAIT_UNTIL regNQWAIT_UNTIL;

__inline void dump_NQWAIT_UNTIL(__in  unsigned int *dwreg, __in  char *buff)
{
  regNQWAIT_UNTIL *reg = (regNQWAIT_UNTIL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RBBM_DEBUG regRBBM_DEBUG;

__inline void dump_RBBM_DEBUG(__in  unsigned int *dwreg, __in  char *buff)
{
  regRBBM_DEBUG *reg = (regRBBM_DEBUG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RBBM_CMDFIFO_ADDR regRBBM_CMDFIFO_ADDR;

__inline void dump_RBBM_CMDFIFO_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regRBBM_CMDFIFO_ADDR *reg = (regRBBM_CMDFIFO_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RBBM_CMDFIFO_DATAL regRBBM_CMDFIFO_DATAL;

__inline void dump_RBBM_CMDFIFO_DATAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRBBM_CMDFIFO_DATAL *reg = (regRBBM_CMDFIFO_DATAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RBBM_CMDFIFO_DATAH regRBBM_CMDFIFO_DATAH;

__inline void dump_RBBM_CMDFIFO_DATAH(__in  unsigned int *dwreg, __in  char *buff)
{
  regRBBM_CMDFIFO_DATAH *reg = (regRBBM_CMDFIFO_DATAH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RBBM_CMDFIFO_STAT regRBBM_CMDFIFO_STAT;

__inline void dump_RBBM_CMDFIFO_STAT(__in  unsigned int *dwreg, __in  char *buff)
{
  regRBBM_CMDFIFO_STAT *reg = (regRBBM_CMDFIFO_STAT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CMDFIFO_RPTR:%x", buff, reg->bitfields.CMDFIFO_RPTR);
  sprintf(buff,"%s CMDFIFO_WPTR:%x", buff, reg->bitfields.CMDFIFO_WPTR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RBBM_PERF_CNTL regRBBM_PERF_CNTL;

__inline void dump_RBBM_PERF_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRBBM_PERF_CNTL *reg = (regRBBM_PERF_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PERFSEL1:%x", buff, reg->bitfields.PERFSEL1);
  sprintf(buff,"%s CLR_PERF1:%x", buff, reg->bitfields.CLR_PERF1);
  sprintf(buff,"%s EN_PERF1:%x", buff, reg->bitfields.EN_PERF1);
  sprintf(buff,"%s PERFSEL2:%x", buff, reg->bitfields.PERFSEL2);
  sprintf(buff,"%s CLR_PERF2:%x", buff, reg->bitfields.CLR_PERF2);
  sprintf(buff,"%s EN_PERF2:%x", buff, reg->bitfields.EN_PERF2);
  sprintf(buff,"%s SYNC_SEL:%x", buff, reg->bitfields.SYNC_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RBBM_PERF_COUNT1 regRBBM_PERF_COUNT1;

__inline void dump_RBBM_PERF_COUNT1(__in  unsigned int *dwreg, __in  char *buff)
{
  regRBBM_PERF_COUNT1 *reg = (regRBBM_PERF_COUNT1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RBBM_PERF_COUNT2 regRBBM_PERF_COUNT2;

__inline void dump_RBBM_PERF_COUNT2(__in  unsigned int *dwreg, __in  char *buff)
{
  regRBBM_PERF_COUNT2 *reg = (regRBBM_PERF_COUNT2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GENFC_RD regGENFC_RD;

__inline void dump_GENFC_RD(__in  unsigned int *dwreg, __in  char *buff)
{
  regGENFC_RD *reg = (regGENFC_RD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GENFC_WT regGENFC_WT;

__inline void dump_GENFC_WT(__in  unsigned int *dwreg, __in  char *buff)
{
  regGENFC_WT *reg = (regGENFC_WT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GENS0 regGENS0;

__inline void dump_GENS0(__in  unsigned int *dwreg, __in  char *buff)
{
  regGENS0 *reg = (regGENS0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SENSE_SWITCH:%x", buff, reg->bitfields.SENSE_SWITCH);
  sprintf(buff,"%s CRT_INTR:%x", buff, reg->bitfields.CRT_INTR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GENS1 regGENS1;

__inline void dump_GENS1(__in  unsigned int *dwreg, __in  char *buff)
{
  regGENS1 *reg = (regGENS1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s NO_DISPLAY:%x", buff, reg->bitfields.NO_DISPLAY);
  sprintf(buff,"%s VGA_VSTATUS:%x", buff, reg->bitfields.VGA_VSTATUS);
  sprintf(buff,"%s PIXEL_READ_BACK:%x", buff, reg->bitfields.PIXEL_READ_BACK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_DATA regDAC_DATA;

__inline void dump_DAC_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_DATA *reg = (regDAC_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_MASK regDAC_MASK;

__inline void dump_DAC_MASK(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_MASK *reg = (regDAC_MASK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_R_INDEX regDAC_R_INDEX;

__inline void dump_DAC_R_INDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_R_INDEX *reg = (regDAC_R_INDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_W_INDEX regDAC_W_INDEX;

__inline void dump_DAC_W_INDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_W_INDEX *reg = (regDAC_W_INDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SEQ00 regSEQ00;

__inline void dump_SEQ00(__in  unsigned int *dwreg, __in  char *buff)
{
  regSEQ00 *reg = (regSEQ00 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SEQ_RST0B:%x", buff, reg->bitfields.SEQ_RST0B);
  sprintf(buff,"%s SEQ_RST1B:%x", buff, reg->bitfields.SEQ_RST1B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SEQ01 regSEQ01;

__inline void dump_SEQ01(__in  unsigned int *dwreg, __in  char *buff)
{
  regSEQ01 *reg = (regSEQ01 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SEQ_DOT8:%x", buff, reg->bitfields.SEQ_DOT8);
  sprintf(buff,"%s SEQ_SHIFT2:%x", buff, reg->bitfields.SEQ_SHIFT2);
  sprintf(buff,"%s SEQ_PCLKBY2:%x", buff, reg->bitfields.SEQ_PCLKBY2);
  sprintf(buff,"%s SEQ_SHIFT4:%x", buff, reg->bitfields.SEQ_SHIFT4);
  sprintf(buff,"%s SEQ_MAXBW:%x", buff, reg->bitfields.SEQ_MAXBW);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SEQ03 regSEQ03;

__inline void dump_SEQ03(__in  unsigned int *dwreg, __in  char *buff)
{
  regSEQ03 *reg = (regSEQ03 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SEQ_FONT_B1:%x", buff, reg->bitfields.SEQ_FONT_B1);
  sprintf(buff,"%s SEQ_FONT_B2:%x", buff, reg->bitfields.SEQ_FONT_B2);
  sprintf(buff,"%s SEQ_FONT_A1:%x", buff, reg->bitfields.SEQ_FONT_A1);
  sprintf(buff,"%s SEQ_FONT_A2:%x", buff, reg->bitfields.SEQ_FONT_A2);
  sprintf(buff,"%s SEQ_FONT_B0:%x", buff, reg->bitfields.SEQ_FONT_B0);
  sprintf(buff,"%s SEQ_FONT_A0:%x", buff, reg->bitfields.SEQ_FONT_A0);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT00 regCRT00;

__inline void dump_CRT00(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT00 *reg = (regCRT00 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT01 regCRT01;

__inline void dump_CRT01(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT01 *reg = (regCRT01 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT02 regCRT02;

__inline void dump_CRT02(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT02 *reg = (regCRT02 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT03 regCRT03;

__inline void dump_CRT03(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT03 *reg = (regCRT03 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s H_BLANK_END:%x", buff, reg->bitfields.H_BLANK_END);
  sprintf(buff,"%s H_DE_SKEW:%x", buff, reg->bitfields.H_DE_SKEW);
  sprintf(buff,"%s CR10CR11_R_DIS_B:%x", buff, reg->bitfields.CR10CR11_R_DIS_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT04 regCRT04;

__inline void dump_CRT04(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT04 *reg = (regCRT04 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT05 regCRT05;

__inline void dump_CRT05(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT05 *reg = (regCRT05 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s H_SYNC_END:%x", buff, reg->bitfields.H_SYNC_END);
  sprintf(buff,"%s H_SYNC_SKEW:%x", buff, reg->bitfields.H_SYNC_SKEW);
  sprintf(buff,"%s H_BLANK_END_B5:%x", buff, reg->bitfields.H_BLANK_END_B5);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT06 regCRT06;

__inline void dump_CRT06(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT06 *reg = (regCRT06 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT07 regCRT07;

__inline void dump_CRT07(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT07 *reg = (regCRT07 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s V_TOTAL_B8:%x", buff, reg->bitfields.V_TOTAL_B8);
  sprintf(buff,"%s V_DISP_END_B8:%x", buff, reg->bitfields.V_DISP_END_B8);
  sprintf(buff,"%s V_SYNC_START_B8:%x", buff, reg->bitfields.V_SYNC_START_B8);
  sprintf(buff,"%s V_BLANK_START_B8:%x", buff, reg->bitfields.V_BLANK_START_B8);
  sprintf(buff,"%s LINE_CMP_B8:%x", buff, reg->bitfields.LINE_CMP_B8);
  sprintf(buff,"%s V_TOTAL_B9:%x", buff, reg->bitfields.V_TOTAL_B9);
  sprintf(buff,"%s V_DISP_END_B9:%x", buff, reg->bitfields.V_DISP_END_B9);
  sprintf(buff,"%s V_SYNC_START_B9:%x", buff, reg->bitfields.V_SYNC_START_B9);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT08 regCRT08;

__inline void dump_CRT08(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT08 *reg = (regCRT08 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ROW_SCAN_START:%x", buff, reg->bitfields.ROW_SCAN_START);
  sprintf(buff,"%s BYTE_PAN:%x", buff, reg->bitfields.BYTE_PAN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT09 regCRT09;

__inline void dump_CRT09(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT09 *reg = (regCRT09 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MAX_ROW_SCAN:%x", buff, reg->bitfields.MAX_ROW_SCAN);
  sprintf(buff,"%s V_BLANK_START_B9:%x", buff, reg->bitfields.V_BLANK_START_B9);
  sprintf(buff,"%s LINE_CMP_B9:%x", buff, reg->bitfields.LINE_CMP_B9);
  sprintf(buff,"%s DOUBLE_CHAR_HEIGHT:%x", buff, reg->bitfields.DOUBLE_CHAR_HEIGHT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT0A regCRT0A;

__inline void dump_CRT0A(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT0A *reg = (regCRT0A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CURSOR_START:%x", buff, reg->bitfields.CURSOR_START);
  sprintf(buff,"%s CURSOR_DISABLE:%x", buff, reg->bitfields.CURSOR_DISABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT0B regCRT0B;

__inline void dump_CRT0B(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT0B *reg = (regCRT0B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CURSOR_END:%x", buff, reg->bitfields.CURSOR_END);
  sprintf(buff,"%s CURSOR_SKEW:%x", buff, reg->bitfields.CURSOR_SKEW);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT0C regCRT0C;

__inline void dump_CRT0C(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT0C *reg = (regCRT0C *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT0D regCRT0D;

__inline void dump_CRT0D(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT0D *reg = (regCRT0D *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT0E regCRT0E;

__inline void dump_CRT0E(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT0E *reg = (regCRT0E *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT0F regCRT0F;

__inline void dump_CRT0F(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT0F *reg = (regCRT0F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT10 regCRT10;

__inline void dump_CRT10(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT10 *reg = (regCRT10 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT11 regCRT11;

__inline void dump_CRT11(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT11 *reg = (regCRT11 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s V_SYNC_END:%x", buff, reg->bitfields.V_SYNC_END);
  sprintf(buff,"%s V_INTR_CLR:%x", buff, reg->bitfields.V_INTR_CLR);
  sprintf(buff,"%s V_INTR_EN:%x", buff, reg->bitfields.V_INTR_EN);
  sprintf(buff,"%s SEL5_REFRESH_CYC:%x", buff, reg->bitfields.SEL5_REFRESH_CYC);
  sprintf(buff,"%s C0T7_WR_ONLY:%x", buff, reg->bitfields.C0T7_WR_ONLY);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT12 regCRT12;

__inline void dump_CRT12(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT12 *reg = (regCRT12 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT13 regCRT13;

__inline void dump_CRT13(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT13 *reg = (regCRT13 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT15 regCRT15;

__inline void dump_CRT15(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT15 *reg = (regCRT15 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT16 regCRT16;

__inline void dump_CRT16(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT16 *reg = (regCRT16 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT18 regCRT18;

__inline void dump_CRT18(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT18 *reg = (regCRT18 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT00_S regCRT00_S;

__inline void dump_CRT00_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT00_S *reg = (regCRT00_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT01_S regCRT01_S;

__inline void dump_CRT01_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT01_S *reg = (regCRT01_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT02_S regCRT02_S;

__inline void dump_CRT02_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT02_S *reg = (regCRT02_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT03_S regCRT03_S;

__inline void dump_CRT03_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT03_S *reg = (regCRT03_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s H_BLANK_END_S:%x", buff, reg->bitfields.H_BLANK_END_S);
  sprintf(buff,"%s H_DE_SKEW_S:%x", buff, reg->bitfields.H_DE_SKEW_S);
  sprintf(buff,"%s CR10CR11_R_DIS_B_M:%x", buff, reg->bitfields.CR10CR11_R_DIS_B_M);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT04_S regCRT04_S;

__inline void dump_CRT04_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT04_S *reg = (regCRT04_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT05_S regCRT05_S;

__inline void dump_CRT05_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT05_S *reg = (regCRT05_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s H_SYNC_END_S:%x", buff, reg->bitfields.H_SYNC_END_S);
  sprintf(buff,"%s H_SYNC_SKEW_S:%x", buff, reg->bitfields.H_SYNC_SKEW_S);
  sprintf(buff,"%s H_BLANK_END_B5_S:%x", buff, reg->bitfields.H_BLANK_END_B5_S);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT06_S regCRT06_S;

__inline void dump_CRT06_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT06_S *reg = (regCRT06_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT07_S regCRT07_S;

__inline void dump_CRT07_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT07_S *reg = (regCRT07_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s V_TOTAL_B8_S:%x", buff, reg->bitfields.V_TOTAL_B8_S);
  sprintf(buff,"%s V_DISP_END_B8_S:%x", buff, reg->bitfields.V_DISP_END_B8_S);
  sprintf(buff,"%s V_SYNC_START_B8_S:%x", buff, reg->bitfields.V_SYNC_START_B8_S);
  sprintf(buff,"%s V_BLANK_START_B8_S:%x", buff, reg->bitfields.V_BLANK_START_B8_S);
  sprintf(buff,"%s LINE_CMP_B8_M:%x", buff, reg->bitfields.LINE_CMP_B8_M);
  sprintf(buff,"%s V_TOTAL_B9_S:%x", buff, reg->bitfields.V_TOTAL_B9_S);
  sprintf(buff,"%s V_DISP_END_B9_S:%x", buff, reg->bitfields.V_DISP_END_B9_S);
  sprintf(buff,"%s V_SYNC_START_B9_S:%x", buff, reg->bitfields.V_SYNC_START_B9_S);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT08_S regCRT08_S;

__inline void dump_CRT08_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT08_S *reg = (regCRT08_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ROW_SCAN_START_M:%x", buff, reg->bitfields.ROW_SCAN_START_M);
  sprintf(buff,"%s BYTE_PAN_M:%x", buff, reg->bitfields.BYTE_PAN_M);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT09_S regCRT09_S;

__inline void dump_CRT09_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT09_S *reg = (regCRT09_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MAX_ROW_SCAN_S:%x", buff, reg->bitfields.MAX_ROW_SCAN_S);
  sprintf(buff,"%s V_BLANK_START_B9_S:%x", buff, reg->bitfields.V_BLANK_START_B9_S);
  sprintf(buff,"%s LINE_CMP_B9_M:%x", buff, reg->bitfields.LINE_CMP_B9_M);
  sprintf(buff,"%s DOUBLE_CHAR_HEIGHT_M:%x", buff, reg->bitfields.DOUBLE_CHAR_HEIGHT_M);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT0A_S regCRT0A_S;

__inline void dump_CRT0A_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT0A_S *reg = (regCRT0A_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CURSOR_START_S:%x", buff, reg->bitfields.CURSOR_START_S);
  sprintf(buff,"%s CURSOR_DISABLE_M:%x", buff, reg->bitfields.CURSOR_DISABLE_M);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT0B_S regCRT0B_S;

__inline void dump_CRT0B_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT0B_S *reg = (regCRT0B_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CURSOR_END_S:%x", buff, reg->bitfields.CURSOR_END_S);
  sprintf(buff,"%s CURSOR_SKEW_M:%x", buff, reg->bitfields.CURSOR_SKEW_M);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT0C_S regCRT0C_S;

__inline void dump_CRT0C_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT0C_S *reg = (regCRT0C_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT0D_S regCRT0D_S;

__inline void dump_CRT0D_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT0D_S *reg = (regCRT0D_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT0E_S regCRT0E_S;

__inline void dump_CRT0E_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT0E_S *reg = (regCRT0E_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT0F_S regCRT0F_S;

__inline void dump_CRT0F_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT0F_S *reg = (regCRT0F_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT10_S regCRT10_S;

__inline void dump_CRT10_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT10_S *reg = (regCRT10_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT11_S regCRT11_S;

__inline void dump_CRT11_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT11_S *reg = (regCRT11_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s V_SYNC_END_S:%x", buff, reg->bitfields.V_SYNC_END_S);
  sprintf(buff,"%s V_INTR_CLR_M:%x", buff, reg->bitfields.V_INTR_CLR_M);
  sprintf(buff,"%s V_INTR_EN_M:%x", buff, reg->bitfields.V_INTR_EN_M);
  sprintf(buff,"%s SEL5_REFRESH_CYC_M:%x", buff, reg->bitfields.SEL5_REFRESH_CYC_M);
  sprintf(buff,"%s C0T7_WR_ONLY_M:%x", buff, reg->bitfields.C0T7_WR_ONLY_M);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT12_S regCRT12_S;

__inline void dump_CRT12_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT12_S *reg = (regCRT12_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT13_S regCRT13_S;

__inline void dump_CRT13_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT13_S *reg = (regCRT13_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT15_S regCRT15_S;

__inline void dump_CRT15_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT15_S *reg = (regCRT15_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT16_S regCRT16_S;

__inline void dump_CRT16_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT16_S *reg = (regCRT16_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT18_S regCRT18_S;

__inline void dump_CRT18_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT18_S *reg = (regCRT18_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTRX regATTRX;

__inline void dump_ATTRX(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTRX *reg = (regATTRX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ATTR_IDX:%x", buff, reg->bitfields.ATTR_IDX);
  sprintf(buff,"%s ATTR_PAL_RW_ENB:%x", buff, reg->bitfields.ATTR_PAL_RW_ENB);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTRDW regATTRDW;

__inline void dump_ATTRDW(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTRDW *reg = (regATTRDW *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTRDR regATTRDR;

__inline void dump_ATTRDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTRDR *reg = (regATTRDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR00 regATTR00;

__inline void dump_ATTR00(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR00 *reg = (regATTR00 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR01 regATTR01;

__inline void dump_ATTR01(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR01 *reg = (regATTR01 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR02 regATTR02;

__inline void dump_ATTR02(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR02 *reg = (regATTR02 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR03 regATTR03;

__inline void dump_ATTR03(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR03 *reg = (regATTR03 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR04 regATTR04;

__inline void dump_ATTR04(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR04 *reg = (regATTR04 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR05 regATTR05;

__inline void dump_ATTR05(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR05 *reg = (regATTR05 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR06 regATTR06;

__inline void dump_ATTR06(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR06 *reg = (regATTR06 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR07 regATTR07;

__inline void dump_ATTR07(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR07 *reg = (regATTR07 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR08 regATTR08;

__inline void dump_ATTR08(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR08 *reg = (regATTR08 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR09 regATTR09;

__inline void dump_ATTR09(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR09 *reg = (regATTR09 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR0A regATTR0A;

__inline void dump_ATTR0A(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR0A *reg = (regATTR0A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR0B regATTR0B;

__inline void dump_ATTR0B(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR0B *reg = (regATTR0B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR0C regATTR0C;

__inline void dump_ATTR0C(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR0C *reg = (regATTR0C *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR0D regATTR0D;

__inline void dump_ATTR0D(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR0D *reg = (regATTR0D *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR0E regATTR0E;

__inline void dump_ATTR0E(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR0E *reg = (regATTR0E *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR0F regATTR0F;

__inline void dump_ATTR0F(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR0F *reg = (regATTR0F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR10 regATTR10;

__inline void dump_ATTR10(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR10 *reg = (regATTR10 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ATTR_GRPH_MODE:%x", buff, reg->bitfields.ATTR_GRPH_MODE);
  sprintf(buff,"%s ATTR_MONO_EN:%x", buff, reg->bitfields.ATTR_MONO_EN);
  sprintf(buff,"%s ATTR_LGRPH_EN:%x", buff, reg->bitfields.ATTR_LGRPH_EN);
  sprintf(buff,"%s ATTR_BLINK_EN:%x", buff, reg->bitfields.ATTR_BLINK_EN);
  sprintf(buff,"%s ATTR_PANTOPONLY:%x", buff, reg->bitfields.ATTR_PANTOPONLY);
  sprintf(buff,"%s ATTR_PCLKBY2:%x", buff, reg->bitfields.ATTR_PCLKBY2);
  sprintf(buff,"%s ATTR_CSEL_EN:%x", buff, reg->bitfields.ATTR_CSEL_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR11 regATTR11;

__inline void dump_ATTR11(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR11 *reg = (regATTR11 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR12 regATTR12;

__inline void dump_ATTR12(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR12 *reg = (regATTR12 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ATTR_MAP_EN:%x", buff, reg->bitfields.ATTR_MAP_EN);
  sprintf(buff,"%s ATTR_VSMUX:%x", buff, reg->bitfields.ATTR_VSMUX);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR13 regATTR13;

__inline void dump_ATTR13(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR13 *reg = (regATTR13 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ATTR14 regATTR14;

__inline void dump_ATTR14(__in  unsigned int *dwreg, __in  char *buff)
{
  regATTR14 *reg = (regATTR14 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ATTR_CSEL1:%x", buff, reg->bitfields.ATTR_CSEL1);
  sprintf(buff,"%s ATTR_CSEL2:%x", buff, reg->bitfields.ATTR_CSEL2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250VCLK_ECP_CNTL regrv250VCLK_ECP_CNTL;

__inline void dump_rv250VCLK_ECP_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250VCLK_ECP_CNTL *reg = (regrv250VCLK_ECP_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VCLK_SRC_SEL:%x", buff, reg->bitfields.VCLK_SRC_SEL);
  sprintf(buff,"%s VCLK_INVERT:%x", buff, reg->bitfields.VCLK_INVERT);
  sprintf(buff,"%s PIXCLK_SRC_INVERT:%x", buff, reg->bitfields.PIXCLK_SRC_INVERT);
  sprintf(buff,"%s PIXCLK_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_DAC_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_DAC_ALWAYS_ONb);
  sprintf(buff,"%s ECP_DIV:%x", buff, reg->bitfields.ECP_DIV);
  sprintf(buff,"%s ECP_FORCE_ON:%x", buff, reg->bitfields.ECP_FORCE_ON);
  sprintf(buff,"%s SUBCLK_FORCE_ON:%x", buff, reg->bitfields.SUBCLK_FORCE_ON);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_TEST_MACRO_RW_WRITE regDISP_TEST_MACRO_RW_WRITE;

__inline void dump_DISP_TEST_MACRO_RW_WRITE(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_TEST_MACRO_RW_WRITE *reg = (regDISP_TEST_MACRO_RW_WRITE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEST_MACRO_RW_WRITE1:%x", buff, reg->bitfields.TEST_MACRO_RW_WRITE1);
  sprintf(buff,"%s TEST_MACRO_RW_WRITE2:%x", buff, reg->bitfields.TEST_MACRO_RW_WRITE2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_TEST_MACRO_RW_READ regDISP_TEST_MACRO_RW_READ;

__inline void dump_DISP_TEST_MACRO_RW_READ(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_TEST_MACRO_RW_READ *reg = (regDISP_TEST_MACRO_RW_READ *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEST_MACRO_RW_READ1:%x", buff, reg->bitfields.TEST_MACRO_RW_READ1);
  sprintf(buff,"%s TEST_MACRO_RW_READ2:%x", buff, reg->bitfields.TEST_MACRO_RW_READ2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_TEST_MACRO_RW_DATA regDISP_TEST_MACRO_RW_DATA;

__inline void dump_DISP_TEST_MACRO_RW_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_TEST_MACRO_RW_DATA *reg = (regDISP_TEST_MACRO_RW_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250DISP_TEST_MACRO_RW_CNTL regrv250DISP_TEST_MACRO_RW_CNTL;

__inline void dump_rv250DISP_TEST_MACRO_RW_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250DISP_TEST_MACRO_RW_CNTL *reg = (regrv250DISP_TEST_MACRO_RW_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEST_MACRO_RW_START:%x", buff, reg->bitfields.TEST_MACRO_RW_START);
  sprintf(buff,"%s TEST_MACRO_RW_OP:%x", buff, reg->bitfields.TEST_MACRO_RW_OP);
  sprintf(buff,"%s TEST_MACRO_RW_MODE:%x", buff, reg->bitfields.TEST_MACRO_RW_MODE);
  sprintf(buff,"%s TEST_MACRO_RW_MISMATCH_SEL:%x", buff, reg->bitfields.TEST_MACRO_RW_MISMATCH_SEL);
  sprintf(buff,"%s TEST_MACRO_RW_MISMATCH:%x", buff, reg->bitfields.TEST_MACRO_RW_MISMATCH);
  sprintf(buff,"%s TEST_MACRO_RW_ENABLE:%x", buff, reg->bitfields.TEST_MACRO_RW_ENABLE);
  sprintf(buff,"%s TEST_MACRO_RW_SCLK_NEG_ENABLE:%x", buff, reg->bitfields.TEST_MACRO_RW_SCLK_NEG_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250PIXCLKS_CNTL regrv250PIXCLKS_CNTL;

__inline void dump_rv250PIXCLKS_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250PIXCLKS_CNTL *reg = (regrv250PIXCLKS_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PIX2CLK_SRC_SEL:%x", buff, reg->bitfields.PIX2CLK_SRC_SEL);
  sprintf(buff,"%s PIX2CLK_INVERT:%x", buff, reg->bitfields.PIX2CLK_INVERT);
  sprintf(buff,"%s PIX2CLK_SRC_INVERT:%x", buff, reg->bitfields.PIX2CLK_SRC_INVERT);
  sprintf(buff,"%s PIX2CLK_ALWAYS_ONb:%x", buff, reg->bitfields.PIX2CLK_ALWAYS_ONb);
  sprintf(buff,"%s PIX2CLK_DAC_ALWAYS_ONb:%x", buff, reg->bitfields.PIX2CLK_DAC_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_TV_SRC_SEL:%x", buff, reg->bitfields.PIXCLK_TV_SRC_SEL);
  sprintf(buff,"%s PIXCLK_BLEND_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_BLEND_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_GV_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_GV_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_DIG_TMDS_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_DIG_TMDS_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_LVDS_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_LVDS_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_TMDS_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_TMDS_ALWAYS_ONb);
  sprintf(buff,"%s DVOCLKC_IN_PHASE:%x", buff, reg->bitfields.DVOCLKC_IN_PHASE);
  sprintf(buff,"%s DVOCLKD_IN_PHASE:%x", buff, reg->bitfields.DVOCLKD_IN_PHASE);
  sprintf(buff,"%s DVOCLKC_SKW_CTL:%x", buff, reg->bitfields.DVOCLKC_SKW_CTL);
  sprintf(buff,"%s DVOCLKD_SKW_CTL:%x", buff, reg->bitfields.DVOCLKD_SKW_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_STATUS regCRTC_STATUS;

__inline void dump_CRTC_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_STATUS *reg = (regCRTC_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_VBLANK_CUR:%x", buff, reg->bitfields.CRTC_VBLANK_CUR);
  sprintf(buff,"%s CRTC_VBLANK_SAVE:%x", buff, reg->bitfields.CRTC_VBLANK_SAVE);
  sprintf(buff,"%s CRTC_VLINE_SYNC:%x", buff, reg->bitfields.CRTC_VLINE_SYNC);
  sprintf(buff,"%s CRTC_FRAME:%x", buff, reg->bitfields.CRTC_FRAME);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GPIO_VGA_DDC regGPIO_VGA_DDC;

__inline void dump_GPIO_VGA_DDC(__in  unsigned int *dwreg, __in  char *buff)
{
  regGPIO_VGA_DDC *reg = (regGPIO_VGA_DDC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VGA_DCC_DATA_OUTPUT:%x", buff, reg->bitfields.VGA_DCC_DATA_OUTPUT);
  sprintf(buff,"%s VGA_DDC_CLK_OUTPUT:%x", buff, reg->bitfields.VGA_DDC_CLK_OUTPUT);
  sprintf(buff,"%s VGA_DDC_DATA_INPUT:%x", buff, reg->bitfields.VGA_DDC_DATA_INPUT);
  sprintf(buff,"%s VGA_DDC_CLK_INPUT:%x", buff, reg->bitfields.VGA_DDC_CLK_INPUT);
  sprintf(buff,"%s VGA_DDC_DATA_OUT_EN:%x", buff, reg->bitfields.VGA_DDC_DATA_OUT_EN);
  sprintf(buff,"%s VGA_DDC_CLK_OUT_EN:%x", buff, reg->bitfields.VGA_DDC_CLK_OUT_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GPIO_DVI_DDC regGPIO_DVI_DDC;

__inline void dump_GPIO_DVI_DDC(__in  unsigned int *dwreg, __in  char *buff)
{
  regGPIO_DVI_DDC *reg = (regGPIO_DVI_DDC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DVI_DDC_DATA_OUTPUT:%x", buff, reg->bitfields.DVI_DDC_DATA_OUTPUT);
  sprintf(buff,"%s DVI_DDC_CLK_OUTPUT:%x", buff, reg->bitfields.DVI_DDC_CLK_OUTPUT);
  sprintf(buff,"%s DVI_DDC_DATA_INPUT:%x", buff, reg->bitfields.DVI_DDC_DATA_INPUT);
  sprintf(buff,"%s DVI_DDC_CLK_INPUT:%x", buff, reg->bitfields.DVI_DDC_CLK_INPUT);
  sprintf(buff,"%s DVI_DDC_DATA_OUT_EN:%x", buff, reg->bitfields.DVI_DDC_DATA_OUT_EN);
  sprintf(buff,"%s DVI_DDC_CLK_OUT_EN:%x", buff, reg->bitfields.DVI_DDC_CLK_OUT_EN);
  sprintf(buff,"%s SW_WANTS_TO_USE_DVI_I2C:%x", buff, reg->bitfields.SW_WANTS_TO_USE_DVI_I2C);
  sprintf(buff,"%s SW_DONE_USING_DVI_I2C:%x", buff, reg->bitfields.SW_DONE_USING_DVI_I2C);
  sprintf(buff,"%s ABORT_HDCP_DVI_I2C:%x", buff, reg->bitfields.ABORT_HDCP_DVI_I2C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GPIO_MONID regGPIO_MONID;

__inline void dump_GPIO_MONID(__in  unsigned int *dwreg, __in  char *buff)
{
  regGPIO_MONID *reg = (regGPIO_MONID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GPIO_MONID_0_OUTPUT:%x", buff, reg->bitfields.GPIO_MONID_0_OUTPUT);
  sprintf(buff,"%s GPIO_MONID_1_OUTPUT:%x", buff, reg->bitfields.GPIO_MONID_1_OUTPUT);
  sprintf(buff,"%s GPIO_MONID_0_INPUT:%x", buff, reg->bitfields.GPIO_MONID_0_INPUT);
  sprintf(buff,"%s GPIO_MONID_1_INPUT:%x", buff, reg->bitfields.GPIO_MONID_1_INPUT);
  sprintf(buff,"%s GPIO_MONID_0_OUT_EN:%x", buff, reg->bitfields.GPIO_MONID_0_OUT_EN);
  sprintf(buff,"%s GPIO_MONID_1_OUT_EN:%x", buff, reg->bitfields.GPIO_MONID_1_OUT_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GPIO_CRT2_DDC regGPIO_CRT2_DDC;

__inline void dump_GPIO_CRT2_DDC(__in  unsigned int *dwreg, __in  char *buff)
{
  regGPIO_CRT2_DDC *reg = (regGPIO_CRT2_DDC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRT2_DDC_DATA_OUTPUT:%x", buff, reg->bitfields.CRT2_DDC_DATA_OUTPUT);
  sprintf(buff,"%s CRT2_DDC_CLK_OUTPUT:%x", buff, reg->bitfields.CRT2_DDC_CLK_OUTPUT);
  sprintf(buff,"%s CRT2_DDC_DATA_INPUT:%x", buff, reg->bitfields.CRT2_DDC_DATA_INPUT);
  sprintf(buff,"%s CRT2_DDC_CLK_INPUT:%x", buff, reg->bitfields.CRT2_DDC_CLK_INPUT);
  sprintf(buff,"%s CRT2_DDC_DATA_OUT_EN:%x", buff, reg->bitfields.CRT2_DDC_DATA_OUT_EN);
  sprintf(buff,"%s CRT2_DDC_CLK_OUT_EN:%x", buff, reg->bitfields.CRT2_DDC_CLK_OUT_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PALETTE_INDEX regPALETTE_INDEX;

__inline void dump_PALETTE_INDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regPALETTE_INDEX *reg = (regPALETTE_INDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PALETTE_W_INDEX:%x", buff, reg->bitfields.PALETTE_W_INDEX);
  sprintf(buff,"%s PALETTE_R_INDEX:%x", buff, reg->bitfields.PALETTE_R_INDEX);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PALETTE_DATA regPALETTE_DATA;

__inline void dump_PALETTE_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regPALETTE_DATA *reg = (regPALETTE_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PALETTE_DATA_B:%x", buff, reg->bitfields.PALETTE_DATA_B);
  sprintf(buff,"%s PALETTE_DATA_G:%x", buff, reg->bitfields.PALETTE_DATA_G);
  sprintf(buff,"%s PALETTE_DATA_R:%x", buff, reg->bitfields.PALETTE_DATA_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PALETTE_30_DATA regPALETTE_30_DATA;

__inline void dump_PALETTE_30_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regPALETTE_30_DATA *reg = (regPALETTE_30_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PALETTE_DATA_B:%x", buff, reg->bitfields.PALETTE_DATA_B);
  sprintf(buff,"%s PALETTE_DATA_G:%x", buff, reg->bitfields.PALETTE_DATA_G);
  sprintf(buff,"%s PALETTE_DATA_R:%x", buff, reg->bitfields.PALETTE_DATA_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_H_TOTAL_DISP regCRTC_H_TOTAL_DISP;

__inline void dump_CRTC_H_TOTAL_DISP(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_H_TOTAL_DISP *reg = (regCRTC_H_TOTAL_DISP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_H_TOTAL:%x", buff, reg->bitfields.CRTC_H_TOTAL);
  sprintf(buff,"%s CRTC_H_DISP:%x", buff, reg->bitfields.CRTC_H_DISP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_H_SYNC_STRT_WID regCRTC_H_SYNC_STRT_WID;

__inline void dump_CRTC_H_SYNC_STRT_WID(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_H_SYNC_STRT_WID *reg = (regCRTC_H_SYNC_STRT_WID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_H_SYNC_STRT_PIX:%x", buff, reg->bitfields.CRTC_H_SYNC_STRT_PIX);
  sprintf(buff,"%s CRTC_H_SYNC_STRT_CHAR:%x", buff, reg->bitfields.CRTC_H_SYNC_STRT_CHAR);
  sprintf(buff,"%s CRTC_H_SYNC_WID:%x", buff, reg->bitfields.CRTC_H_SYNC_WID);
  sprintf(buff,"%s CRTC_H_SYNC_POL:%x", buff, reg->bitfields.CRTC_H_SYNC_POL);
  sprintf(buff,"%s CRTC_H_SYNC_SKEW_TUNE:%x", buff, reg->bitfields.CRTC_H_SYNC_SKEW_TUNE);
  sprintf(buff,"%s CRTC_H_SYNC_SKEW_TUNE_MODE:%x", buff, reg->bitfields.CRTC_H_SYNC_SKEW_TUNE_MODE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_V_TOTAL_DISP regCRTC_V_TOTAL_DISP;

__inline void dump_CRTC_V_TOTAL_DISP(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_V_TOTAL_DISP *reg = (regCRTC_V_TOTAL_DISP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_V_TOTAL:%x", buff, reg->bitfields.CRTC_V_TOTAL);
  sprintf(buff,"%s CRTC_V_DISP:%x", buff, reg->bitfields.CRTC_V_DISP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_V_SYNC_STRT_WID regCRTC_V_SYNC_STRT_WID;

__inline void dump_CRTC_V_SYNC_STRT_WID(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_V_SYNC_STRT_WID *reg = (regCRTC_V_SYNC_STRT_WID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_V_SYNC_STRT:%x", buff, reg->bitfields.CRTC_V_SYNC_STRT);
  sprintf(buff,"%s CRTC_V_SYNC_WID:%x", buff, reg->bitfields.CRTC_V_SYNC_WID);
  sprintf(buff,"%s CRTC_V_SYNC_POL:%x", buff, reg->bitfields.CRTC_V_SYNC_POL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_VLINE_CRNT_VLINE regCRTC_VLINE_CRNT_VLINE;

__inline void dump_CRTC_VLINE_CRNT_VLINE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_VLINE_CRNT_VLINE *reg = (regCRTC_VLINE_CRNT_VLINE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_VLINE:%x", buff, reg->bitfields.CRTC_VLINE);
  sprintf(buff,"%s CRTC_CRNT_VLINE:%x", buff, reg->bitfields.CRTC_CRNT_VLINE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_CRNT_FRAME regCRTC_CRNT_FRAME;

__inline void dump_CRTC_CRNT_FRAME(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_CRNT_FRAME *reg = (regCRTC_CRNT_FRAME *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_GUI_TRIG_VLINE regCRTC_GUI_TRIG_VLINE;

__inline void dump_CRTC_GUI_TRIG_VLINE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_GUI_TRIG_VLINE *reg = (regCRTC_GUI_TRIG_VLINE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_GUI_TRIG_VLINE_START:%x", buff, reg->bitfields.CRTC_GUI_TRIG_VLINE_START);
  sprintf(buff,"%s CRTC_GUI_TRIG_VLINE_INV:%x", buff, reg->bitfields.CRTC_GUI_TRIG_VLINE_INV);
  sprintf(buff,"%s CRTC_GUI_TRIG_VLINE_END:%x", buff, reg->bitfields.CRTC_GUI_TRIG_VLINE_END);
  sprintf(buff,"%s CRTC_GUI_TRIG_VLINE_STALL:%x", buff, reg->bitfields.CRTC_GUI_TRIG_VLINE_STALL);
  sprintf(buff,"%s CRTC_GUI_TRIG_VLINE:%x", buff, reg->bitfields.CRTC_GUI_TRIG_VLINE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_DEBUG regCRTC_DEBUG;

__inline void dump_CRTC_DEBUG(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_DEBUG *reg = (regCRTC_DEBUG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_GUI_TRIG_BYPASS_EN:%x", buff, reg->bitfields.CRTC_GUI_TRIG_BYPASS_EN);
  sprintf(buff,"%s GUI_TRIG_VLINE_BYPASS:%x", buff, reg->bitfields.GUI_TRIG_VLINE_BYPASS);
  sprintf(buff,"%s GUI_TRIG_OFFSET_BYPASS:%x", buff, reg->bitfields.GUI_TRIG_OFFSET_BYPASS);
  sprintf(buff,"%s GUI_TRIG_PITCH_ADD_BYPASS:%x", buff, reg->bitfields.GUI_TRIG_PITCH_ADD_BYPASS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_OFFSET_RIGHT regCRTC_OFFSET_RIGHT;

__inline void dump_CRTC_OFFSET_RIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_OFFSET_RIGHT *reg = (regCRTC_OFFSET_RIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_OFFSET_RIGHT:%x", buff, reg->bitfields.CRTC_OFFSET_RIGHT);
  sprintf(buff,"%s CRTC_GUI_TRIG_OFFSET:%x", buff, reg->bitfields.CRTC_GUI_TRIG_OFFSET);
  sprintf(buff,"%s CRTC_OFFSET_LOCK:%x", buff, reg->bitfields.CRTC_OFFSET_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_OFFSET regCRTC_OFFSET;

__inline void dump_CRTC_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_OFFSET *reg = (regCRTC_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_OFFSET:%x", buff, reg->bitfields.CRTC_OFFSET);
  sprintf(buff,"%s CRTC_GUI_TRIG_OFFSET:%x", buff, reg->bitfields.CRTC_GUI_TRIG_OFFSET);
  sprintf(buff,"%s CRTC_OFFSET_LOCK:%x", buff, reg->bitfields.CRTC_OFFSET_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_OFFSET_CNTL regCRTC_OFFSET_CNTL;

__inline void dump_CRTC_OFFSET_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_OFFSET_CNTL *reg = (regCRTC_OFFSET_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_TILE_LINE:%x", buff, reg->bitfields.CRTC_TILE_LINE);
  sprintf(buff,"%s CRTC_TILE_LINE_RIGHT:%x", buff, reg->bitfields.CRTC_TILE_LINE_RIGHT);
  sprintf(buff,"%s CRTC_TILE_EN_RIGHT:%x", buff, reg->bitfields.CRTC_TILE_EN_RIGHT);
  sprintf(buff,"%s CRTC_TILE_EN:%x", buff, reg->bitfields.CRTC_TILE_EN);
  sprintf(buff,"%s CRTC_OFFSET_FLIP_CNTL:%x", buff, reg->bitfields.CRTC_OFFSET_FLIP_CNTL);
  sprintf(buff,"%s CRTC_STEREO_OFFSET_EN:%x", buff, reg->bitfields.CRTC_STEREO_OFFSET_EN);
  sprintf(buff,"%s CRTC_STEREO_SYNC_EN:%x", buff, reg->bitfields.CRTC_STEREO_SYNC_EN);
  sprintf(buff,"%s CRTC_STEREO_SYNC_OUT_EN:%x", buff, reg->bitfields.CRTC_STEREO_SYNC_OUT_EN);
  sprintf(buff,"%s CRTC_STEREO_SYNC:%x", buff, reg->bitfields.CRTC_STEREO_SYNC);
  sprintf(buff,"%s CRTC_GUI_TRIG_OFFSET_LEFT_EN:%x", buff, reg->bitfields.CRTC_GUI_TRIG_OFFSET_LEFT_EN);
  sprintf(buff,"%s CRTC_GUI_TRIG_OFFSET_RIGHT_EN:%x", buff, reg->bitfields.CRTC_GUI_TRIG_OFFSET_RIGHT_EN);
  sprintf(buff,"%s CRTC_GUI_TRIG_OFFSET:%x", buff, reg->bitfields.CRTC_GUI_TRIG_OFFSET);
  sprintf(buff,"%s CRTC_OFFSET_LOCK:%x", buff, reg->bitfields.CRTC_OFFSET_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_PITCH regCRTC_PITCH;

__inline void dump_CRTC_PITCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_PITCH *reg = (regCRTC_PITCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_PITCH:%x", buff, reg->bitfields.CRTC_PITCH);
  sprintf(buff,"%s CRTC_PITCH_RIGHT:%x", buff, reg->bitfields.CRTC_PITCH_RIGHT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OVR_CLR regOVR_CLR;

__inline void dump_OVR_CLR(__in  unsigned int *dwreg, __in  char *buff)
{
  regOVR_CLR *reg = (regOVR_CLR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OVR_CLR_B:%x", buff, reg->bitfields.OVR_CLR_B);
  sprintf(buff,"%s OVR_CLR_G:%x", buff, reg->bitfields.OVR_CLR_G);
  sprintf(buff,"%s OVR_CLR_R:%x", buff, reg->bitfields.OVR_CLR_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OVR_WID_LEFT_RIGHT regOVR_WID_LEFT_RIGHT;

__inline void dump_OVR_WID_LEFT_RIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regOVR_WID_LEFT_RIGHT *reg = (regOVR_WID_LEFT_RIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OVR_WID_RIGHT:%x", buff, reg->bitfields.OVR_WID_RIGHT);
  sprintf(buff,"%s OVR_WID_LEFT:%x", buff, reg->bitfields.OVR_WID_LEFT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OVR_WID_TOP_BOTTOM regOVR_WID_TOP_BOTTOM;

__inline void dump_OVR_WID_TOP_BOTTOM(__in  unsigned int *dwreg, __in  char *buff)
{
  regOVR_WID_TOP_BOTTOM *reg = (regOVR_WID_TOP_BOTTOM *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OVR_WID_BOTTOM:%x", buff, reg->bitfields.OVR_WID_BOTTOM);
  sprintf(buff,"%s OVR_WID_TOP:%x", buff, reg->bitfields.OVR_WID_TOP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISPLAY_BASE_ADDR regDISPLAY_BASE_ADDR;

__inline void dump_DISPLAY_BASE_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISPLAY_BASE_ADDR *reg = (regDISPLAY_BASE_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SNAPSHOT_VH_COUNTS regSNAPSHOT_VH_COUNTS;

__inline void dump_SNAPSHOT_VH_COUNTS(__in  unsigned int *dwreg, __in  char *buff)
{
  regSNAPSHOT_VH_COUNTS *reg = (regSNAPSHOT_VH_COUNTS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SNAPSHOT_HCOUNT:%x", buff, reg->bitfields.SNAPSHOT_HCOUNT);
  sprintf(buff,"%s SNAPSHOT_VCOUNT:%x", buff, reg->bitfields.SNAPSHOT_VCOUNT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SNAPSHOT_F_COUNT regSNAPSHOT_F_COUNT;

__inline void dump_SNAPSHOT_F_COUNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSNAPSHOT_F_COUNT *reg = (regSNAPSHOT_F_COUNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union N_VIF_COUNT regN_VIF_COUNT;

__inline void dump_N_VIF_COUNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regN_VIF_COUNT *reg = (regN_VIF_COUNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s N_VIF_COUNT_VAL:%x", buff, reg->bitfields.N_VIF_COUNT_VAL);
  sprintf(buff,"%s GENLOCK_SOURCE_SEL:%x", buff, reg->bitfields.GENLOCK_SOURCE_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SNAPSHOT_VIF_COUNT regSNAPSHOT_VIF_COUNT;

__inline void dump_SNAPSHOT_VIF_COUNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSNAPSHOT_VIF_COUNT *reg = (regSNAPSHOT_VIF_COUNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LSNAPSHOT_VIF_COUNT:%x", buff, reg->bitfields.LSNAPSHOT_VIF_COUNT);
  sprintf(buff,"%s USNAPSHOT_VIF_COUNT:%x", buff, reg->bitfields.USNAPSHOT_VIF_COUNT);
  sprintf(buff,"%s AUTO_SNAPSHOT_TAKEN_RD:%x", buff, reg->bitfields.AUTO_SNAPSHOT_TAKEN_RD);
  sprintf(buff,"%s MANUAL_SNAPSHOT_NOW:%x", buff, reg->bitfields.MANUAL_SNAPSHOT_NOW);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FP_CRTC_H_TOTAL_DISP regFP_CRTC_H_TOTAL_DISP;

__inline void dump_FP_CRTC_H_TOTAL_DISP(__in  unsigned int *dwreg, __in  char *buff)
{
  regFP_CRTC_H_TOTAL_DISP *reg = (regFP_CRTC_H_TOTAL_DISP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP_CRTC_H_TOTAL:%x", buff, reg->bitfields.FP_CRTC_H_TOTAL);
  sprintf(buff,"%s FP_CRTC_H_DISP:%x", buff, reg->bitfields.FP_CRTC_H_DISP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FP_CRTC_V_TOTAL_DISP regFP_CRTC_V_TOTAL_DISP;

__inline void dump_FP_CRTC_V_TOTAL_DISP(__in  unsigned int *dwreg, __in  char *buff)
{
  regFP_CRTC_V_TOTAL_DISP *reg = (regFP_CRTC_V_TOTAL_DISP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP_CRTC_V_TOTAL:%x", buff, reg->bitfields.FP_CRTC_V_TOTAL);
  sprintf(buff,"%s FP_CRTC_V_DISP:%x", buff, reg->bitfields.FP_CRTC_V_DISP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT_CRTC_H_SYNC_STRT_WID regCRT_CRTC_H_SYNC_STRT_WID;

__inline void dump_CRT_CRTC_H_SYNC_STRT_WID(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT_CRTC_H_SYNC_STRT_WID *reg = (regCRT_CRTC_H_SYNC_STRT_WID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRT_CRTC_H_SYNC_STRT_CHAR:%x", buff, reg->bitfields.CRT_CRTC_H_SYNC_STRT_CHAR);
  sprintf(buff,"%s CRT_CRTC_H_SYNC_WID:%x", buff, reg->bitfields.CRT_CRTC_H_SYNC_WID);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRT_CRTC_V_SYNC_STRT_WID regCRT_CRTC_V_SYNC_STRT_WID;

__inline void dump_CRT_CRTC_V_SYNC_STRT_WID(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRT_CRTC_V_SYNC_STRT_WID *reg = (regCRT_CRTC_V_SYNC_STRT_WID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRT_CRTC_V_SYNC_STRT:%x", buff, reg->bitfields.CRT_CRTC_V_SYNC_STRT);
  sprintf(buff,"%s CRT_CRTC_V_SYNC_WID:%x", buff, reg->bitfields.CRT_CRTC_V_SYNC_WID);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CUR_OFFSET regCUR_OFFSET;

__inline void dump_CUR_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCUR_OFFSET *reg = (regCUR_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CUR_OFFSET:%x", buff, reg->bitfields.CUR_OFFSET);
  sprintf(buff,"%s CUR_LOCK:%x", buff, reg->bitfields.CUR_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CUR_HORZ_VERT_POSN regCUR_HORZ_VERT_POSN;

__inline void dump_CUR_HORZ_VERT_POSN(__in  unsigned int *dwreg, __in  char *buff)
{
  regCUR_HORZ_VERT_POSN *reg = (regCUR_HORZ_VERT_POSN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CUR_VERT_POSN:%x", buff, reg->bitfields.CUR_VERT_POSN);
  sprintf(buff,"%s CUR_HORZ_POSN:%x", buff, reg->bitfields.CUR_HORZ_POSN);
  sprintf(buff,"%s CUR_LOCK:%x", buff, reg->bitfields.CUR_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CUR_HORZ_VERT_OFF regCUR_HORZ_VERT_OFF;

__inline void dump_CUR_HORZ_VERT_OFF(__in  unsigned int *dwreg, __in  char *buff)
{
  regCUR_HORZ_VERT_OFF *reg = (regCUR_HORZ_VERT_OFF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CUR_VERT_OFF:%x", buff, reg->bitfields.CUR_VERT_OFF);
  sprintf(buff,"%s CUR_HORZ_OFF:%x", buff, reg->bitfields.CUR_HORZ_OFF);
  sprintf(buff,"%s CUR_LOCK:%x", buff, reg->bitfields.CUR_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CUR_CLR0 regCUR_CLR0;

__inline void dump_CUR_CLR0(__in  unsigned int *dwreg, __in  char *buff)
{
  regCUR_CLR0 *reg = (regCUR_CLR0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CUR_CLR0_B:%x", buff, reg->bitfields.CUR_CLR0_B);
  sprintf(buff,"%s CUR_CLR0_G:%x", buff, reg->bitfields.CUR_CLR0_G);
  sprintf(buff,"%s CUR_CLR0_R:%x", buff, reg->bitfields.CUR_CLR0_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CUR_CLR1 regCUR_CLR1;

__inline void dump_CUR_CLR1(__in  unsigned int *dwreg, __in  char *buff)
{
  regCUR_CLR1 *reg = (regCUR_CLR1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CUR_CLR1_B:%x", buff, reg->bitfields.CUR_CLR1_B);
  sprintf(buff,"%s CUR_CLR1_G:%x", buff, reg->bitfields.CUR_CLR1_G);
  sprintf(buff,"%s CUR_CLR1_R:%x", buff, reg->bitfields.CUR_CLR1_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FP_HORZ_VERT_ACTIVE regFP_HORZ_VERT_ACTIVE;

__inline void dump_FP_HORZ_VERT_ACTIVE(__in  unsigned int *dwreg, __in  char *buff)
{
  regFP_HORZ_VERT_ACTIVE *reg = (regFP_HORZ_VERT_ACTIVE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP_VERT_ACTIVE_SIZE:%x", buff, reg->bitfields.FP_VERT_ACTIVE_SIZE);
  sprintf(buff,"%s FP_HORZ_ACTIVE_SIZE:%x", buff, reg->bitfields.FP_HORZ_ACTIVE_SIZE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_MORE_CNTL regCRTC_MORE_CNTL;

__inline void dump_CRTC_MORE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_MORE_CNTL *reg = (regCRTC_MORE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_HORZ_BLANK_MODE_SEL:%x", buff, reg->bitfields.CRTC_HORZ_BLANK_MODE_SEL);
  sprintf(buff,"%s CRTC_VERT_BLANK_MODE_SEL:%x", buff, reg->bitfields.CRTC_VERT_BLANK_MODE_SEL);
  sprintf(buff,"%s CRTC_AUTO_HORZ_CENTER_EN:%x", buff, reg->bitfields.CRTC_AUTO_HORZ_CENTER_EN);
  sprintf(buff,"%s CRTC_AUTO_VERT_CENTER_EN:%x", buff, reg->bitfields.CRTC_AUTO_VERT_CENTER_EN);
  sprintf(buff,"%s CRTC_H_CUTOFF_ACTIVE_EN:%x", buff, reg->bitfields.CRTC_H_CUTOFF_ACTIVE_EN);
  sprintf(buff,"%s CRTC_V_CUTOFF_ACTIVE_EN:%x", buff, reg->bitfields.CRTC_V_CUTOFF_ACTIVE_EN);
  sprintf(buff,"%s FORCE_H_EVEN_PIXEL_COUNT:%x", buff, reg->bitfields.FORCE_H_EVEN_PIXEL_COUNT);
  sprintf(buff,"%s CRTC_RST_HCOUNT:%x", buff, reg->bitfields.CRTC_RST_HCOUNT);
  sprintf(buff,"%s CRTC_RST_VCOUNT:%x", buff, reg->bitfields.CRTC_RST_VCOUNT);
  sprintf(buff,"%s HCOUNT_RST_POS:%x", buff, reg->bitfields.HCOUNT_RST_POS);
  sprintf(buff,"%s VCOUNT_RST_POS:%x", buff, reg->bitfields.VCOUNT_RST_POS);
  sprintf(buff,"%s RMX_H_FILT_COEFFICIENT:%x", buff, reg->bitfields.RMX_H_FILT_COEFFICIENT);
  sprintf(buff,"%s RMX_H_FILTER_EN:%x", buff, reg->bitfields.RMX_H_FILTER_EN);
  sprintf(buff,"%s RMX_V_FILT_COEFFICIENT:%x", buff, reg->bitfields.RMX_V_FILT_COEFFICIENT);
  sprintf(buff,"%s RMX_V_FILTER_EN:%x", buff, reg->bitfields.RMX_V_FILTER_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_EXT_CNTL regDAC_EXT_CNTL;

__inline void dump_DAC_EXT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_EXT_CNTL *reg = (regDAC_EXT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC2_FORCE_BLANK_OFF_EN:%x", buff, reg->bitfields.DAC2_FORCE_BLANK_OFF_EN);
  sprintf(buff,"%s DAC2_FORCE_DATA_EN:%x", buff, reg->bitfields.DAC2_FORCE_DATA_EN);
  sprintf(buff,"%s DAC_FORCE_BLANK_OFF_EN:%x", buff, reg->bitfields.DAC_FORCE_BLANK_OFF_EN);
  sprintf(buff,"%s DAC_FORCE_DATA_EN:%x", buff, reg->bitfields.DAC_FORCE_DATA_EN);
  sprintf(buff,"%s DAC_FORCE_DATA_SEL:%x", buff, reg->bitfields.DAC_FORCE_DATA_SEL);
  sprintf(buff,"%s DAC_FORCE_DATA:%x", buff, reg->bitfields.DAC_FORCE_DATA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250FP_GEN_CNTL regrv250FP_GEN_CNTL;

__inline void dump_rv250FP_GEN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250FP_GEN_CNTL *reg = (regrv250FP_GEN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP_ON:%x", buff, reg->bitfields.FP_ON);
  sprintf(buff,"%s FP_BLANK_EN:%x", buff, reg->bitfields.FP_BLANK_EN);
  sprintf(buff,"%s TMDS_EN:%x", buff, reg->bitfields.TMDS_EN);
  sprintf(buff,"%s PANEL_FORMAT:%x", buff, reg->bitfields.PANEL_FORMAT);
  sprintf(buff,"%s NO_OF_GREY:%x", buff, reg->bitfields.NO_OF_GREY);
  sprintf(buff,"%s FP_RST_FM:%x", buff, reg->bitfields.FP_RST_FM);
  sprintf(buff,"%s FP_EN_TMDS:%x", buff, reg->bitfields.FP_EN_TMDS);
  sprintf(buff,"%s FP_DETECT_SENSE:%x", buff, reg->bitfields.FP_DETECT_SENSE);
  sprintf(buff,"%s FP_DETECT_INT_POL:%x", buff, reg->bitfields.FP_DETECT_INT_POL);
  sprintf(buff,"%s FP_DETECT_EN:%x", buff, reg->bitfields.FP_DETECT_EN);
  sprintf(buff,"%s FP_SRC_SEL:%x", buff, reg->bitfields.FP_SRC_SEL);
  sprintf(buff,"%s FP_USE_VGA_HVSYNC:%x", buff, reg->bitfields.FP_USE_VGA_HVSYNC);
  sprintf(buff,"%s FP_USE_VGA_SYNC_POLARITY:%x", buff, reg->bitfields.FP_USE_VGA_SYNC_POLARITY);
  sprintf(buff,"%s CRTC_DONT_SHADOW_VPAR:%x", buff, reg->bitfields.CRTC_DONT_SHADOW_VPAR);
  sprintf(buff,"%s CRTC_DONT_SHADOW_HEND:%x", buff, reg->bitfields.CRTC_DONT_SHADOW_HEND);
  sprintf(buff,"%s CRTC_USE_SHADOWED_VEND:%x", buff, reg->bitfields.CRTC_USE_SHADOWED_VEND);
  sprintf(buff,"%s CRTC_USE_SHADOWED_ROWCUR:%x", buff, reg->bitfields.CRTC_USE_SHADOWED_ROWCUR);
  sprintf(buff,"%s RMX_HVSYNC_CONTROL_EN:%x", buff, reg->bitfields.RMX_HVSYNC_CONTROL_EN);
  sprintf(buff,"%s DFP_SYNC_SEL:%x", buff, reg->bitfields.DFP_SYNC_SEL);
  sprintf(buff,"%s CRTC_LOCK_8DOT:%x", buff, reg->bitfields.CRTC_LOCK_8DOT);
  sprintf(buff,"%s CRT_SYNC_SEL:%x", buff, reg->bitfields.CRT_SYNC_SEL);
  sprintf(buff,"%s FP_USE_SHADOW_EN:%x", buff, reg->bitfields.FP_USE_SHADOW_EN);
  sprintf(buff,"%s DONT_RST_CHAREN:%x", buff, reg->bitfields.DONT_RST_CHAREN);
  sprintf(buff,"%s CRT_SYNC_ALT_SEL:%x", buff, reg->bitfields.CRT_SYNC_ALT_SEL);
  sprintf(buff,"%s CRTC_USE_NONSHADOW_HPARAMS_FOR_BLANK:%x", buff, reg->bitfields.CRTC_USE_NONSHADOW_HPARAMS_FOR_BLANK);
  sprintf(buff,"%s CRTC_USE_NONSHADOW_VPARAMS_FOR_BLANK:%x", buff, reg->bitfields.CRTC_USE_NONSHADOW_VPARAMS_FOR_BLANK);
  sprintf(buff,"%s CRTC_VGA_XOVERSCAN_COLOR:%x", buff, reg->bitfields.CRTC_VGA_XOVERSCAN_COLOR);
  sprintf(buff,"%s CRTC_VGA_XOVERSCAN_DIVBY2_EN:%x", buff, reg->bitfields.CRTC_VGA_XOVERSCAN_DIVBY2_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250FP2_GEN_CNTL regrv250FP2_GEN_CNTL;

__inline void dump_rv250FP2_GEN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250FP2_GEN_CNTL *reg = (regrv250FP2_GEN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP2_BLANK_EN:%x", buff, reg->bitfields.FP2_BLANK_EN);
  sprintf(buff,"%s FP2_ON:%x", buff, reg->bitfields.FP2_ON);
  sprintf(buff,"%s FP2_PANEL_FORMAT:%x", buff, reg->bitfields.FP2_PANEL_FORMAT);
  sprintf(buff,"%s FP2_NO_OF_GREY:%x", buff, reg->bitfields.FP2_NO_OF_GREY);
  sprintf(buff,"%s FP2_RST_FM:%x", buff, reg->bitfields.FP2_RST_FM);
  sprintf(buff,"%s FP2_DETECT_SENSE:%x", buff, reg->bitfields.FP2_DETECT_SENSE);
  sprintf(buff,"%s FP2_DETECT_INT_POL:%x", buff, reg->bitfields.FP2_DETECT_INT_POL);
  sprintf(buff,"%s FP2_SRC_SEL:%x", buff, reg->bitfields.FP2_SRC_SEL);
  sprintf(buff,"%s FP2_FP_POL:%x", buff, reg->bitfields.FP2_FP_POL);
  sprintf(buff,"%s FP2_LP_POL:%x", buff, reg->bitfields.FP2_LP_POL);
  sprintf(buff,"%s FP2_SCK_POL:%x", buff, reg->bitfields.FP2_SCK_POL);
  sprintf(buff,"%s FP2_LCD_CNTL:%x", buff, reg->bitfields.FP2_LCD_CNTL);
  sprintf(buff,"%s FP2_PAD_FLOP_EN:%x", buff, reg->bitfields.FP2_PAD_FLOP_EN);
  sprintf(buff,"%s FP2_CRC_EN:%x", buff, reg->bitfields.FP2_CRC_EN);
  sprintf(buff,"%s FP2_CRC_READ_EN:%x", buff, reg->bitfields.FP2_CRC_READ_EN);
  sprintf(buff,"%s DVO_EN:%x", buff, reg->bitfields.DVO_EN);
  sprintf(buff,"%s DVO_TMDS_CTL3:%x", buff, reg->bitfields.DVO_TMDS_CTL3);
  sprintf(buff,"%s DVO_RATE_SEL:%x", buff, reg->bitfields.DVO_RATE_SEL);
  sprintf(buff,"%s DVO_CLOCK_MODE:%x", buff, reg->bitfields.DVO_CLOCK_MODE);
  sprintf(buff,"%s DVO_TMDS_CTL3_SEL:%x", buff, reg->bitfields.DVO_TMDS_CTL3_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FP_HORZ_STRETCH regFP_HORZ_STRETCH;

__inline void dump_FP_HORZ_STRETCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regFP_HORZ_STRETCH *reg = (regFP_HORZ_STRETCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP_HORZ_STRETCH_RATIO:%x", buff, reg->bitfields.FP_HORZ_STRETCH_RATIO);
  sprintf(buff,"%s FP_HORZ_PANEL_SIZE:%x", buff, reg->bitfields.FP_HORZ_PANEL_SIZE);
  sprintf(buff,"%s FP_HORZ_STRETCH_EN:%x", buff, reg->bitfields.FP_HORZ_STRETCH_EN);
  sprintf(buff,"%s FP_HORZ_STRETCH_MODE:%x", buff, reg->bitfields.FP_HORZ_STRETCH_MODE);
  sprintf(buff,"%s FP_AUTO_HORZ_RATIO:%x", buff, reg->bitfields.FP_AUTO_HORZ_RATIO);
  sprintf(buff,"%s FP_LOOP_STRETCH:%x", buff, reg->bitfields.FP_LOOP_STRETCH);
  sprintf(buff,"%s RMX_AUTO_RATIO_HORZ_INC:%x", buff, reg->bitfields.RMX_AUTO_RATIO_HORZ_INC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FP_VERT_STRETCH regFP_VERT_STRETCH;

__inline void dump_FP_VERT_STRETCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regFP_VERT_STRETCH *reg = (regFP_VERT_STRETCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP_VERT_STRETCH_RATIO:%x", buff, reg->bitfields.FP_VERT_STRETCH_RATIO);
  sprintf(buff,"%s FP_VERT_PANEL_SIZE:%x", buff, reg->bitfields.FP_VERT_PANEL_SIZE);
  sprintf(buff,"%s FP_VERT_STRETCH_EN:%x", buff, reg->bitfields.FP_VERT_STRETCH_EN);
  sprintf(buff,"%s FP_VERT_STRETCH_MODE:%x", buff, reg->bitfields.FP_VERT_STRETCH_MODE);
  sprintf(buff,"%s FP_AUTO_VERT_RATIO:%x", buff, reg->bitfields.FP_AUTO_VERT_RATIO);
  sprintf(buff,"%s RMX_H_FILTER_INIT:%x", buff, reg->bitfields.RMX_H_FILTER_INIT);
  sprintf(buff,"%s RMX_V_FILTER_INIT:%x", buff, reg->bitfields.RMX_V_FILTER_INIT);
  sprintf(buff,"%s RMX_AUTO_RATIO_VERT_INC:%x", buff, reg->bitfields.RMX_AUTO_RATIO_VERT_INC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TMDS_CNTL regTMDS_CNTL;

__inline void dump_TMDS_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTMDS_CNTL *reg = (regTMDS_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TMDS_CTL0:%x", buff, reg->bitfields.TMDS_CTL0);
  sprintf(buff,"%s TMDS_CTL1:%x", buff, reg->bitfields.TMDS_CTL1);
  sprintf(buff,"%s TMDS_CTL2:%x", buff, reg->bitfields.TMDS_CTL2);
  sprintf(buff,"%s TMDS_CTL3:%x", buff, reg->bitfields.TMDS_CTL3);
  sprintf(buff,"%s TMDS_DEBUG_HSYNC:%x", buff, reg->bitfields.TMDS_DEBUG_HSYNC);
  sprintf(buff,"%s TMDS_DEBUG_VSYNC:%x", buff, reg->bitfields.TMDS_DEBUG_VSYNC);
  sprintf(buff,"%s TMDS_DEBUG_DE:%x", buff, reg->bitfields.TMDS_DEBUG_DE);
  sprintf(buff,"%s TMDS_DEBUG_EN:%x", buff, reg->bitfields.TMDS_DEBUG_EN);
  sprintf(buff,"%s TMDS_CTL_FB_SEL:%x", buff, reg->bitfields.TMDS_CTL_FB_SEL);
  sprintf(buff,"%s TMDS_CTL_FB_DEL:%x", buff, reg->bitfields.TMDS_CTL_FB_DEL);
  sprintf(buff,"%s TMDS_STEREOSYNC_CTL_SEL:%x", buff, reg->bitfields.TMDS_STEREOSYNC_CTL_SEL);
  sprintf(buff,"%s TMDS_SYNC_CHAR_EN:%x", buff, reg->bitfields.TMDS_SYNC_CHAR_EN);
  sprintf(buff,"%s TMDS_SYNC_CONT:%x", buff, reg->bitfields.TMDS_SYNC_CONT);
  sprintf(buff,"%s TMDS_DPCUM_TST:%x", buff, reg->bitfields.TMDS_DPCUM_TST);
  sprintf(buff,"%s TMDS_DPCUM_IN:%x", buff, reg->bitfields.TMDS_DPCUM_IN);
  sprintf(buff,"%s TMDS_CRC_EN:%x", buff, reg->bitfields.TMDS_CRC_EN);
  sprintf(buff,"%s TMDS_RB_SWITCH_EN:%x", buff, reg->bitfields.TMDS_RB_SWITCH_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TMDS_SYNC_CHAR_SETA regTMDS_SYNC_CHAR_SETA;

__inline void dump_TMDS_SYNC_CHAR_SETA(__in  unsigned int *dwreg, __in  char *buff)
{
  regTMDS_SYNC_CHAR_SETA *reg = (regTMDS_SYNC_CHAR_SETA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TMDS_SYNC_CHAR0:%x", buff, reg->bitfields.TMDS_SYNC_CHAR0);
  sprintf(buff,"%s TMDS_SYNC_CHAR1:%x", buff, reg->bitfields.TMDS_SYNC_CHAR1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TMDS_SYNC_CHAR_SETB regTMDS_SYNC_CHAR_SETB;

__inline void dump_TMDS_SYNC_CHAR_SETB(__in  unsigned int *dwreg, __in  char *buff)
{
  regTMDS_SYNC_CHAR_SETB *reg = (regTMDS_SYNC_CHAR_SETB *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TMDS_SYNC_CHAR2:%x", buff, reg->bitfields.TMDS_SYNC_CHAR2);
  sprintf(buff,"%s TMDS_SYNC_CHAR3:%x", buff, reg->bitfields.TMDS_SYNC_CHAR3);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TMDS_CRC regTMDS_CRC;

__inline void dump_TMDS_CRC(__in  unsigned int *dwreg, __in  char *buff)
{
  regTMDS_CRC *reg = (regTMDS_CRC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TMDS_TRANSMITTER_CNTL regTMDS_TRANSMITTER_CNTL;

__inline void dump_TMDS_TRANSMITTER_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTMDS_TRANSMITTER_CNTL *reg = (regTMDS_TRANSMITTER_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TMDS_PLLEN:%x", buff, reg->bitfields.TMDS_PLLEN);
  sprintf(buff,"%s TMDS_PLLRST:%x", buff, reg->bitfields.TMDS_PLLRST);
  sprintf(buff,"%s TMDS_MODE_SEL:%x", buff, reg->bitfields.TMDS_MODE_SEL);
  sprintf(buff,"%s TMDS_REGSEL:%x", buff, reg->bitfields.TMDS_REGSEL);
  sprintf(buff,"%s TMDS_HALF_CLK_RST:%x", buff, reg->bitfields.TMDS_HALF_CLK_RST);
  sprintf(buff,"%s TMDS_RAN_PAT_RST:%x", buff, reg->bitfields.TMDS_RAN_PAT_RST);
  sprintf(buff,"%s TMDS_TSTPIX:%x", buff, reg->bitfields.TMDS_TSTPIX);
  sprintf(buff,"%s TMDS_REG:%x", buff, reg->bitfields.TMDS_REG);
  sprintf(buff,"%s ICHCSEL:%x", buff, reg->bitfields.ICHCSEL);
  sprintf(buff,"%s ITCLKSEL:%x", buff, reg->bitfields.ITCLKSEL);
  sprintf(buff,"%s TMDS_RAN_PAT_SEL:%x", buff, reg->bitfields.TMDS_RAN_PAT_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TMDS_PLL_CNTL regTMDS_PLL_CNTL;

__inline void dump_TMDS_PLL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTMDS_PLL_CNTL *reg = (regTMDS_PLL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TMDS_PLLPCP:%x", buff, reg->bitfields.TMDS_PLLPCP);
  sprintf(buff,"%s TMDS_PLLPVG:%x", buff, reg->bitfields.TMDS_PLLPVG);
  sprintf(buff,"%s TMDS_PLLPDC:%x", buff, reg->bitfields.TMDS_PLLPDC);
  sprintf(buff,"%s TMDS_PLLPVS:%x", buff, reg->bitfields.TMDS_PLLPVS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TMDS_PATTERN_GEN_SEED regTMDS_PATTERN_GEN_SEED;

__inline void dump_TMDS_PATTERN_GEN_SEED(__in  unsigned int *dwreg, __in  char *buff)
{
  regTMDS_PATTERN_GEN_SEED *reg = (regTMDS_PATTERN_GEN_SEED *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ICON_OFFSET regICON_OFFSET;

__inline void dump_ICON_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regICON_OFFSET *reg = (regICON_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ICON_OFFSET:%x", buff, reg->bitfields.ICON_OFFSET);
  sprintf(buff,"%s BLANK_SCREEN1:%x", buff, reg->bitfields.BLANK_SCREEN1);
  sprintf(buff,"%s DONT_DS_ICON:%x", buff, reg->bitfields.DONT_DS_ICON);
  sprintf(buff,"%s ICON_LOCK:%x", buff, reg->bitfields.ICON_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ICON_HORZ_VERT_POSN regICON_HORZ_VERT_POSN;

__inline void dump_ICON_HORZ_VERT_POSN(__in  unsigned int *dwreg, __in  char *buff)
{
  regICON_HORZ_VERT_POSN *reg = (regICON_HORZ_VERT_POSN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ICON_VERT_POSN:%x", buff, reg->bitfields.ICON_VERT_POSN);
  sprintf(buff,"%s ICON_HORZ_POSN:%x", buff, reg->bitfields.ICON_HORZ_POSN);
  sprintf(buff,"%s ICON_LOCK:%x", buff, reg->bitfields.ICON_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ICON_HORZ_VERT_OFF regICON_HORZ_VERT_OFF;

__inline void dump_ICON_HORZ_VERT_OFF(__in  unsigned int *dwreg, __in  char *buff)
{
  regICON_HORZ_VERT_OFF *reg = (regICON_HORZ_VERT_OFF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ICON_VERT_OFF:%x", buff, reg->bitfields.ICON_VERT_OFF);
  sprintf(buff,"%s ICON_HORZ_OFF:%x", buff, reg->bitfields.ICON_HORZ_OFF);
  sprintf(buff,"%s ICON_LOCK:%x", buff, reg->bitfields.ICON_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ICON_CLR0 regICON_CLR0;

__inline void dump_ICON_CLR0(__in  unsigned int *dwreg, __in  char *buff)
{
  regICON_CLR0 *reg = (regICON_CLR0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ICON_CLR0_B:%x", buff, reg->bitfields.ICON_CLR0_B);
  sprintf(buff,"%s ICON_CLR0_G:%x", buff, reg->bitfields.ICON_CLR0_G);
  sprintf(buff,"%s ICON_CLR0_R:%x", buff, reg->bitfields.ICON_CLR0_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ICON_CLR1 regICON_CLR1;

__inline void dump_ICON_CLR1(__in  unsigned int *dwreg, __in  char *buff)
{
  regICON_CLR1 *reg = (regICON_CLR1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ICON_CLR1_B:%x", buff, reg->bitfields.ICON_CLR1_B);
  sprintf(buff,"%s ICON_CLR1_G:%x", buff, reg->bitfields.ICON_CLR1_G);
  sprintf(buff,"%s ICON_CLR1_R:%x", buff, reg->bitfields.ICON_CLR1_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FP_H_SYNC_STRT_WID regFP_H_SYNC_STRT_WID;

__inline void dump_FP_H_SYNC_STRT_WID(__in  unsigned int *dwreg, __in  char *buff)
{
  regFP_H_SYNC_STRT_WID *reg = (regFP_H_SYNC_STRT_WID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP_H_SYNC_STRT_PIX:%x", buff, reg->bitfields.FP_H_SYNC_STRT_PIX);
  sprintf(buff,"%s FP_H_SYNC_STRT_CHAR:%x", buff, reg->bitfields.FP_H_SYNC_STRT_CHAR);
  sprintf(buff,"%s FP_H_SYNC_WID:%x", buff, reg->bitfields.FP_H_SYNC_WID);
  sprintf(buff,"%s FP_H_SYNC_POL:%x", buff, reg->bitfields.FP_H_SYNC_POL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FP_V_SYNC_STRT_WID regFP_V_SYNC_STRT_WID;

__inline void dump_FP_V_SYNC_STRT_WID(__in  unsigned int *dwreg, __in  char *buff)
{
  regFP_V_SYNC_STRT_WID *reg = (regFP_V_SYNC_STRT_WID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP_V_SYNC_STRT:%x", buff, reg->bitfields.FP_V_SYNC_STRT);
  sprintf(buff,"%s FP_V_SYNC_WID:%x", buff, reg->bitfields.FP_V_SYNC_WID);
  sprintf(buff,"%s FP_V_SYNC_POL:%x", buff, reg->bitfields.FP_V_SYNC_POL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union LVDS_DIGTMDS_CRC regLVDS_DIGTMDS_CRC;

__inline void dump_LVDS_DIGTMDS_CRC(__in  unsigned int *dwreg, __in  char *buff)
{
  regLVDS_DIGTMDS_CRC *reg = (regLVDS_DIGTMDS_CRC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LVDS_CRC_SIG_RGB:%x", buff, reg->bitfields.LVDS_CRC_SIG_RGB);
  sprintf(buff,"%s LVDS_CRC_SIG_C:%x", buff, reg->bitfields.LVDS_CRC_SIG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union LVDS_GEN_CNTL regLVDS_GEN_CNTL;

__inline void dump_LVDS_GEN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regLVDS_GEN_CNTL *reg = (regLVDS_GEN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LVDS_ON:%x", buff, reg->bitfields.LVDS_ON);
  sprintf(buff,"%s LVDS_DISPLAY_DIS:%x", buff, reg->bitfields.LVDS_DISPLAY_DIS);
  sprintf(buff,"%s LVDS_PANEL_TYPE:%x", buff, reg->bitfields.LVDS_PANEL_TYPE);
  sprintf(buff,"%s LVDS_PANEL_FORMAT:%x", buff, reg->bitfields.LVDS_PANEL_FORMAT);
  sprintf(buff,"%s LVDS_NO_OF_GREY:%x", buff, reg->bitfields.LVDS_NO_OF_GREY);
  sprintf(buff,"%s LVDS_RST_FM:%x", buff, reg->bitfields.LVDS_RST_FM);
  sprintf(buff,"%s LVDS_EN:%x", buff, reg->bitfields.LVDS_EN);
  sprintf(buff,"%s LVDS_BL_MOD_LEVEL:%x", buff, reg->bitfields.LVDS_BL_MOD_LEVEL);
  sprintf(buff,"%s LVDS_BL_MOD_EN:%x", buff, reg->bitfields.LVDS_BL_MOD_EN);
  sprintf(buff,"%s LVDS_BL_CLK_SEL:%x", buff, reg->bitfields.LVDS_BL_CLK_SEL);
  sprintf(buff,"%s LVDS_DIGON:%x", buff, reg->bitfields.LVDS_DIGON);
  sprintf(buff,"%s LVDS_BLON:%x", buff, reg->bitfields.LVDS_BLON);
  sprintf(buff,"%s LVDS_FP_POL:%x", buff, reg->bitfields.LVDS_FP_POL);
  sprintf(buff,"%s LVDS_LP_POL:%x", buff, reg->bitfields.LVDS_LP_POL);
  sprintf(buff,"%s LVDS_DTM_POL:%x", buff, reg->bitfields.LVDS_DTM_POL);
  sprintf(buff,"%s LVDS_SRC_SEL:%x", buff, reg->bitfields.LVDS_SRC_SEL);
  sprintf(buff,"%s LVDS_RESERVED_BITS:%x", buff, reg->bitfields.LVDS_RESERVED_BITS);
  sprintf(buff,"%s LVDS_FPDI_EN:%x", buff, reg->bitfields.LVDS_FPDI_EN);
  sprintf(buff,"%s LVDS_HSYNC_DELAY:%x", buff, reg->bitfields.LVDS_HSYNC_DELAY);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union LVDS_PLL_CNTL regLVDS_PLL_CNTL;

__inline void dump_LVDS_PLL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regLVDS_PLL_CNTL *reg = (regLVDS_PLL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LVDS_CRC_DE_ONLY:%x", buff, reg->bitfields.LVDS_CRC_DE_ONLY);
  sprintf(buff,"%s LVDS_LVPVS:%x", buff, reg->bitfields.LVDS_LVPVS);
  sprintf(buff,"%s LVDS_LPPVG:%x", buff, reg->bitfields.LVDS_LPPVG);
  sprintf(buff,"%s LVDS_LPPDC:%x", buff, reg->bitfields.LVDS_LPPDC);
  sprintf(buff,"%s LVDS_LPPCP:%x", buff, reg->bitfields.LVDS_LPPCP);
  sprintf(buff,"%s LVDS_SS_DISP_EN:%x", buff, reg->bitfields.LVDS_SS_DISP_EN);
  sprintf(buff,"%s LVDS_PRG:%x", buff, reg->bitfields.LVDS_PRG);
  sprintf(buff,"%s LVDS_PLL_EN:%x", buff, reg->bitfields.LVDS_PLL_EN);
  sprintf(buff,"%s LVDS_PLL_RESET:%x", buff, reg->bitfields.LVDS_PLL_RESET);
  sprintf(buff,"%s LVDS_PREAMPH_EN:%x", buff, reg->bitfields.LVDS_PREAMPH_EN);
  sprintf(buff,"%s LVDS_CRC_EN:%x", buff, reg->bitfields.LVDS_CRC_EN);
  sprintf(buff,"%s LVDS_CRC_UP24:%x", buff, reg->bitfields.LVDS_CRC_UP24);
  sprintf(buff,"%s LVDS_TEST_DATA_OUT:%x", buff, reg->bitfields.LVDS_TEST_DATA_OUT);
  sprintf(buff,"%s LVDS_TEST_DATA_SEL:%x", buff, reg->bitfields.LVDS_TEST_DATA_SEL);
  sprintf(buff,"%s LCDENG_TEST_MODE:%x", buff, reg->bitfields.LCDENG_TEST_MODE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250AUX_WINDOW_HORZ_CNTL regrv250AUX_WINDOW_HORZ_CNTL;

__inline void dump_rv250AUX_WINDOW_HORZ_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250AUX_WINDOW_HORZ_CNTL *reg = (regrv250AUX_WINDOW_HORZ_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s AUX_WIN_HORZ_START:%x", buff, reg->bitfields.AUX_WIN_HORZ_START);
  sprintf(buff,"%s AUX_WIN_HORZ_END:%x", buff, reg->bitfields.AUX_WIN_HORZ_END);
  sprintf(buff,"%s AUX_WIN_EN:%x", buff, reg->bitfields.AUX_WIN_EN);
  sprintf(buff,"%s AUX_WIN_OUT_DELAY:%x", buff, reg->bitfields.AUX_WIN_OUT_DELAY);
  sprintf(buff,"%s RESERVED:%x", buff, reg->bitfields.RESERVED);
  sprintf(buff,"%s AUX_WIN_LOCK:%x", buff, reg->bitfields.AUX_WIN_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AUX_WINDOW_VERT_CNTL regAUX_WINDOW_VERT_CNTL;

__inline void dump_AUX_WINDOW_VERT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regAUX_WINDOW_VERT_CNTL *reg = (regAUX_WINDOW_VERT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s AUX_WIN_VERT_START:%x", buff, reg->bitfields.AUX_WIN_VERT_START);
  sprintf(buff,"%s AUX_WIN_VERT_END:%x", buff, reg->bitfields.AUX_WIN_VERT_END);
  sprintf(buff,"%s AUX_WINDOW_POL:%x", buff, reg->bitfields.AUX_WINDOW_POL);
  sprintf(buff,"%s AUX_WIN_LOCK:%x", buff, reg->bitfields.AUX_WIN_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250DVI_I2C_CNTL_0 regrv250DVI_I2C_CNTL_0;

__inline void dump_rv250DVI_I2C_CNTL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250DVI_I2C_CNTL_0 *reg = (regrv250DVI_I2C_CNTL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s I2C_DONE:%x", buff, reg->bitfields.I2C_DONE);
  sprintf(buff,"%s I2C_NACK:%x", buff, reg->bitfields.I2C_NACK);
  sprintf(buff,"%s I2C_HALT:%x", buff, reg->bitfields.I2C_HALT);
  sprintf(buff,"%s DVI_I2C_PIN_SEL:%x", buff, reg->bitfields.DVI_I2C_PIN_SEL);
  sprintf(buff,"%s I2C_SOFT_RST:%x", buff, reg->bitfields.I2C_SOFT_RST);
  sprintf(buff,"%s I2C_DRIVE_EN:%x", buff, reg->bitfields.I2C_DRIVE_EN);
  sprintf(buff,"%s I2C_DRIVE_SEL:%x", buff, reg->bitfields.I2C_DRIVE_SEL);
  sprintf(buff,"%s I2C_START:%x", buff, reg->bitfields.I2C_START);
  sprintf(buff,"%s I2C_STOP:%x", buff, reg->bitfields.I2C_STOP);
  sprintf(buff,"%s I2C_RECEIVE:%x", buff, reg->bitfields.I2C_RECEIVE);
  sprintf(buff,"%s I2C_ABORT:%x", buff, reg->bitfields.I2C_ABORT);
  sprintf(buff,"%s I2C_GO:%x", buff, reg->bitfields.I2C_GO);
  sprintf(buff,"%s SW_WANTS_TO_USE_DVI_I2C:%x", buff, reg->bitfields.SW_WANTS_TO_USE_DVI_I2C);
  sprintf(buff,"%s SW_DONE_USING_DVI_I2C:%x", buff, reg->bitfields.SW_DONE_USING_DVI_I2C);
  sprintf(buff,"%s ABORT_HW_DVI_I2C:%x", buff, reg->bitfields.ABORT_HW_DVI_I2C);
  sprintf(buff,"%s I2C_PRESCALE:%x", buff, reg->bitfields.I2C_PRESCALE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250DVI_I2C_CNTL_1 regrv250DVI_I2C_CNTL_1;

__inline void dump_rv250DVI_I2C_CNTL_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250DVI_I2C_CNTL_1 *reg = (regrv250DVI_I2C_CNTL_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s I2C_DATA_COUNT:%x", buff, reg->bitfields.I2C_DATA_COUNT);
  sprintf(buff,"%s I2C_ADDR_COUNT:%x", buff, reg->bitfields.I2C_ADDR_COUNT);
  sprintf(buff,"%s I2C_SEL:%x", buff, reg->bitfields.I2C_SEL);
  sprintf(buff,"%s I2C_EN:%x", buff, reg->bitfields.I2C_EN);
  sprintf(buff,"%s I2C_TIME_LIMIT:%x", buff, reg->bitfields.I2C_TIME_LIMIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DVI_I2C_DATA regDVI_I2C_DATA;

__inline void dump_DVI_I2C_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regDVI_I2C_DATA *reg = (regDVI_I2C_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union LVDS_SS_GEN_CNTL regLVDS_SS_GEN_CNTL;

__inline void dump_LVDS_SS_GEN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regLVDS_SS_GEN_CNTL *reg = (regLVDS_SS_GEN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SS_EXT_EN:%x", buff, reg->bitfields.SS_EXT_EN);
  sprintf(buff,"%s SS_EXT_SEL:%x", buff, reg->bitfields.SS_EXT_SEL);
  sprintf(buff,"%s SS_BUF_EN:%x", buff, reg->bitfields.SS_BUF_EN);
  sprintf(buff,"%s SS_BUF_OFFSET:%x", buff, reg->bitfields.SS_BUF_OFFSET);
  sprintf(buff,"%s SS_BUF_RESET_EN:%x", buff, reg->bitfields.SS_BUF_RESET_EN);
  sprintf(buff,"%s SS_BUF_STRENGTH:%x", buff, reg->bitfields.SS_BUF_STRENGTH);
  sprintf(buff,"%s LVDSPWR_STRENGTH:%x", buff, reg->bitfields.LVDSPWR_STRENGTH);
  sprintf(buff,"%s LVDS_PWRSEQ_DELAY1:%x", buff, reg->bitfields.LVDS_PWRSEQ_DELAY1);
  sprintf(buff,"%s LVDS_PWRSEQ_DELAY2:%x", buff, reg->bitfields.LVDS_PWRSEQ_DELAY2);
  sprintf(buff,"%s LVDS_CLK_PATTERN:%x", buff, reg->bitfields.LVDS_CLK_PATTERN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRPH_BUFFER_CNTL_M6 regGRPH_BUFFER_CNTL_M6;

__inline void dump_GRPH_BUFFER_CNTL_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRPH_BUFFER_CNTL_M6 *reg = (regGRPH_BUFFER_CNTL_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GRPH_START_REQ:%x", buff, reg->bitfields.GRPH_START_REQ);
  sprintf(buff,"%s GRPH_STOP_REQ:%x", buff, reg->bitfields.GRPH_STOP_REQ);
  sprintf(buff,"%s GRPH_CRITICAL_POINT:%x", buff, reg->bitfields.GRPH_CRITICAL_POINT);
  sprintf(buff,"%s GRPH_CRITICAL_CNTL:%x", buff, reg->bitfields.GRPH_CRITICAL_CNTL);
  sprintf(buff,"%s GRPH_BUFFER_SIZE:%x", buff, reg->bitfields.GRPH_BUFFER_SIZE);
  sprintf(buff,"%s GRPH_CRITICAL_AT_SOF:%x", buff, reg->bitfields.GRPH_CRITICAL_AT_SOF);
  sprintf(buff,"%s GRPH_STOP_CNTL:%x", buff, reg->bitfields.GRPH_STOP_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VGA_BUFFER_CNTL regVGA_BUFFER_CNTL;

__inline void dump_VGA_BUFFER_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regVGA_BUFFER_CNTL *reg = (regVGA_BUFFER_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VGA_START_REQ:%x", buff, reg->bitfields.VGA_START_REQ);
  sprintf(buff,"%s VGA_STOP_REQ:%x", buff, reg->bitfields.VGA_STOP_REQ);
  sprintf(buff,"%s VGA_CRITICAL_POINT:%x", buff, reg->bitfields.VGA_CRITICAL_POINT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_H_TOTAL_DISP regCRTC2_H_TOTAL_DISP;

__inline void dump_CRTC2_H_TOTAL_DISP(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_H_TOTAL_DISP *reg = (regCRTC2_H_TOTAL_DISP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_H_TOTAL:%x", buff, reg->bitfields.CRTC2_H_TOTAL);
  sprintf(buff,"%s CRTC2_H_DISP:%x", buff, reg->bitfields.CRTC2_H_DISP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_H_SYNC_STRT_WID regCRTC2_H_SYNC_STRT_WID;

__inline void dump_CRTC2_H_SYNC_STRT_WID(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_H_SYNC_STRT_WID *reg = (regCRTC2_H_SYNC_STRT_WID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_H_SYNC_STRT_PIX:%x", buff, reg->bitfields.CRTC2_H_SYNC_STRT_PIX);
  sprintf(buff,"%s CRTC2_H_SYNC_STRT_CHAR:%x", buff, reg->bitfields.CRTC2_H_SYNC_STRT_CHAR);
  sprintf(buff,"%s CRTC2_H_SYNC_WID:%x", buff, reg->bitfields.CRTC2_H_SYNC_WID);
  sprintf(buff,"%s CRTC2_H_SYNC_POL:%x", buff, reg->bitfields.CRTC2_H_SYNC_POL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_V_TOTAL_DISP regCRTC2_V_TOTAL_DISP;

__inline void dump_CRTC2_V_TOTAL_DISP(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_V_TOTAL_DISP *reg = (regCRTC2_V_TOTAL_DISP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_V_TOTAL:%x", buff, reg->bitfields.CRTC2_V_TOTAL);
  sprintf(buff,"%s CRTC2_V_DISP:%x", buff, reg->bitfields.CRTC2_V_DISP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_V_SYNC_STRT_WID regCRTC2_V_SYNC_STRT_WID;

__inline void dump_CRTC2_V_SYNC_STRT_WID(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_V_SYNC_STRT_WID *reg = (regCRTC2_V_SYNC_STRT_WID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_V_SYNC_STRT:%x", buff, reg->bitfields.CRTC2_V_SYNC_STRT);
  sprintf(buff,"%s CRTC2_V_SYNC_WID:%x", buff, reg->bitfields.CRTC2_V_SYNC_WID);
  sprintf(buff,"%s CRTC2_V_SYNC_POL:%x", buff, reg->bitfields.CRTC2_V_SYNC_POL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_VLINE_CRNT_VLINE regCRTC2_VLINE_CRNT_VLINE;

__inline void dump_CRTC2_VLINE_CRNT_VLINE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_VLINE_CRNT_VLINE *reg = (regCRTC2_VLINE_CRNT_VLINE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_VLINE:%x", buff, reg->bitfields.CRTC2_VLINE);
  sprintf(buff,"%s CRTC2_CRNT_VLINE:%x", buff, reg->bitfields.CRTC2_CRNT_VLINE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_CRNT_FRAME regCRTC2_CRNT_FRAME;

__inline void dump_CRTC2_CRNT_FRAME(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_CRNT_FRAME *reg = (regCRTC2_CRNT_FRAME *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_GUI_TRIG_VLINE regCRTC2_GUI_TRIG_VLINE;

__inline void dump_CRTC2_GUI_TRIG_VLINE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_GUI_TRIG_VLINE *reg = (regCRTC2_GUI_TRIG_VLINE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_GUI_TRIG_VLINE_START:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_VLINE_START);
  sprintf(buff,"%s CRTC2_GUI_TRIG_VLINE_INV:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_VLINE_INV);
  sprintf(buff,"%s CRTC2_GUI_TRIG_VLINE_END:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_VLINE_END);
  sprintf(buff,"%s CRTC2_GUI_TRIG_VLINE_STALL:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_VLINE_STALL);
  sprintf(buff,"%s CRTC2_GUI_TRIG_VLINE:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_VLINE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_DEBUG regCRTC2_DEBUG;

__inline void dump_CRTC2_DEBUG(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_DEBUG *reg = (regCRTC2_DEBUG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_GUI_TRIG_BYPASS_EN:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_BYPASS_EN);
  sprintf(buff,"%s CRTC2_GUI_TRIG_VLINE_BYPASS:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_VLINE_BYPASS);
  sprintf(buff,"%s CRTC2_GUI_TRIG_OFFSET_BYPASS:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_OFFSET_BYPASS);
  sprintf(buff,"%s CRTC2_GUI_TRIG_PITCH_ADD_BYPASS:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_PITCH_ADD_BYPASS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_OFFSET regCRTC2_OFFSET;

__inline void dump_CRTC2_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_OFFSET *reg = (regCRTC2_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_OFFSET:%x", buff, reg->bitfields.CRTC2_OFFSET);
  sprintf(buff,"%s CRTC2_GUI_TRIG_OFFSET:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_OFFSET);
  sprintf(buff,"%s CRTC2_OFFSET_LOCK:%x", buff, reg->bitfields.CRTC2_OFFSET_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OVR2_CLR regOVR2_CLR;

__inline void dump_OVR2_CLR(__in  unsigned int *dwreg, __in  char *buff)
{
  regOVR2_CLR *reg = (regOVR2_CLR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OVR2_CLR_B:%x", buff, reg->bitfields.OVR2_CLR_B);
  sprintf(buff,"%s OVR2_CLR_G:%x", buff, reg->bitfields.OVR2_CLR_G);
  sprintf(buff,"%s OVR2_CLR_R:%x", buff, reg->bitfields.OVR2_CLR_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OVR2_WID_LEFT_RIGHT regOVR2_WID_LEFT_RIGHT;

__inline void dump_OVR2_WID_LEFT_RIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regOVR2_WID_LEFT_RIGHT *reg = (regOVR2_WID_LEFT_RIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OVR2_WID_RIGHT:%x", buff, reg->bitfields.OVR2_WID_RIGHT);
  sprintf(buff,"%s OVR2_WID_LEFT:%x", buff, reg->bitfields.OVR2_WID_LEFT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OVR2_WID_TOP_BOTTOM regOVR2_WID_TOP_BOTTOM;

__inline void dump_OVR2_WID_TOP_BOTTOM(__in  unsigned int *dwreg, __in  char *buff)
{
  regOVR2_WID_TOP_BOTTOM *reg = (regOVR2_WID_TOP_BOTTOM *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OVR2_WID_BOTTOM:%x", buff, reg->bitfields.OVR2_WID_BOTTOM);
  sprintf(buff,"%s OVR2_WID_TOP:%x", buff, reg->bitfields.OVR2_WID_TOP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_DISPLAY_BASE_ADDR regCRTC2_DISPLAY_BASE_ADDR;

__inline void dump_CRTC2_DISPLAY_BASE_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_DISPLAY_BASE_ADDR *reg = (regCRTC2_DISPLAY_BASE_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SNAPSHOT2_VH_COUNTS regSNAPSHOT2_VH_COUNTS;

__inline void dump_SNAPSHOT2_VH_COUNTS(__in  unsigned int *dwreg, __in  char *buff)
{
  regSNAPSHOT2_VH_COUNTS *reg = (regSNAPSHOT2_VH_COUNTS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SNAPSHOT2_HCOUNT:%x", buff, reg->bitfields.SNAPSHOT2_HCOUNT);
  sprintf(buff,"%s SNAPSHOT2_VCOUNT:%x", buff, reg->bitfields.SNAPSHOT2_VCOUNT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SNAPSHOT2_F_COUNT regSNAPSHOT2_F_COUNT;

__inline void dump_SNAPSHOT2_F_COUNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSNAPSHOT2_F_COUNT *reg = (regSNAPSHOT2_F_COUNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union N_VIF2_COUNT regN_VIF2_COUNT;

__inline void dump_N_VIF2_COUNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regN_VIF2_COUNT *reg = (regN_VIF2_COUNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s N_VIF2_COUNT_VAL:%x", buff, reg->bitfields.N_VIF2_COUNT_VAL);
  sprintf(buff,"%s GENLOCK2_SOURCE_SEL:%x", buff, reg->bitfields.GENLOCK2_SOURCE_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SNAPSHOT2_VIF_COUNT regSNAPSHOT2_VIF_COUNT;

__inline void dump_SNAPSHOT2_VIF_COUNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSNAPSHOT2_VIF_COUNT *reg = (regSNAPSHOT2_VIF_COUNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LSNAPSHOT2_VIF_COUNT:%x", buff, reg->bitfields.LSNAPSHOT2_VIF_COUNT);
  sprintf(buff,"%s USNAPSHOT2_VIF_COUNT:%x", buff, reg->bitfields.USNAPSHOT2_VIF_COUNT);
  sprintf(buff,"%s AUTO_SNAPSHOT2_TAKEN_RD:%x", buff, reg->bitfields.AUTO_SNAPSHOT2_TAKEN_RD);
  sprintf(buff,"%s MANUAL_SNAPSHOT2_NOW:%x", buff, reg->bitfields.MANUAL_SNAPSHOT2_NOW);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CUR2_OFFSET regCUR2_OFFSET;

__inline void dump_CUR2_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCUR2_OFFSET *reg = (regCUR2_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CUR2_OFFSET:%x", buff, reg->bitfields.CUR2_OFFSET);
  sprintf(buff,"%s CUR2_LOCK:%x", buff, reg->bitfields.CUR2_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CUR2_HORZ_VERT_POSN regCUR2_HORZ_VERT_POSN;

__inline void dump_CUR2_HORZ_VERT_POSN(__in  unsigned int *dwreg, __in  char *buff)
{
  regCUR2_HORZ_VERT_POSN *reg = (regCUR2_HORZ_VERT_POSN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CUR2_VERT_POSN:%x", buff, reg->bitfields.CUR2_VERT_POSN);
  sprintf(buff,"%s CUR2_HORZ_POSN:%x", buff, reg->bitfields.CUR2_HORZ_POSN);
  sprintf(buff,"%s CUR2_LOCK:%x", buff, reg->bitfields.CUR2_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CUR2_HORZ_VERT_OFF regCUR2_HORZ_VERT_OFF;

__inline void dump_CUR2_HORZ_VERT_OFF(__in  unsigned int *dwreg, __in  char *buff)
{
  regCUR2_HORZ_VERT_OFF *reg = (regCUR2_HORZ_VERT_OFF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CUR2_VERT_OFF:%x", buff, reg->bitfields.CUR2_VERT_OFF);
  sprintf(buff,"%s CUR2_HORZ_OFF:%x", buff, reg->bitfields.CUR2_HORZ_OFF);
  sprintf(buff,"%s CUR2_LOCK:%x", buff, reg->bitfields.CUR2_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CUR2_CLR0 regCUR2_CLR0;

__inline void dump_CUR2_CLR0(__in  unsigned int *dwreg, __in  char *buff)
{
  regCUR2_CLR0 *reg = (regCUR2_CLR0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CUR2_CLR0_B:%x", buff, reg->bitfields.CUR2_CLR0_B);
  sprintf(buff,"%s CUR2_CLR0_G:%x", buff, reg->bitfields.CUR2_CLR0_G);
  sprintf(buff,"%s CUR2_CLR0_R:%x", buff, reg->bitfields.CUR2_CLR0_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CUR2_CLR1 regCUR2_CLR1;

__inline void dump_CUR2_CLR1(__in  unsigned int *dwreg, __in  char *buff)
{
  regCUR2_CLR1 *reg = (regCUR2_CLR1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CUR2_CLR1_B:%x", buff, reg->bitfields.CUR2_CLR1_B);
  sprintf(buff,"%s CUR2_CLR1_G:%x", buff, reg->bitfields.CUR2_CLR1_G);
  sprintf(buff,"%s CUR2_CLR1_R:%x", buff, reg->bitfields.CUR2_CLR1_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FP_H2_SYNC_STRT_WID regFP_H2_SYNC_STRT_WID;

__inline void dump_FP_H2_SYNC_STRT_WID(__in  unsigned int *dwreg, __in  char *buff)
{
  regFP_H2_SYNC_STRT_WID *reg = (regFP_H2_SYNC_STRT_WID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP_H2_SYNC_STRT_PIX:%x", buff, reg->bitfields.FP_H2_SYNC_STRT_PIX);
  sprintf(buff,"%s FP_H2_SYNC_STRT_CHAR:%x", buff, reg->bitfields.FP_H2_SYNC_STRT_CHAR);
  sprintf(buff,"%s FP_H2_SYNC_WID:%x", buff, reg->bitfields.FP_H2_SYNC_WID);
  sprintf(buff,"%s FP_H2_SYNC_POL:%x", buff, reg->bitfields.FP_H2_SYNC_POL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FP_V2_SYNC_STRT_WID regFP_V2_SYNC_STRT_WID;

__inline void dump_FP_V2_SYNC_STRT_WID(__in  unsigned int *dwreg, __in  char *buff)
{
  regFP_V2_SYNC_STRT_WID *reg = (regFP_V2_SYNC_STRT_WID *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP_V2_SYNC_STRT:%x", buff, reg->bitfields.FP_V2_SYNC_STRT);
  sprintf(buff,"%s FP_V2_SYNC_WID:%x", buff, reg->bitfields.FP_V2_SYNC_WID);
  sprintf(buff,"%s FP_V2_SYNC_POL:%x", buff, reg->bitfields.FP_V2_SYNC_POL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ICON2_OFFSET regICON2_OFFSET;

__inline void dump_ICON2_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regICON2_OFFSET *reg = (regICON2_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ICON2_OFFSET:%x", buff, reg->bitfields.ICON2_OFFSET);
  sprintf(buff,"%s BLANK_SCREEN2:%x", buff, reg->bitfields.BLANK_SCREEN2);
  sprintf(buff,"%s DONT_DS_ICON2:%x", buff, reg->bitfields.DONT_DS_ICON2);
  sprintf(buff,"%s ICON2_LOCK:%x", buff, reg->bitfields.ICON2_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ICON2_HORZ_VERT_POSN regICON2_HORZ_VERT_POSN;

__inline void dump_ICON2_HORZ_VERT_POSN(__in  unsigned int *dwreg, __in  char *buff)
{
  regICON2_HORZ_VERT_POSN *reg = (regICON2_HORZ_VERT_POSN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ICON2_VERT_POSN:%x", buff, reg->bitfields.ICON2_VERT_POSN);
  sprintf(buff,"%s ICON2_HORZ_POSN:%x", buff, reg->bitfields.ICON2_HORZ_POSN);
  sprintf(buff,"%s ICON2_LOCK:%x", buff, reg->bitfields.ICON2_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ICON2_HORZ_VERT_OFF regICON2_HORZ_VERT_OFF;

__inline void dump_ICON2_HORZ_VERT_OFF(__in  unsigned int *dwreg, __in  char *buff)
{
  regICON2_HORZ_VERT_OFF *reg = (regICON2_HORZ_VERT_OFF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ICON2_VERT_OFF:%x", buff, reg->bitfields.ICON2_VERT_OFF);
  sprintf(buff,"%s ICON2_HORZ_OFF:%x", buff, reg->bitfields.ICON2_HORZ_OFF);
  sprintf(buff,"%s ICON2_LOCK:%x", buff, reg->bitfields.ICON2_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ICON2_CLR0 regICON2_CLR0;

__inline void dump_ICON2_CLR0(__in  unsigned int *dwreg, __in  char *buff)
{
  regICON2_CLR0 *reg = (regICON2_CLR0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ICON2_CLR0_B:%x", buff, reg->bitfields.ICON2_CLR0_B);
  sprintf(buff,"%s ICON2_CLR0_G:%x", buff, reg->bitfields.ICON2_CLR0_G);
  sprintf(buff,"%s ICON2_CLR0_R:%x", buff, reg->bitfields.ICON2_CLR0_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ICON2_CLR1 regICON2_CLR1;

__inline void dump_ICON2_CLR1(__in  unsigned int *dwreg, __in  char *buff)
{
  regICON2_CLR1 *reg = (regICON2_CLR1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ICON2_CLR1_B:%x", buff, reg->bitfields.ICON2_CLR1_B);
  sprintf(buff,"%s ICON2_CLR1_G:%x", buff, reg->bitfields.ICON2_CLR1_G);
  sprintf(buff,"%s ICON2_CLR1_R:%x", buff, reg->bitfields.ICON2_CLR1_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRPH2_BUFFER_CNTL regGRPH2_BUFFER_CNTL;

__inline void dump_GRPH2_BUFFER_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRPH2_BUFFER_CNTL *reg = (regGRPH2_BUFFER_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GRPH2_START_REQ:%x", buff, reg->bitfields.GRPH2_START_REQ);
  sprintf(buff,"%s GRPH2_STOP_REQ:%x", buff, reg->bitfields.GRPH2_STOP_REQ);
  sprintf(buff,"%s GRPH2_CRITICAL_POINT:%x", buff, reg->bitfields.GRPH2_CRITICAL_POINT);
  sprintf(buff,"%s GRPH2_CRITICAL_CNTL:%x", buff, reg->bitfields.GRPH2_CRITICAL_CNTL);
  sprintf(buff,"%s GRPH2_BUFFER_SIZE:%x", buff, reg->bitfields.GRPH2_BUFFER_SIZE);
  sprintf(buff,"%s GRPH2_CRITICAL_AT_SOF:%x", buff, reg->bitfields.GRPH2_CRITICAL_AT_SOF);
  sprintf(buff,"%s GRPH2_STOP_CNTL:%x", buff, reg->bitfields.GRPH2_STOP_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250CRTC2_GEN_CNTL regrv250CRTC2_GEN_CNTL;

__inline void dump_rv250CRTC2_GEN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250CRTC2_GEN_CNTL *reg = (regrv250CRTC2_GEN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_DBL_SCAN_EN:%x", buff, reg->bitfields.CRTC2_DBL_SCAN_EN);
  sprintf(buff,"%s CRTC2_INTERLACE_EN:%x", buff, reg->bitfields.CRTC2_INTERLACE_EN);
  sprintf(buff,"%s CRTC2_SYNC_TRISTATE:%x", buff, reg->bitfields.CRTC2_SYNC_TRISTATE);
  sprintf(buff,"%s CRTC2_HSYNC_TRISTATE:%x", buff, reg->bitfields.CRTC2_HSYNC_TRISTATE);
  sprintf(buff,"%s CRTC2_VSYNC_TRISTATE:%x", buff, reg->bitfields.CRTC2_VSYNC_TRISTATE);
  sprintf(buff,"%s CRT2_ON:%x", buff, reg->bitfields.CRT2_ON);
  sprintf(buff,"%s CRTC2_PIX_WIDTH:%x", buff, reg->bitfields.CRTC2_PIX_WIDTH);
  sprintf(buff,"%s CRTC2_MODE9_COLOR_ORDER:%x", buff, reg->bitfields.CRTC2_MODE9_COLOR_ORDER);
  sprintf(buff,"%s CRTC2_BYPASS_LUT_EN:%x", buff, reg->bitfields.CRTC2_BYPASS_LUT_EN);
  sprintf(buff,"%s CRTC2_ICON_EN:%x", buff, reg->bitfields.CRTC2_ICON_EN);
  sprintf(buff,"%s CRTC2_CUR_EN:%x", buff, reg->bitfields.CRTC2_CUR_EN);
  sprintf(buff,"%s CRTC2_CUR_MODE:%x", buff, reg->bitfields.CRTC2_CUR_MODE);
  sprintf(buff,"%s CRTC2_DISPLAY_DIS:%x", buff, reg->bitfields.CRTC2_DISPLAY_DIS);
  sprintf(buff,"%s CRTC2_EN:%x", buff, reg->bitfields.CRTC2_EN);
  sprintf(buff,"%s CRTC2_DISP_REQ_EN_B:%x", buff, reg->bitfields.CRTC2_DISP_REQ_EN_B);
  sprintf(buff,"%s CRTC2_C_SYNC_EN:%x", buff, reg->bitfields.CRTC2_C_SYNC_EN);
  sprintf(buff,"%s CRTC2_HSYNC_DIS:%x", buff, reg->bitfields.CRTC2_HSYNC_DIS);
  sprintf(buff,"%s CRTC2_VSYNC_DIS:%x", buff, reg->bitfields.CRTC2_VSYNC_DIS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_STATUS regCRTC2_STATUS;

__inline void dump_CRTC2_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_STATUS *reg = (regCRTC2_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_VBLANK_CUR:%x", buff, reg->bitfields.CRTC2_VBLANK_CUR);
  sprintf(buff,"%s CRTC2_VBLANK_SAVE:%x", buff, reg->bitfields.CRTC2_VBLANK_SAVE);
  sprintf(buff,"%s CRTC2_VLINE_SYNC:%x", buff, reg->bitfields.CRTC2_VLINE_SYNC);
  sprintf(buff,"%s CRTC2_FRAME:%x", buff, reg->bitfields.CRTC2_FRAME);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_Y_X_START regOV0_Y_X_START;

__inline void dump_OV0_Y_X_START(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_Y_X_START *reg = (regOV0_Y_X_START *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_X_START:%x", buff, reg->bitfields.OV0_X_START);
  sprintf(buff,"%s OV0_Y_START:%x", buff, reg->bitfields.OV0_Y_START);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_Y_X_END regOV0_Y_X_END;

__inline void dump_OV0_Y_X_END(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_Y_X_END *reg = (regOV0_Y_X_END *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_X_END:%x", buff, reg->bitfields.OV0_X_END);
  sprintf(buff,"%s OV0_Y_END:%x", buff, reg->bitfields.OV0_Y_END);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_PIPELINE_CNTL regOV0_PIPELINE_CNTL;

__inline void dump_OV0_PIPELINE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_PIPELINE_CNTL *reg = (regOV0_PIPELINE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_REG_LOAD_CNTL regOV0_REG_LOAD_CNTL;

__inline void dump_OV0_REG_LOAD_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_REG_LOAD_CNTL *reg = (regOV0_REG_LOAD_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LOCK:%x", buff, reg->bitfields.OV0_LOCK);
  sprintf(buff,"%s OV0_VBLANK_DURING_LOCK:%x", buff, reg->bitfields.OV0_VBLANK_DURING_LOCK);
  sprintf(buff,"%s OV0_STALL_GUI_UNTIL_FLIP:%x", buff, reg->bitfields.OV0_STALL_GUI_UNTIL_FLIP);
  sprintf(buff,"%s OV0_LOCK_READBACK:%x", buff, reg->bitfields.OV0_LOCK_READBACK);
  sprintf(buff,"%s OV0_FLIP_READBACK:%x", buff, reg->bitfields.OV0_FLIP_READBACK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250OV0_SCALE_CNTL regrv250OV0_SCALE_CNTL;

__inline void dump_rv250OV0_SCALE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250OV0_SCALE_CNTL *reg = (regrv250OV0_SCALE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_NO_READ_BEHIND_SCAN:%x", buff, reg->bitfields.OV0_NO_READ_BEHIND_SCAN);
  sprintf(buff,"%s OV0_HORZ_PICK_NEAREST:%x", buff, reg->bitfields.OV0_HORZ_PICK_NEAREST);
  sprintf(buff,"%s OV0_VERT_PICK_NEAREST:%x", buff, reg->bitfields.OV0_VERT_PICK_NEAREST);
  sprintf(buff,"%s OV0_SIGNED_UV:%x", buff, reg->bitfields.OV0_SIGNED_UV);
  sprintf(buff,"%s OV0_GAMMA_SEL:%x", buff, reg->bitfields.OV0_GAMMA_SEL);
  sprintf(buff,"%s OV0_SURFACE_FORMAT:%x", buff, reg->bitfields.OV0_SURFACE_FORMAT);
  sprintf(buff,"%s OV0_ADAPTIVE_DEINT:%x", buff, reg->bitfields.OV0_ADAPTIVE_DEINT);
  sprintf(buff,"%s OV0_CRTC_SEL:%x", buff, reg->bitfields.OV0_CRTC_SEL);
  sprintf(buff,"%s OV0_BURST_PER_PLANE:%x", buff, reg->bitfields.OV0_BURST_PER_PLANE);
  sprintf(buff,"%s OV0_DOUBLE_BUFFER_REGS:%x", buff, reg->bitfields.OV0_DOUBLE_BUFFER_REGS);
  sprintf(buff,"%s OV0_BANDWIDTH:%x", buff, reg->bitfields.OV0_BANDWIDTH);
  sprintf(buff,"%s OV0_LIN_TRANS_BYPASS:%x", buff, reg->bitfields.OV0_LIN_TRANS_BYPASS);
  sprintf(buff,"%s OV0_INT_EMU:%x", buff, reg->bitfields.OV0_INT_EMU);
  sprintf(buff,"%s OV0_OVERLAY_EN:%x", buff, reg->bitfields.OV0_OVERLAY_EN);
  sprintf(buff,"%s OV0_SOFT_RESET:%x", buff, reg->bitfields.OV0_SOFT_RESET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_V_INC regOV0_V_INC;

__inline void dump_OV0_V_INC(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_V_INC *reg = (regOV0_V_INC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_P1_V_ACCUM_INIT regOV0_P1_V_ACCUM_INIT;

__inline void dump_OV0_P1_V_ACCUM_INIT(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_P1_V_ACCUM_INIT *reg = (regOV0_P1_V_ACCUM_INIT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_P1_MAX_LN_IN_PER_LN_OUT:%x", buff, reg->bitfields.OV0_P1_MAX_LN_IN_PER_LN_OUT);
  sprintf(buff,"%s OV0_P1_V_ACCUM_INIT:%x", buff, reg->bitfields.OV0_P1_V_ACCUM_INIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_P23_V_ACCUM_INIT regOV0_P23_V_ACCUM_INIT;

__inline void dump_OV0_P23_V_ACCUM_INIT(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_P23_V_ACCUM_INIT *reg = (regOV0_P23_V_ACCUM_INIT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_P23_MAX_LN_IN_PER_LN_OUT:%x", buff, reg->bitfields.OV0_P23_MAX_LN_IN_PER_LN_OUT);
  sprintf(buff,"%s OV0_P23_V_ACCUM_INIT:%x", buff, reg->bitfields.OV0_P23_V_ACCUM_INIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_P1_BLANK_LINES_AT_TOP regOV0_P1_BLANK_LINES_AT_TOP;

__inline void dump_OV0_P1_BLANK_LINES_AT_TOP(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_P1_BLANK_LINES_AT_TOP *reg = (regOV0_P1_BLANK_LINES_AT_TOP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_P1_BLNK_LN_AT_TOP_M1:%x", buff, reg->bitfields.OV0_P1_BLNK_LN_AT_TOP_M1);
  sprintf(buff,"%s OV0_P1_ACTIVE_LINES_M1:%x", buff, reg->bitfields.OV0_P1_ACTIVE_LINES_M1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_P23_BLANK_LINES_AT_TOP regOV0_P23_BLANK_LINES_AT_TOP;

__inline void dump_OV0_P23_BLANK_LINES_AT_TOP(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_P23_BLANK_LINES_AT_TOP *reg = (regOV0_P23_BLANK_LINES_AT_TOP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_P23_BLNK_LN_AT_TOP_M1:%x", buff, reg->bitfields.OV0_P23_BLNK_LN_AT_TOP_M1);
  sprintf(buff,"%s OV0_P23_ACTIVE_LINES_M1:%x", buff, reg->bitfields.OV0_P23_ACTIVE_LINES_M1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_BASE_ADDR regOV0_BASE_ADDR;

__inline void dump_OV0_BASE_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_BASE_ADDR *reg = (regOV0_BASE_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_VID_BUF0_BASE_ADRS regOV0_VID_BUF0_BASE_ADRS;

__inline void dump_OV0_VID_BUF0_BASE_ADRS(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_VID_BUF0_BASE_ADRS *reg = (regOV0_VID_BUF0_BASE_ADRS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_VID_BUF_PITCH_SEL:%x", buff, reg->bitfields.OV0_VID_BUF_PITCH_SEL);
  sprintf(buff,"%s RESERVED_BIT1:%x", buff, reg->bitfields.RESERVED_BIT1);
  sprintf(buff,"%s OV0_VID_BUF_BASE_ADRS:%x", buff, reg->bitfields.OV0_VID_BUF_BASE_ADRS);
  sprintf(buff,"%s RESERVED_BIT31_28:%x", buff, reg->bitfields.RESERVED_BIT31_28);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_VID_BUF1_BASE_ADRS regOV0_VID_BUF1_BASE_ADRS;

__inline void dump_OV0_VID_BUF1_BASE_ADRS(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_VID_BUF1_BASE_ADRS *reg = (regOV0_VID_BUF1_BASE_ADRS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_VID_BUF_PITCH_SEL:%x", buff, reg->bitfields.OV0_VID_BUF_PITCH_SEL);
  sprintf(buff,"%s RESERVED_BIT1:%x", buff, reg->bitfields.RESERVED_BIT1);
  sprintf(buff,"%s OV0_VID_BUF_BASE_ADRS:%x", buff, reg->bitfields.OV0_VID_BUF_BASE_ADRS);
  sprintf(buff,"%s RESERVED_BIT31_28:%x", buff, reg->bitfields.RESERVED_BIT31_28);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_VID_BUF2_BASE_ADRS regOV0_VID_BUF2_BASE_ADRS;

__inline void dump_OV0_VID_BUF2_BASE_ADRS(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_VID_BUF2_BASE_ADRS *reg = (regOV0_VID_BUF2_BASE_ADRS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_VID_BUF_PITCH_SEL:%x", buff, reg->bitfields.OV0_VID_BUF_PITCH_SEL);
  sprintf(buff,"%s RESERVED_BIT1:%x", buff, reg->bitfields.RESERVED_BIT1);
  sprintf(buff,"%s OV0_VID_BUF_BASE_ADRS:%x", buff, reg->bitfields.OV0_VID_BUF_BASE_ADRS);
  sprintf(buff,"%s RESERVED_BIT31_28:%x", buff, reg->bitfields.RESERVED_BIT31_28);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_VID_BUF3_BASE_ADRS regOV0_VID_BUF3_BASE_ADRS;

__inline void dump_OV0_VID_BUF3_BASE_ADRS(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_VID_BUF3_BASE_ADRS *reg = (regOV0_VID_BUF3_BASE_ADRS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_VID_BUF_PITCH_SEL:%x", buff, reg->bitfields.OV0_VID_BUF_PITCH_SEL);
  sprintf(buff,"%s RESERVED_BIT1:%x", buff, reg->bitfields.RESERVED_BIT1);
  sprintf(buff,"%s OV0_VID_BUF_BASE_ADRS:%x", buff, reg->bitfields.OV0_VID_BUF_BASE_ADRS);
  sprintf(buff,"%s RESERVED_BIT31_28:%x", buff, reg->bitfields.RESERVED_BIT31_28);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_VID_BUF4_BASE_ADRS regOV0_VID_BUF4_BASE_ADRS;

__inline void dump_OV0_VID_BUF4_BASE_ADRS(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_VID_BUF4_BASE_ADRS *reg = (regOV0_VID_BUF4_BASE_ADRS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_VID_BUF_PITCH_SEL:%x", buff, reg->bitfields.OV0_VID_BUF_PITCH_SEL);
  sprintf(buff,"%s RESERVED_BIT1:%x", buff, reg->bitfields.RESERVED_BIT1);
  sprintf(buff,"%s OV0_VID_BUF_BASE_ADRS:%x", buff, reg->bitfields.OV0_VID_BUF_BASE_ADRS);
  sprintf(buff,"%s RESERVED_BIT31_28:%x", buff, reg->bitfields.RESERVED_BIT31_28);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_VID_BUF5_BASE_ADRS regOV0_VID_BUF5_BASE_ADRS;

__inline void dump_OV0_VID_BUF5_BASE_ADRS(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_VID_BUF5_BASE_ADRS *reg = (regOV0_VID_BUF5_BASE_ADRS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_VID_BUF_PITCH_SEL:%x", buff, reg->bitfields.OV0_VID_BUF_PITCH_SEL);
  sprintf(buff,"%s RESERVED_BIT1:%x", buff, reg->bitfields.RESERVED_BIT1);
  sprintf(buff,"%s OV0_VID_BUF_BASE_ADRS:%x", buff, reg->bitfields.OV0_VID_BUF_BASE_ADRS);
  sprintf(buff,"%s RESERVED_BIT31_28:%x", buff, reg->bitfields.RESERVED_BIT31_28);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_VID_BUF_PITCH0_VALUE regOV0_VID_BUF_PITCH0_VALUE;

__inline void dump_OV0_VID_BUF_PITCH0_VALUE(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_VID_BUF_PITCH0_VALUE *reg = (regOV0_VID_BUF_PITCH0_VALUE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_PITCH_VALUE:%x", buff, reg->bitfields.OV0_PITCH_VALUE);
  sprintf(buff,"%s OV0_PITCH_SKIP_LINES:%x", buff, reg->bitfields.OV0_PITCH_SKIP_LINES);
  sprintf(buff,"%s OV0_PITCH_IN_TILES_LSBS:%x", buff, reg->bitfields.OV0_PITCH_IN_TILES_LSBS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_VID_BUF_PITCH1_VALUE regOV0_VID_BUF_PITCH1_VALUE;

__inline void dump_OV0_VID_BUF_PITCH1_VALUE(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_VID_BUF_PITCH1_VALUE *reg = (regOV0_VID_BUF_PITCH1_VALUE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_PITCH_VALUE:%x", buff, reg->bitfields.OV0_PITCH_VALUE);
  sprintf(buff,"%s OV0_PITCH_SKIP_LINES:%x", buff, reg->bitfields.OV0_PITCH_SKIP_LINES);
  sprintf(buff,"%s OV0_PITCH_IN_TILES_LSBS:%x", buff, reg->bitfields.OV0_PITCH_IN_TILES_LSBS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_AUTO_FLIP_CNTRL regOV0_AUTO_FLIP_CNTRL;

__inline void dump_OV0_AUTO_FLIP_CNTRL(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_AUTO_FLIP_CNTRL *reg = (regOV0_AUTO_FLIP_CNTRL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_SOFT_BUF_NUM:%x", buff, reg->bitfields.OV0_SOFT_BUF_NUM);
  sprintf(buff,"%s OV0_SOFT_REPEAT_FIELD:%x", buff, reg->bitfields.OV0_SOFT_REPEAT_FIELD);
  sprintf(buff,"%s OV0_SOFT_BUF_ODD:%x", buff, reg->bitfields.OV0_SOFT_BUF_ODD);
  sprintf(buff,"%s OV0_IGNORE_REPEAT_FIELD:%x", buff, reg->bitfields.OV0_IGNORE_REPEAT_FIELD);
  sprintf(buff,"%s OV0_SOFT_EOF_TOGGLE:%x", buff, reg->bitfields.OV0_SOFT_EOF_TOGGLE);
  sprintf(buff,"%s OV0_VID_PORT_SELECT:%x", buff, reg->bitfields.OV0_VID_PORT_SELECT);
  sprintf(buff,"%s OV0_P1_FIRST_LINE_EVEN:%x", buff, reg->bitfields.OV0_P1_FIRST_LINE_EVEN);
  sprintf(buff,"%s OV0_SHIFT_EVEN_DOWN:%x", buff, reg->bitfields.OV0_SHIFT_EVEN_DOWN);
  sprintf(buff,"%s OV0_SHIFT_ODD_DOWN:%x", buff, reg->bitfields.OV0_SHIFT_ODD_DOWN);
  sprintf(buff,"%s OV0_FIELD_POL_SOURCE:%x", buff, reg->bitfields.OV0_FIELD_POL_SOURCE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250OV0_DEINTERLACE_PATTERN regrv250OV0_DEINTERLACE_PATTERN;

__inline void dump_rv250OV0_DEINTERLACE_PATTERN(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250OV0_DEINTERLACE_PATTERN *reg = (regrv250OV0_DEINTERLACE_PATTERN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_DEINT_PAT:%x", buff, reg->bitfields.OV0_DEINT_PAT);
  sprintf(buff,"%s OV0_DEINT_PAT_PNTR:%x", buff, reg->bitfields.OV0_DEINT_PAT_PNTR);
  sprintf(buff,"%s OV0_DEINT_PAT_LEN_M1:%x", buff, reg->bitfields.OV0_DEINT_PAT_LEN_M1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_SUBMIT_HISTORY regOV0_SUBMIT_HISTORY;

__inline void dump_OV0_SUBMIT_HISTORY(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_SUBMIT_HISTORY *reg = (regOV0_SUBMIT_HISTORY *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_NEXT_BUF_NUM:%x", buff, reg->bitfields.OV0_NEXT_BUF_NUM);
  sprintf(buff,"%s OV0_NEXT_IS_ODD:%x", buff, reg->bitfields.OV0_NEXT_IS_ODD);
  sprintf(buff,"%s OV0_CURR_BUF_NUM:%x", buff, reg->bitfields.OV0_CURR_BUF_NUM);
  sprintf(buff,"%s OV0_CURR_IS_ODD:%x", buff, reg->bitfields.OV0_CURR_IS_ODD);
  sprintf(buff,"%s OV0_PREV_BUF_NUM:%x", buff, reg->bitfields.OV0_PREV_BUF_NUM);
  sprintf(buff,"%s OV0_PREV_IS_ODD:%x", buff, reg->bitfields.OV0_PREV_IS_ODD);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_H_INC regOV0_H_INC;

__inline void dump_OV0_H_INC(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_H_INC *reg = (regOV0_H_INC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_P1_H_INC:%x", buff, reg->bitfields.OV0_P1_H_INC);
  sprintf(buff,"%s OV0_P23_H_INC:%x", buff, reg->bitfields.OV0_P23_H_INC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_STEP_BY regOV0_STEP_BY;

__inline void dump_OV0_STEP_BY(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_STEP_BY *reg = (regOV0_STEP_BY *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_P1_H_STEP_BY:%x", buff, reg->bitfields.OV0_P1_H_STEP_BY);
  sprintf(buff,"%s OV0_P1_PREDWNSC_RATIO:%x", buff, reg->bitfields.OV0_P1_PREDWNSC_RATIO);
  sprintf(buff,"%s OV0_P23_H_STEP_BY:%x", buff, reg->bitfields.OV0_P23_H_STEP_BY);
  sprintf(buff,"%s OV0_P23_PREDWNSC_RATIO:%x", buff, reg->bitfields.OV0_P23_PREDWNSC_RATIO);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_P1_H_ACCUM_INIT regOV0_P1_H_ACCUM_INIT;

__inline void dump_OV0_P1_H_ACCUM_INIT(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_P1_H_ACCUM_INIT *reg = (regOV0_P1_H_ACCUM_INIT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_P1_H_ACCUM_INIT:%x", buff, reg->bitfields.OV0_P1_H_ACCUM_INIT);
  sprintf(buff,"%s OV0_PRESHIFT_P1_TO:%x", buff, reg->bitfields.OV0_PRESHIFT_P1_TO);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_P23_H_ACCUM_INIT regOV0_P23_H_ACCUM_INIT;

__inline void dump_OV0_P23_H_ACCUM_INIT(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_P23_H_ACCUM_INIT *reg = (regOV0_P23_H_ACCUM_INIT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_P23_H_ACCUM_INIT:%x", buff, reg->bitfields.OV0_P23_H_ACCUM_INIT);
  sprintf(buff,"%s OV0_PRESHIFT_P23_TO:%x", buff, reg->bitfields.OV0_PRESHIFT_P23_TO);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_P1_X_START_END regOV0_P1_X_START_END;

__inline void dump_OV0_P1_X_START_END(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_P1_X_START_END *reg = (regOV0_P1_X_START_END *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_P1_X_END:%x", buff, reg->bitfields.OV0_P1_X_END);
  sprintf(buff,"%s OV0_P1_X_START:%x", buff, reg->bitfields.OV0_P1_X_START);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_P2_X_START_END regOV0_P2_X_START_END;

__inline void dump_OV0_P2_X_START_END(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_P2_X_START_END *reg = (regOV0_P2_X_START_END *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_P2_X_END:%x", buff, reg->bitfields.OV0_P2_X_END);
  sprintf(buff,"%s OV0_P2_X_START:%x", buff, reg->bitfields.OV0_P2_X_START);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_P3_X_START_END regOV0_P3_X_START_END;

__inline void dump_OV0_P3_X_START_END(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_P3_X_START_END *reg = (regOV0_P3_X_START_END *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_P3_X_END:%x", buff, reg->bitfields.OV0_P3_X_END);
  sprintf(buff,"%s OV0_P3_X_START:%x", buff, reg->bitfields.OV0_P3_X_START);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_FILTER_CNTL regOV0_FILTER_CNTL;

__inline void dump_OV0_FILTER_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_FILTER_CNTL *reg = (regOV0_FILTER_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_HC_COEF_ON_HORZ_Y:%x", buff, reg->bitfields.OV0_HC_COEF_ON_HORZ_Y);
  sprintf(buff,"%s OV0_HC_COEF_ON_HORZ_UV:%x", buff, reg->bitfields.OV0_HC_COEF_ON_HORZ_UV);
  sprintf(buff,"%s OV0_HC_COEF_ON_VERT_Y:%x", buff, reg->bitfields.OV0_HC_COEF_ON_VERT_Y);
  sprintf(buff,"%s OV0_HC_COEF_ON_VERT_UV:%x", buff, reg->bitfields.OV0_HC_COEF_ON_VERT_UV);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_FOUR_TAP_COEF_0 regOV0_FOUR_TAP_COEF_0;

__inline void dump_OV0_FOUR_TAP_COEF_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_FOUR_TAP_COEF_0 *reg = (regOV0_FOUR_TAP_COEF_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_COEF__0TH_TAP:%x", buff, reg->bitfields.OV0_COEF__0TH_TAP);
  sprintf(buff,"%s OV0_COEF__1ST_TAP:%x", buff, reg->bitfields.OV0_COEF__1ST_TAP);
  sprintf(buff,"%s OV0_COEF__2ND_TAP:%x", buff, reg->bitfields.OV0_COEF__2ND_TAP);
  sprintf(buff,"%s OV0_COEF__3RD_TAP:%x", buff, reg->bitfields.OV0_COEF__3RD_TAP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_FOUR_TAP_COEF_1 regOV0_FOUR_TAP_COEF_1;

__inline void dump_OV0_FOUR_TAP_COEF_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_FOUR_TAP_COEF_1 *reg = (regOV0_FOUR_TAP_COEF_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_COEF__0TH_TAP:%x", buff, reg->bitfields.OV0_COEF__0TH_TAP);
  sprintf(buff,"%s OV0_COEF__1ST_TAP:%x", buff, reg->bitfields.OV0_COEF__1ST_TAP);
  sprintf(buff,"%s OV0_COEF__2ND_TAP:%x", buff, reg->bitfields.OV0_COEF__2ND_TAP);
  sprintf(buff,"%s OV0_COEF__3RD_TAP:%x", buff, reg->bitfields.OV0_COEF__3RD_TAP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_FOUR_TAP_COEF_2 regOV0_FOUR_TAP_COEF_2;

__inline void dump_OV0_FOUR_TAP_COEF_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_FOUR_TAP_COEF_2 *reg = (regOV0_FOUR_TAP_COEF_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_COEF__0TH_TAP:%x", buff, reg->bitfields.OV0_COEF__0TH_TAP);
  sprintf(buff,"%s OV0_COEF__1ST_TAP:%x", buff, reg->bitfields.OV0_COEF__1ST_TAP);
  sprintf(buff,"%s OV0_COEF__2ND_TAP:%x", buff, reg->bitfields.OV0_COEF__2ND_TAP);
  sprintf(buff,"%s OV0_COEF__3RD_TAP:%x", buff, reg->bitfields.OV0_COEF__3RD_TAP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_FOUR_TAP_COEF_3 regOV0_FOUR_TAP_COEF_3;

__inline void dump_OV0_FOUR_TAP_COEF_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_FOUR_TAP_COEF_3 *reg = (regOV0_FOUR_TAP_COEF_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_COEF__0TH_TAP:%x", buff, reg->bitfields.OV0_COEF__0TH_TAP);
  sprintf(buff,"%s OV0_COEF__1ST_TAP:%x", buff, reg->bitfields.OV0_COEF__1ST_TAP);
  sprintf(buff,"%s OV0_COEF__2ND_TAP:%x", buff, reg->bitfields.OV0_COEF__2ND_TAP);
  sprintf(buff,"%s OV0_COEF__3RD_TAP:%x", buff, reg->bitfields.OV0_COEF__3RD_TAP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_FOUR_TAP_COEF_4 regOV0_FOUR_TAP_COEF_4;

__inline void dump_OV0_FOUR_TAP_COEF_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_FOUR_TAP_COEF_4 *reg = (regOV0_FOUR_TAP_COEF_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_COEF__0TH_TAP:%x", buff, reg->bitfields.OV0_COEF__0TH_TAP);
  sprintf(buff,"%s OV0_COEF__1ST_TAP:%x", buff, reg->bitfields.OV0_COEF__1ST_TAP);
  sprintf(buff,"%s OV0_COEF__2ND_TAP:%x", buff, reg->bitfields.OV0_COEF__2ND_TAP);
  sprintf(buff,"%s OV0_COEF__3RD_TAP:%x", buff, reg->bitfields.OV0_COEF__3RD_TAP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_FLAG_CNTRL regOV0_FLAG_CNTRL;

__inline void dump_OV0_FLAG_CNTRL(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_FLAG_CNTRL *reg = (regOV0_FLAG_CNTRL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_HI_PRI_MCREQ:%x", buff, reg->bitfields.OV0_HI_PRI_MCREQ);
  sprintf(buff,"%s OV0_HI_PRI_FORCE:%x", buff, reg->bitfields.OV0_HI_PRI_FORCE);
  sprintf(buff,"%s OV0_LUMA_10BIT_EN:%x", buff, reg->bitfields.OV0_LUMA_10BIT_EN);
  sprintf(buff,"%s OV0_CHROMA_10BIT_EN:%x", buff, reg->bitfields.OV0_CHROMA_10BIT_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_SLICE_CNTL regOV0_SLICE_CNTL;

__inline void dump_OV0_SLICE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_SLICE_CNTL *reg = (regOV0_SLICE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_SLICE_LAST_LINE:%x", buff, reg->bitfields.OV0_SLICE_LAST_LINE);
  sprintf(buff,"%s OV0_SLICEDONE_STAT:%x", buff, reg->bitfields.OV0_SLICEDONE_STAT);
  sprintf(buff,"%s OV0_MPEG_EOF_TOGGLE:%x", buff, reg->bitfields.OV0_MPEG_EOF_TOGGLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_VID_KEY_CLR_LOW regOV0_VID_KEY_CLR_LOW;

__inline void dump_OV0_VID_KEY_CLR_LOW(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_VID_KEY_CLR_LOW *reg = (regOV0_VID_KEY_CLR_LOW *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_VID_KEY_Cb_BLUE_LOW:%x", buff, reg->bitfields.OV0_VID_KEY_Cb_BLUE_LOW);
  sprintf(buff,"%s OV0_VID_KEY_Y_GREEN_LOW:%x", buff, reg->bitfields.OV0_VID_KEY_Y_GREEN_LOW);
  sprintf(buff,"%s OV0_VID_KEY_Cr_RED_LOW:%x", buff, reg->bitfields.OV0_VID_KEY_Cr_RED_LOW);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_VID_KEY_CLR_HIGH regOV0_VID_KEY_CLR_HIGH;

__inline void dump_OV0_VID_KEY_CLR_HIGH(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_VID_KEY_CLR_HIGH *reg = (regOV0_VID_KEY_CLR_HIGH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_VID_KEY_Cb_BLUE_HIGH:%x", buff, reg->bitfields.OV0_VID_KEY_Cb_BLUE_HIGH);
  sprintf(buff,"%s OV0_VID_KEY_Y_GREEN_HIGH:%x", buff, reg->bitfields.OV0_VID_KEY_Y_GREEN_HIGH);
  sprintf(buff,"%s OV0_VID_KEY_Cr_RED_HIGH:%x", buff, reg->bitfields.OV0_VID_KEY_Cr_RED_HIGH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GRPH_KEY_CLR_LOW regOV0_GRPH_KEY_CLR_LOW;

__inline void dump_OV0_GRPH_KEY_CLR_LOW(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GRPH_KEY_CLR_LOW *reg = (regOV0_GRPH_KEY_CLR_LOW *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GRPH_KEY_BLUE_LOW:%x", buff, reg->bitfields.OV0_GRPH_KEY_BLUE_LOW);
  sprintf(buff,"%s OV0_GRPH_KEY_GREEN_LOW:%x", buff, reg->bitfields.OV0_GRPH_KEY_GREEN_LOW);
  sprintf(buff,"%s OV0_GRPH_KEY_RED_LOW:%x", buff, reg->bitfields.OV0_GRPH_KEY_RED_LOW);
  sprintf(buff,"%s OV0_GRPH_KEY_ALPHA_LOW:%x", buff, reg->bitfields.OV0_GRPH_KEY_ALPHA_LOW);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GRPH_KEY_CLR_HIGH regOV0_GRPH_KEY_CLR_HIGH;

__inline void dump_OV0_GRPH_KEY_CLR_HIGH(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GRPH_KEY_CLR_HIGH *reg = (regOV0_GRPH_KEY_CLR_HIGH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GRPH_KEY_BLUE_HIGH:%x", buff, reg->bitfields.OV0_GRPH_KEY_BLUE_HIGH);
  sprintf(buff,"%s OV0_GRPH_KEY_GREEN_HIGH:%x", buff, reg->bitfields.OV0_GRPH_KEY_GREEN_HIGH);
  sprintf(buff,"%s OV0_GRPH_KEY_RED_HIGH:%x", buff, reg->bitfields.OV0_GRPH_KEY_RED_HIGH);
  sprintf(buff,"%s OV0_GRPH_KEY_ALPHA_HIGH:%x", buff, reg->bitfields.OV0_GRPH_KEY_ALPHA_HIGH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_KEY_CNTL regOV0_KEY_CNTL;

__inline void dump_OV0_KEY_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_KEY_CNTL *reg = (regOV0_KEY_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_VIDEO_KEY_FN:%x", buff, reg->bitfields.OV0_VIDEO_KEY_FN);
  sprintf(buff,"%s OV0_GRAPHICS_KEY_FN:%x", buff, reg->bitfields.OV0_GRAPHICS_KEY_FN);
  sprintf(buff,"%s OV0_CMP_MIX:%x", buff, reg->bitfields.OV0_CMP_MIX);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250OV0_TEST regrv250OV0_TEST;

__inline void dump_rv250OV0_TEST(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250OV0_TEST *reg = (regrv250OV0_TEST *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_MIN_OFFSET_EN:%x", buff, reg->bitfields.OV0_MIN_OFFSET_EN);
  sprintf(buff,"%s OV0_SUBPIC_ONLY:%x", buff, reg->bitfields.OV0_SUBPIC_ONLY);
  sprintf(buff,"%s OV0_SWAP_UV:%x", buff, reg->bitfields.OV0_SWAP_UV);
  sprintf(buff,"%s OV0_NOROUNDUP:%x", buff, reg->bitfields.OV0_NOROUNDUP);
  sprintf(buff,"%s OV0_4TH_LINE_RULE_EN:%x", buff, reg->bitfields.OV0_4TH_LINE_RULE_EN);
  sprintf(buff,"%s OV0_READ_BEHIND_SCAN_MARGIN:%x", buff, reg->bitfields.OV0_READ_BEHIND_SCAN_MARGIN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_ADAPTIVE_DEINT_OFFSET regOV0_ADAPTIVE_DEINT_OFFSET;

__inline void dump_OV0_ADAPTIVE_DEINT_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_ADAPTIVE_DEINT_OFFSET *reg = (regOV0_ADAPTIVE_DEINT_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_BP_OFFSET:%x", buff, reg->bitfields.OV0_BP_OFFSET);
  sprintf(buff,"%s OV0_4TH_LINE_RULE_OFFSET:%x", buff, reg->bitfields.OV0_4TH_LINE_RULE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_CNTL regSUBPIC_CNTL;

__inline void dump_SUBPIC_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_CNTL *reg = (regSUBPIC_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SUBPIC_ON:%x", buff, reg->bitfields.SUBPIC_ON);
  sprintf(buff,"%s BTN_HLI_ON:%x", buff, reg->bitfields.BTN_HLI_ON);
  sprintf(buff,"%s SP_HORZ_MODE:%x", buff, reg->bitfields.SP_HORZ_MODE);
  sprintf(buff,"%s SP_VERT_MODE:%x", buff, reg->bitfields.SP_VERT_MODE);
  sprintf(buff,"%s SP_ODD_FIELD:%x", buff, reg->bitfields.SP_ODD_FIELD);
  sprintf(buff,"%s SP_BUF_SELECT:%x", buff, reg->bitfields.SP_BUF_SELECT);
  sprintf(buff,"%s SP_NO_R_EDGE_BLEND:%x", buff, reg->bitfields.SP_NO_R_EDGE_BLEND);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_DEFCOLCON regSUBPIC_DEFCOLCON;

__inline void dump_SUBPIC_DEFCOLCON(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_DEFCOLCON *reg = (regSUBPIC_DEFCOLCON *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BKGD_PIX_CON:%x", buff, reg->bitfields.BKGD_PIX_CON);
  sprintf(buff,"%s PATT_PIX_CON:%x", buff, reg->bitfields.PATT_PIX_CON);
  sprintf(buff,"%s EMPH_PIX1_CON:%x", buff, reg->bitfields.EMPH_PIX1_CON);
  sprintf(buff,"%s EMPH_PIX2_CON:%x", buff, reg->bitfields.EMPH_PIX2_CON);
  sprintf(buff,"%s BKGD_PIX_CLR:%x", buff, reg->bitfields.BKGD_PIX_CLR);
  sprintf(buff,"%s PATT_PIX_CLR:%x", buff, reg->bitfields.PATT_PIX_CLR);
  sprintf(buff,"%s EMPH_PIX1_CLR:%x", buff, reg->bitfields.EMPH_PIX1_CLR);
  sprintf(buff,"%s EMPH_PIX2_CLR:%x", buff, reg->bitfields.EMPH_PIX2_CLR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_Y_X_START regSUBPIC_Y_X_START;

__inline void dump_SUBPIC_Y_X_START(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_Y_X_START *reg = (regSUBPIC_Y_X_START *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_START_X:%x", buff, reg->bitfields.SP_START_X);
  sprintf(buff,"%s SP_START_Y:%x", buff, reg->bitfields.SP_START_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_Y_X_END regSUBPIC_Y_X_END;

__inline void dump_SUBPIC_Y_X_END(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_Y_X_END *reg = (regSUBPIC_Y_X_END *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_END_X:%x", buff, reg->bitfields.SP_END_X);
  sprintf(buff,"%s SP_END_Y:%x", buff, reg->bitfields.SP_END_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_V_INC regSUBPIC_V_INC;

__inline void dump_SUBPIC_V_INC(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_V_INC *reg = (regSUBPIC_V_INC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_V_INC_FRAC:%x", buff, reg->bitfields.SP_V_INC_FRAC);
  sprintf(buff,"%s SP_V_INC_INT:%x", buff, reg->bitfields.SP_V_INC_INT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_H_INC regSUBPIC_H_INC;

__inline void dump_SUBPIC_H_INC(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_H_INC *reg = (regSUBPIC_H_INC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_H_INC_FRAC:%x", buff, reg->bitfields.SP_H_INC_FRAC);
  sprintf(buff,"%s SP_H_INC_INT:%x", buff, reg->bitfields.SP_H_INC_INT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_BUF0_OFFSET regSUBPIC_BUF0_OFFSET;

__inline void dump_SUBPIC_BUF0_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_BUF0_OFFSET *reg = (regSUBPIC_BUF0_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_BUF1_OFFSET regSUBPIC_BUF1_OFFSET;

__inline void dump_SUBPIC_BUF1_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_BUF1_OFFSET *reg = (regSUBPIC_BUF1_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_LC0_OFFSET regSUBPIC_LC0_OFFSET;

__inline void dump_SUBPIC_LC0_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_LC0_OFFSET *reg = (regSUBPIC_LC0_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_LC1_OFFSET regSUBPIC_LC1_OFFSET;

__inline void dump_SUBPIC_LC1_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_LC1_OFFSET *reg = (regSUBPIC_LC1_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_PITCH regSUBPIC_PITCH;

__inline void dump_SUBPIC_PITCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_PITCH *reg = (regSUBPIC_PITCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SUBPIC_BUF_PITCH:%x", buff, reg->bitfields.SUBPIC_BUF_PITCH);
  sprintf(buff,"%s SUBPIC_LC_PITCH:%x", buff, reg->bitfields.SUBPIC_LC_PITCH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_BTN_HLI_COLCON regSUBPIC_BTN_HLI_COLCON;

__inline void dump_SUBPIC_BTN_HLI_COLCON(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_BTN_HLI_COLCON *reg = (regSUBPIC_BTN_HLI_COLCON *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BTN_HLI_BKGD_PIX_CON:%x", buff, reg->bitfields.BTN_HLI_BKGD_PIX_CON);
  sprintf(buff,"%s BTN_HLI_PATT_PIX_CON:%x", buff, reg->bitfields.BTN_HLI_PATT_PIX_CON);
  sprintf(buff,"%s BTN_HLI_EMPH_PIX1_CON:%x", buff, reg->bitfields.BTN_HLI_EMPH_PIX1_CON);
  sprintf(buff,"%s BTN_HLI_EMPH_PIX2_CON:%x", buff, reg->bitfields.BTN_HLI_EMPH_PIX2_CON);
  sprintf(buff,"%s BTN_HLI_BKGD_PIX_CLR:%x", buff, reg->bitfields.BTN_HLI_BKGD_PIX_CLR);
  sprintf(buff,"%s BTN_HLI_PATT_PIX_CLR:%x", buff, reg->bitfields.BTN_HLI_PATT_PIX_CLR);
  sprintf(buff,"%s BTN_HLI_EMPH_PIX1_CLR:%x", buff, reg->bitfields.BTN_HLI_EMPH_PIX1_CLR);
  sprintf(buff,"%s BTN_HLI_EMPH_PIX2_CLR:%x", buff, reg->bitfields.BTN_HLI_EMPH_PIX2_CLR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_BTN_HLI_Y_X_START regSUBPIC_BTN_HLI_Y_X_START;

__inline void dump_SUBPIC_BTN_HLI_Y_X_START(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_BTN_HLI_Y_X_START *reg = (regSUBPIC_BTN_HLI_Y_X_START *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BTN_HLI_START_X:%x", buff, reg->bitfields.BTN_HLI_START_X);
  sprintf(buff,"%s BTN_HLI_START_Y:%x", buff, reg->bitfields.BTN_HLI_START_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_BTN_HLI_Y_X_END regSUBPIC_BTN_HLI_Y_X_END;

__inline void dump_SUBPIC_BTN_HLI_Y_X_END(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_BTN_HLI_Y_X_END *reg = (regSUBPIC_BTN_HLI_Y_X_END *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BTN_HLI_END_X:%x", buff, reg->bitfields.BTN_HLI_END_X);
  sprintf(buff,"%s BTN_HLI_END_Y:%x", buff, reg->bitfields.BTN_HLI_END_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_PALETTE_INDEX regSUBPIC_PALETTE_INDEX;

__inline void dump_SUBPIC_PALETTE_INDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_PALETTE_INDEX *reg = (regSUBPIC_PALETTE_INDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_PALETTE_DATA regSUBPIC_PALETTE_DATA;

__inline void dump_SUBPIC_PALETTE_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_PALETTE_DATA *reg = (regSUBPIC_PALETTE_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_0_PAL regSUBPIC_0_PAL;

__inline void dump_SUBPIC_0_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_0_PAL *reg = (regSUBPIC_0_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_1_PAL regSUBPIC_1_PAL;

__inline void dump_SUBPIC_1_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_1_PAL *reg = (regSUBPIC_1_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_2_PAL regSUBPIC_2_PAL;

__inline void dump_SUBPIC_2_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_2_PAL *reg = (regSUBPIC_2_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_3_PAL regSUBPIC_3_PAL;

__inline void dump_SUBPIC_3_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_3_PAL *reg = (regSUBPIC_3_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_4_PAL regSUBPIC_4_PAL;

__inline void dump_SUBPIC_4_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_4_PAL *reg = (regSUBPIC_4_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_5_PAL regSUBPIC_5_PAL;

__inline void dump_SUBPIC_5_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_5_PAL *reg = (regSUBPIC_5_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_6_PAL regSUBPIC_6_PAL;

__inline void dump_SUBPIC_6_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_6_PAL *reg = (regSUBPIC_6_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_7_PAL regSUBPIC_7_PAL;

__inline void dump_SUBPIC_7_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_7_PAL *reg = (regSUBPIC_7_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_8_PAL regSUBPIC_8_PAL;

__inline void dump_SUBPIC_8_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_8_PAL *reg = (regSUBPIC_8_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_9_PAL regSUBPIC_9_PAL;

__inline void dump_SUBPIC_9_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_9_PAL *reg = (regSUBPIC_9_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_A_PAL regSUBPIC_A_PAL;

__inline void dump_SUBPIC_A_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_A_PAL *reg = (regSUBPIC_A_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_B_PAL regSUBPIC_B_PAL;

__inline void dump_SUBPIC_B_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_B_PAL *reg = (regSUBPIC_B_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_C_PAL regSUBPIC_C_PAL;

__inline void dump_SUBPIC_C_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_C_PAL *reg = (regSUBPIC_C_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_D_PAL regSUBPIC_D_PAL;

__inline void dump_SUBPIC_D_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_D_PAL *reg = (regSUBPIC_D_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_E_PAL regSUBPIC_E_PAL;

__inline void dump_SUBPIC_E_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_E_PAL *reg = (regSUBPIC_E_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_F_PAL regSUBPIC_F_PAL;

__inline void dump_SUBPIC_F_PAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_F_PAL *reg = (regSUBPIC_F_PAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_CB:%x", buff, reg->bitfields.SP_CB);
  sprintf(buff,"%s SP_CR:%x", buff, reg->bitfields.SP_CR);
  sprintf(buff,"%s SP_Y:%x", buff, reg->bitfields.SP_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_H_ACCUM_INIT regSUBPIC_H_ACCUM_INIT;

__inline void dump_SUBPIC_H_ACCUM_INIT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_H_ACCUM_INIT *reg = (regSUBPIC_H_ACCUM_INIT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_H_ACC_INIT_FRAC:%x", buff, reg->bitfields.SP_H_ACC_INIT_FRAC);
  sprintf(buff,"%s SP_H_ACC_INIT_INT:%x", buff, reg->bitfields.SP_H_ACC_INIT_INT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SUBPIC_V_ACCUM_INIT regSUBPIC_V_ACCUM_INIT;

__inline void dump_SUBPIC_V_ACCUM_INIT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSUBPIC_V_ACCUM_INIT *reg = (regSUBPIC_V_ACCUM_INIT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SP_V_ACC_INIT_FRAC:%x", buff, reg->bitfields.SP_V_ACC_INIT_FRAC);
  sprintf(buff,"%s SP_V_ACC_INIT_INT:%x", buff, reg->bitfields.SP_V_ACC_INIT_INT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV1_Y_X_START regOV1_Y_X_START;

__inline void dump_OV1_Y_X_START(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV1_Y_X_START *reg = (regOV1_Y_X_START *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV1_X_START:%x", buff, reg->bitfields.OV1_X_START);
  sprintf(buff,"%s OV1_Y_START:%x", buff, reg->bitfields.OV1_Y_START);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV1_Y_X_END regOV1_Y_X_END;

__inline void dump_OV1_Y_X_END(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV1_Y_X_END *reg = (regOV1_Y_X_END *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV1_X_END:%x", buff, reg->bitfields.OV1_X_END);
  sprintf(buff,"%s OV1_Y_END:%x", buff, reg->bitfields.OV1_Y_END);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV1_PIPELINE_CNTL regOV1_PIPELINE_CNTL;

__inline void dump_OV1_PIPELINE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV1_PIPELINE_CNTL *reg = (regOV1_PIPELINE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250DISP_MISC_CNTL regrv250DISP_MISC_CNTL;

__inline void dump_rv250DISP_MISC_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250DISP_MISC_CNTL *reg = (regrv250DISP_MISC_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SOFT_RESET_GRPH_PP:%x", buff, reg->bitfields.SOFT_RESET_GRPH_PP);
  sprintf(buff,"%s SOFT_RESET_SUBPIC_PP:%x", buff, reg->bitfields.SOFT_RESET_SUBPIC_PP);
  sprintf(buff,"%s SOFT_RESET_OV0_PP:%x", buff, reg->bitfields.SOFT_RESET_OV0_PP);
  sprintf(buff,"%s SOFT_RESET_GRPH_SCLK:%x", buff, reg->bitfields.SOFT_RESET_GRPH_SCLK);
  sprintf(buff,"%s SOFT_RESET_SUBPIC_SCLK:%x", buff, reg->bitfields.SOFT_RESET_SUBPIC_SCLK);
  sprintf(buff,"%s SOFT_RESET_OV0_SCLK:%x", buff, reg->bitfields.SOFT_RESET_OV0_SCLK);
  sprintf(buff,"%s SYNC_STRENGTH:%x", buff, reg->bitfields.SYNC_STRENGTH);
  sprintf(buff,"%s SYNC_PAD_FLOP_EN:%x", buff, reg->bitfields.SYNC_PAD_FLOP_EN);
  sprintf(buff,"%s SOFT_RESET_GRPH2_PP:%x", buff, reg->bitfields.SOFT_RESET_GRPH2_PP);
  sprintf(buff,"%s SOFT_RESET_HDCP:%x", buff, reg->bitfields.SOFT_RESET_HDCP);
  sprintf(buff,"%s SOFT_RESET_GRPH2_SCLK:%x", buff, reg->bitfields.SOFT_RESET_GRPH2_SCLK);
  sprintf(buff,"%s SOFT_RESET_LVDS:%x", buff, reg->bitfields.SOFT_RESET_LVDS);
  sprintf(buff,"%s SOFT_RESET_TMDS:%x", buff, reg->bitfields.SOFT_RESET_TMDS);
  sprintf(buff,"%s SOFT_RESET_DIG_TMDS:%x", buff, reg->bitfields.SOFT_RESET_DIG_TMDS);
  sprintf(buff,"%s SOFT_RESET_TV:%x", buff, reg->bitfields.SOFT_RESET_TV);
  sprintf(buff,"%s PALETTE2_MEM_RD_MARGIN:%x", buff, reg->bitfields.PALETTE2_MEM_RD_MARGIN);
  sprintf(buff,"%s PALETTE_MEM_RD_MARGIN:%x", buff, reg->bitfields.PALETTE_MEM_RD_MARGIN);
  sprintf(buff,"%s RMX_BUF_MEM_RD_MARGIN:%x", buff, reg->bitfields.RMX_BUF_MEM_RD_MARGIN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_MACRO_CNTL regDAC_MACRO_CNTL;

__inline void dump_DAC_MACRO_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_MACRO_CNTL *reg = (regDAC_MACRO_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_WHITE_CNTL:%x", buff, reg->bitfields.DAC_WHITE_CNTL);
  sprintf(buff,"%s DAC_BG_ADJ:%x", buff, reg->bitfields.DAC_BG_ADJ);
  sprintf(buff,"%s DAC_PDWN_R:%x", buff, reg->bitfields.DAC_PDWN_R);
  sprintf(buff,"%s DAC_PDWN_G:%x", buff, reg->bitfields.DAC_PDWN_G);
  sprintf(buff,"%s DAC_PDWN_B:%x", buff, reg->bitfields.DAC_PDWN_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250DISP_PWR_MAN regrv250DISP_PWR_MAN;

__inline void dump_rv250DISP_PWR_MAN(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250DISP_PWR_MAN *reg = (regrv250DISP_PWR_MAN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_PWR_MAN_D3_CRTC_EN:%x", buff, reg->bitfields.DISP_PWR_MAN_D3_CRTC_EN);
  sprintf(buff,"%s DISP2_PWR_MAN_D3_CRTC2_EN:%x", buff, reg->bitfields.DISP2_PWR_MAN_D3_CRTC2_EN);
  sprintf(buff,"%s DISP_PWR_MAN_DPMS:%x", buff, reg->bitfields.DISP_PWR_MAN_DPMS);
  sprintf(buff,"%s DISP_D3_RST:%x", buff, reg->bitfields.DISP_D3_RST);
  sprintf(buff,"%s DISP_D3_REG_RST:%x", buff, reg->bitfields.DISP_D3_REG_RST);
  sprintf(buff,"%s DISP_D3_GRPH_RST:%x", buff, reg->bitfields.DISP_D3_GRPH_RST);
  sprintf(buff,"%s DISP_D3_SUBPIC_RST:%x", buff, reg->bitfields.DISP_D3_SUBPIC_RST);
  sprintf(buff,"%s DISP_D3_OV0_RST:%x", buff, reg->bitfields.DISP_D3_OV0_RST);
  sprintf(buff,"%s DISP_D1D2_GRPH_RST:%x", buff, reg->bitfields.DISP_D1D2_GRPH_RST);
  sprintf(buff,"%s DISP_D1D2_SUBPIC_RST:%x", buff, reg->bitfields.DISP_D1D2_SUBPIC_RST);
  sprintf(buff,"%s DISP_D1D2_OV0_RST:%x", buff, reg->bitfields.DISP_D1D2_OV0_RST);
  sprintf(buff,"%s DIG_TMDS_ENABLE_RST:%x", buff, reg->bitfields.DIG_TMDS_ENABLE_RST);
  sprintf(buff,"%s TV_ENABLE_RST:%x", buff, reg->bitfields.TV_ENABLE_RST);
  sprintf(buff,"%s AUTO_PWRUP_EN:%x", buff, reg->bitfields.AUTO_PWRUP_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_TEST_DEBUG_CNTL regDISP_TEST_DEBUG_CNTL;

__inline void dump_DISP_TEST_DEBUG_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_TEST_DEBUG_CNTL *reg = (regDISP_TEST_DEBUG_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_TEST_DISPENG:%x", buff, reg->bitfields.DISP_TEST_DISPENG);
  sprintf(buff,"%s DISP_TEST_PALETTE:%x", buff, reg->bitfields.DISP_TEST_PALETTE);
  sprintf(buff,"%s DISP_TEST_DAC:%x", buff, reg->bitfields.DISP_TEST_DAC);
  sprintf(buff,"%s DISP_TEST_SUBPIC:%x", buff, reg->bitfields.DISP_TEST_SUBPIC);
  sprintf(buff,"%s DISP_TEST_OV0SCALE:%x", buff, reg->bitfields.DISP_TEST_OV0SCALE);
  sprintf(buff,"%s DISP_TEST_CLK:%x", buff, reg->bitfields.DISP_TEST_CLK);
  sprintf(buff,"%s DISP_TEST_DISP2ENG:%x", buff, reg->bitfields.DISP_TEST_DISP2ENG);
  sprintf(buff,"%s DISP_TEST_PALETTE2:%x", buff, reg->bitfields.DISP_TEST_PALETTE2);
  sprintf(buff,"%s DISP_GRPH2_UNDERFLOW:%x", buff, reg->bitfields.DISP_GRPH2_UNDERFLOW);
  sprintf(buff,"%s DISP_CUR2_UNDERFLOW:%x", buff, reg->bitfields.DISP_CUR2_UNDERFLOW);
  sprintf(buff,"%s DISP_GRPH_UNDERFLOW:%x", buff, reg->bitfields.DISP_GRPH_UNDERFLOW);
  sprintf(buff,"%s DISP_CUR_UNDERFLOW:%x", buff, reg->bitfields.DISP_CUR_UNDERFLOW);
  sprintf(buff,"%s DISP_OV0_UNDERFLOW:%x", buff, reg->bitfields.DISP_OV0_UNDERFLOW);
  sprintf(buff,"%s DISP_SUBPIC_UNDERFLOW:%x", buff, reg->bitfields.DISP_SUBPIC_UNDERFLOW);
  sprintf(buff,"%s DISP_SUBPIC_FORCE_HI_PRI:%x", buff, reg->bitfields.DISP_SUBPIC_FORCE_HI_PRI);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_HW_DEBUG_M6 regDISP_HW_DEBUG_M6;

__inline void dump_DISP_HW_DEBUG_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_HW_DEBUG_M6 *reg = (regDISP_HW_DEBUG_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_HW_0_DEBUG:%x", buff, reg->bitfields.DISP_HW_0_DEBUG);
  sprintf(buff,"%s DISP_HW_1_DEBUG:%x", buff, reg->bitfields.DISP_HW_1_DEBUG);
  sprintf(buff,"%s DISP_HW_2_DEBUG:%x", buff, reg->bitfields.DISP_HW_2_DEBUG);
  sprintf(buff,"%s DISP_HW_3_DEBUG:%x", buff, reg->bitfields.DISP_HW_3_DEBUG);
  sprintf(buff,"%s DISP_HW_4_DEBUG:%x", buff, reg->bitfields.DISP_HW_4_DEBUG);
  sprintf(buff,"%s CRT2_DISP1_SEL:%x", buff, reg->bitfields.CRT2_DISP1_SEL);
  sprintf(buff,"%s DISP_HW_6_DEBUG:%x", buff, reg->bitfields.DISP_HW_6_DEBUG);
  sprintf(buff,"%s DISP_HW_7_DEBUG:%x", buff, reg->bitfields.DISP_HW_7_DEBUG);
  sprintf(buff,"%s DISP_HW_8_DEBUG:%x", buff, reg->bitfields.DISP_HW_8_DEBUG);
  sprintf(buff,"%s DISP_HW_9_DEBUG:%x", buff, reg->bitfields.DISP_HW_9_DEBUG);
  sprintf(buff,"%s DISP_HW_A_DEBUG:%x", buff, reg->bitfields.DISP_HW_A_DEBUG);
  sprintf(buff,"%s DISP_HW_B_DEBUG:%x", buff, reg->bitfields.DISP_HW_B_DEBUG);
  sprintf(buff,"%s DISP_HW_C_DEBUG:%x", buff, reg->bitfields.DISP_HW_C_DEBUG);
  sprintf(buff,"%s DISP_HW_D_DEBUG:%x", buff, reg->bitfields.DISP_HW_D_DEBUG);
  sprintf(buff,"%s DISP_HW_E_DEBUG:%x", buff, reg->bitfields.DISP_HW_E_DEBUG);
  sprintf(buff,"%s DISP_HW_F_DEBUG:%x", buff, reg->bitfields.DISP_HW_F_DEBUG);
  sprintf(buff,"%s DISP_HW_10_DEBUG:%x", buff, reg->bitfields.DISP_HW_10_DEBUG);
  sprintf(buff,"%s DISP_HW_11_DEBUG:%x", buff, reg->bitfields.DISP_HW_11_DEBUG);
  sprintf(buff,"%s DISP_HW_12_DEBUG:%x", buff, reg->bitfields.DISP_HW_12_DEBUG);
  sprintf(buff,"%s DISP_HW_13_DEBUG:%x", buff, reg->bitfields.DISP_HW_13_DEBUG);
  sprintf(buff,"%s DISP_HW_14_DEBUG:%x", buff, reg->bitfields.DISP_HW_14_DEBUG);
  sprintf(buff,"%s DISP_HW_15_DEBUG:%x", buff, reg->bitfields.DISP_HW_15_DEBUG);
  sprintf(buff,"%s DISP_HW_16_DEBUG:%x", buff, reg->bitfields.DISP_HW_16_DEBUG);
  sprintf(buff,"%s DISP_HW_17_DEBUG:%x", buff, reg->bitfields.DISP_HW_17_DEBUG);
  sprintf(buff,"%s DISP_HW_18_DEBUG:%x", buff, reg->bitfields.DISP_HW_18_DEBUG);
  sprintf(buff,"%s DISP_HW_19_DEBUG:%x", buff, reg->bitfields.DISP_HW_19_DEBUG);
  sprintf(buff,"%s DISP_HW_1A_DEBUG:%x", buff, reg->bitfields.DISP_HW_1A_DEBUG);
  sprintf(buff,"%s DISP_HW_1B_DEBUG:%x", buff, reg->bitfields.DISP_HW_1B_DEBUG);
  sprintf(buff,"%s DISP_HW_1C_DEBUG:%x", buff, reg->bitfields.DISP_HW_1C_DEBUG);
  sprintf(buff,"%s DISP_HW_1D_DEBUG:%x", buff, reg->bitfields.DISP_HW_1D_DEBUG);
  sprintf(buff,"%s DISP_HW_1E_DEBUG:%x", buff, reg->bitfields.DISP_HW_1E_DEBUG);
  sprintf(buff,"%s DISP_HW_1F_DEBUG:%x", buff, reg->bitfields.DISP_HW_1F_DEBUG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_CRC_SIG1 regDAC_CRC_SIG1;

__inline void dump_DAC_CRC_SIG1(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_CRC_SIG1 *reg = (regDAC_CRC_SIG1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_CRC_SIG_B:%x", buff, reg->bitfields.DAC_CRC_SIG_B);
  sprintf(buff,"%s DAC_CRC_SIG_G:%x", buff, reg->bitfields.DAC_CRC_SIG_G);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_CRC_SIG2 regDAC_CRC_SIG2;

__inline void dump_DAC_CRC_SIG2(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_CRC_SIG2 *reg = (regDAC_CRC_SIG2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_CRC_SIG_R:%x", buff, reg->bitfields.DAC_CRC_SIG_R);
  sprintf(buff,"%s DAC_CRC_SIG_C:%x", buff, reg->bitfields.DAC_CRC_SIG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_LIN_TRANS_A_M6 regOV0_LIN_TRANS_A_M6;

__inline void dump_OV0_LIN_TRANS_A_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_LIN_TRANS_A_M6 *reg = (regOV0_LIN_TRANS_A_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LIN_TRANS_Cb_R:%x", buff, reg->bitfields.OV0_LIN_TRANS_Cb_R);
  sprintf(buff,"%s OV0_LIN_TRANS_Y_R:%x", buff, reg->bitfields.OV0_LIN_TRANS_Y_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_LIN_TRANS_B_M6 regOV0_LIN_TRANS_B_M6;

__inline void dump_OV0_LIN_TRANS_B_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_LIN_TRANS_B_M6 *reg = (regOV0_LIN_TRANS_B_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LIN_TRANS_OFF_R:%x", buff, reg->bitfields.OV0_LIN_TRANS_OFF_R);
  sprintf(buff,"%s OV0_LIN_TRANS_Cr_R:%x", buff, reg->bitfields.OV0_LIN_TRANS_Cr_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_LIN_TRANS_C_M6 regOV0_LIN_TRANS_C_M6;

__inline void dump_OV0_LIN_TRANS_C_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_LIN_TRANS_C_M6 *reg = (regOV0_LIN_TRANS_C_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LIN_TRANS_Cb_G:%x", buff, reg->bitfields.OV0_LIN_TRANS_Cb_G);
  sprintf(buff,"%s OV0_LIN_TRANS_Y_G:%x", buff, reg->bitfields.OV0_LIN_TRANS_Y_G);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_LIN_TRANS_D_M6 regOV0_LIN_TRANS_D_M6;

__inline void dump_OV0_LIN_TRANS_D_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_LIN_TRANS_D_M6 *reg = (regOV0_LIN_TRANS_D_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LIN_TRANS_OFF_G:%x", buff, reg->bitfields.OV0_LIN_TRANS_OFF_G);
  sprintf(buff,"%s OV0_LIN_TRANS_Cr_G:%x", buff, reg->bitfields.OV0_LIN_TRANS_Cr_G);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_LIN_TRANS_E_M6 regOV0_LIN_TRANS_E_M6;

__inline void dump_OV0_LIN_TRANS_E_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_LIN_TRANS_E_M6 *reg = (regOV0_LIN_TRANS_E_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LIN_TRANS_Cb_B:%x", buff, reg->bitfields.OV0_LIN_TRANS_Cb_B);
  sprintf(buff,"%s OV0_LIN_TRANS_Y_B:%x", buff, reg->bitfields.OV0_LIN_TRANS_Y_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_LIN_TRANS_F_M6 regOV0_LIN_TRANS_F_M6;

__inline void dump_OV0_LIN_TRANS_F_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_LIN_TRANS_F_M6 *reg = (regOV0_LIN_TRANS_F_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LIN_TRANS_OFF_B:%x", buff, reg->bitfields.OV0_LIN_TRANS_OFF_B);
  sprintf(buff,"%s OV0_LIN_TRANS_Cr_B:%x", buff, reg->bitfields.OV0_LIN_TRANS_Cr_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_0_F regOV0_GAMMA_0_F;

__inline void dump_OV0_GAMMA_0_F(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_0_F *reg = (regOV0_GAMMA_0_F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_0_F_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_0_F_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_0_F_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_0_F_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_10_1F regOV0_GAMMA_10_1F;

__inline void dump_OV0_GAMMA_10_1F(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_10_1F *reg = (regOV0_GAMMA_10_1F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_10_1F_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_10_1F_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_10_1F_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_10_1F_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_20_3F regOV0_GAMMA_20_3F;

__inline void dump_OV0_GAMMA_20_3F(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_20_3F *reg = (regOV0_GAMMA_20_3F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_20_3F_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_20_3F_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_20_3F_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_20_3F_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_40_7F regOV0_GAMMA_40_7F;

__inline void dump_OV0_GAMMA_40_7F(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_40_7F *reg = (regOV0_GAMMA_40_7F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_40_7F_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_40_7F_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_40_7F_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_40_7F_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250OV0_GAMMA_380_3BF regrv250OV0_GAMMA_380_3BF;

__inline void dump_rv250OV0_GAMMA_380_3BF(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250OV0_GAMMA_380_3BF *reg = (regrv250OV0_GAMMA_380_3BF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_380_3BF_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_380_3BF_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_380_3BF_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_380_3BF_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250OV0_GAMMA_3C0_3FF regrv250OV0_GAMMA_3C0_3FF;

__inline void dump_rv250OV0_GAMMA_3C0_3FF(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250OV0_GAMMA_3C0_3FF *reg = (regrv250OV0_GAMMA_3C0_3FF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_3C0_3FF_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_3C0_3FF_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_3C0_3FF_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_3C0_3FF_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250DISP_OUTPUT_CNTL regrv250DISP_OUTPUT_CNTL;

__inline void dump_rv250DISP_OUTPUT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250DISP_OUTPUT_CNTL *reg = (regrv250DISP_OUTPUT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_DAC_SOURCE:%x", buff, reg->bitfields.DISP_DAC_SOURCE);
  sprintf(buff,"%s DISP_RMX_SOURCE:%x", buff, reg->bitfields.DISP_RMX_SOURCE);
  sprintf(buff,"%s DISP_RMX_DITH_EN:%x", buff, reg->bitfields.DISP_RMX_DITH_EN);
  sprintf(buff,"%s DISP_TV_EVEN_FLAG_CNTL:%x", buff, reg->bitfields.DISP_TV_EVEN_FLAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP2_MERGE_CNTL regDISP2_MERGE_CNTL;

__inline void dump_DISP2_MERGE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP2_MERGE_CNTL *reg = (regDISP2_MERGE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_CRC2_SIG1 regDAC_CRC2_SIG1;

__inline void dump_DAC_CRC2_SIG1(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_CRC2_SIG1 *reg = (regDAC_CRC2_SIG1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_CRC2_SIG_B:%x", buff, reg->bitfields.DAC_CRC2_SIG_B);
  sprintf(buff,"%s DAC_CRC2_SIG_G:%x", buff, reg->bitfields.DAC_CRC2_SIG_G);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_CRC2_SIG2 regDAC_CRC2_SIG2;

__inline void dump_DAC_CRC2_SIG2(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_CRC2_SIG2 *reg = (regDAC_CRC2_SIG2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_CRC2_SIG_R:%x", buff, reg->bitfields.DAC_CRC2_SIG_R);
  sprintf(buff,"%s DAC_CRC2_SIG_C:%x", buff, reg->bitfields.DAC_CRC2_SIG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RMX_HORZ_PHASE regRMX_HORZ_PHASE;

__inline void dump_RMX_HORZ_PHASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regRMX_HORZ_PHASE *reg = (regRMX_HORZ_PHASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s RMX_HORZ_START_PHASE:%x", buff, reg->bitfields.RMX_HORZ_START_PHASE);
  sprintf(buff,"%s RMX_H_ACC_INIT:%x", buff, reg->bitfields.RMX_H_ACC_INIT);
  sprintf(buff,"%s RMX_V_ACC_INIT:%x", buff, reg->bitfields.RMX_V_ACC_INIT);
  sprintf(buff,"%s RMX_VERT_START_PHASE:%x", buff, reg->bitfields.RMX_VERT_START_PHASE);
  sprintf(buff,"%s RMX_VERT_HALF_START_PHASE_EN:%x", buff, reg->bitfields.RMX_VERT_HALF_START_PHASE_EN);
  sprintf(buff,"%s RMX_VERT_START_PHASE_OVERFLOW_EN:%x", buff, reg->bitfields.RMX_VERT_START_PHASE_OVERFLOW_EN);
  sprintf(buff,"%s RMX_HORZ_HALF_START_PHASE_EN:%x", buff, reg->bitfields.RMX_HORZ_HALF_START_PHASE_EN);
  sprintf(buff,"%s RMX_HORZ_START_PHASE_OVERFLOW_EN:%x", buff, reg->bitfields.RMX_HORZ_START_PHASE_OVERFLOW_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HDCP_GEN_CNTL regHDCP_GEN_CNTL;

__inline void dump_HDCP_GEN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regHDCP_GEN_CNTL *reg = (regHDCP_GEN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HDCP_AUTHORIZED_INT_STAT:%x", buff, reg->bitfields.HDCP_AUTHORIZED_INT_STAT);
  sprintf(buff,"%s HDCP_AUTHORIZED_INT_POL:%x", buff, reg->bitfields.HDCP_AUTHORIZED_INT_POL);
  sprintf(buff,"%s HDCP_AUTHORIZED_INT_MASK:%x", buff, reg->bitfields.HDCP_AUTHORIZED_INT_MASK);
  sprintf(buff,"%s HOT_PLUG_AFFECTS_HDCP_EN:%x", buff, reg->bitfields.HOT_PLUG_AFFECTS_HDCP_EN);
  sprintf(buff,"%s HDCP_AUTHORIZED:%x", buff, reg->bitfields.HDCP_AUTHORIZED);
  sprintf(buff,"%s HDCP_RESET:%x", buff, reg->bitfields.HDCP_RESET);
  sprintf(buff,"%s HDCP_I2C_SCL_DRIVE_EN:%x", buff, reg->bitfields.HDCP_I2C_SCL_DRIVE_EN);
  sprintf(buff,"%s HDCP_I2C_SDA_DRIVE_EN:%x", buff, reg->bitfields.HDCP_I2C_SDA_DRIVE_EN);
  sprintf(buff,"%s HDCP_I2C_TIME_LIMIT:%x", buff, reg->bitfields.HDCP_I2C_TIME_LIMIT);
  sprintf(buff,"%s HDCP_I2C_PRESCALE:%x", buff, reg->bitfields.HDCP_I2C_PRESCALE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HDCP_CONTROL regHDCP_CONTROL;

__inline void dump_HDCP_CONTROL(__in  unsigned int *dwreg, __in  char *buff)
{
  regHDCP_CONTROL *reg = (regHDCP_CONTROL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HDCP_DATA regHDCP_DATA;

__inline void dump_HDCP_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regHDCP_DATA *reg = (regHDCP_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HDCP_DEBUG regHDCP_DEBUG;

__inline void dump_HDCP_DEBUG(__in  unsigned int *dwreg, __in  char *buff)
{
  regHDCP_DEBUG *reg = (regHDCP_DEBUG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HDCP_DEBUG_EN:%x", buff, reg->bitfields.HDCP_DEBUG_EN);
  sprintf(buff,"%s I2C_CNTL_REGS_AFFECT_HDCP_I2C:%x", buff, reg->bitfields.I2C_CNTL_REGS_AFFECT_HDCP_I2C);
  sprintf(buff,"%s SW_CAN_QUEUE_I2C_GO:%x", buff, reg->bitfields.SW_CAN_QUEUE_I2C_GO);
  sprintf(buff,"%s USE_HDCP_I2C_SHORT_READS:%x", buff, reg->bitfields.USE_HDCP_I2C_SHORT_READS);
  sprintf(buff,"%s HDCP_MODE:%x", buff, reg->bitfields.HDCP_MODE);
  sprintf(buff,"%s HDCP_HOTPLUG_SEL_BYPASS_EN:%x", buff, reg->bitfields.HDCP_HOTPLUG_SEL_BYPASS_EN);
  sprintf(buff,"%s HDCP_HOTPLUG_SELECT:%x", buff, reg->bitfields.HDCP_HOTPLUG_SELECT);
  sprintf(buff,"%s HDCP_DEBUG_BIT7:%x", buff, reg->bitfields.HDCP_DEBUG_BIT7);
  sprintf(buff,"%s HDCP_DEBUG_ADDR:%x", buff, reg->bitfields.HDCP_DEBUG_ADDR);
  sprintf(buff,"%s HDCP_DEBUG_DATA:%x", buff, reg->bitfields.HDCP_DEBUG_DATA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CLOCK_CNTL_INDEX_M6 regCLOCK_CNTL_INDEX_M6;

__inline void dump_CLOCK_CNTL_INDEX_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regCLOCK_CNTL_INDEX_M6 *reg = (regCLOCK_CNTL_INDEX_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PLL_ADDR:%x", buff, reg->bitfields.PLL_ADDR);
  sprintf(buff,"%s PLL_WR_EN:%x", buff, reg->bitfields.PLL_WR_EN);
  sprintf(buff,"%s PPLL_DIV_SEL:%x", buff, reg->bitfields.PPLL_DIV_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CLOCK_CNTL_DATA regCLOCK_CNTL_DATA;

__inline void dump_CLOCK_CNTL_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regCLOCK_CNTL_DATA *reg = (regCLOCK_CNTL_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PPLL_DIV_0 regPPLL_DIV_0;

__inline void dump_PPLL_DIV_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPPLL_DIV_0 *reg = (regPPLL_DIV_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PPLL_FB0_DIV:%x", buff, reg->bitfields.PPLL_FB0_DIV);
  sprintf(buff,"%s PPLL_ATOMIC_UPDATE_W:%x", buff, reg->bitfields.PPLL_ATOMIC_UPDATE_W);
  sprintf(buff,"%s PPLL_POST0_DIV:%x", buff, reg->bitfields.PPLL_POST0_DIV);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PPLL_DIV_1 regPPLL_DIV_1;

__inline void dump_PPLL_DIV_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPPLL_DIV_1 *reg = (regPPLL_DIV_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PPLL_FB1_DIV:%x", buff, reg->bitfields.PPLL_FB1_DIV);
  sprintf(buff,"%s PPLL_ATOMIC_UPDATE_W:%x", buff, reg->bitfields.PPLL_ATOMIC_UPDATE_W);
  sprintf(buff,"%s PPLL_POST1_DIV:%x", buff, reg->bitfields.PPLL_POST1_DIV);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PPLL_DIV_2 regPPLL_DIV_2;

__inline void dump_PPLL_DIV_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPPLL_DIV_2 *reg = (regPPLL_DIV_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PPLL_FB2_DIV:%x", buff, reg->bitfields.PPLL_FB2_DIV);
  sprintf(buff,"%s PPLL_ATOMIC_UPDATE_W:%x", buff, reg->bitfields.PPLL_ATOMIC_UPDATE_W);
  sprintf(buff,"%s PPLL_POST2_DIV:%x", buff, reg->bitfields.PPLL_POST2_DIV);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PPLL_DIV_3 regPPLL_DIV_3;

__inline void dump_PPLL_DIV_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPPLL_DIV_3 *reg = (regPPLL_DIV_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PPLL_FB3_DIV:%x", buff, reg->bitfields.PPLL_FB3_DIV);
  sprintf(buff,"%s PPLL_ATOMIC_UPDATE_W:%x", buff, reg->bitfields.PPLL_ATOMIC_UPDATE_W);
  sprintf(buff,"%s PPLL_POST3_DIV:%x", buff, reg->bitfields.PPLL_POST3_DIV);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HTOTAL_CNTL regHTOTAL_CNTL;

__inline void dump_HTOTAL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regHTOTAL_CNTL *reg = (regHTOTAL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HTOT_PIX_SLIP:%x", buff, reg->bitfields.HTOT_PIX_SLIP);
  sprintf(buff,"%s HTOT_VCLK_SLIP:%x", buff, reg->bitfields.HTOT_VCLK_SLIP);
  sprintf(buff,"%s HTOT_PPLL_SLIP:%x", buff, reg->bitfields.HTOT_PPLL_SLIP);
  sprintf(buff,"%s HTOT_CNTL_EDGE:%x", buff, reg->bitfields.HTOT_CNTL_EDGE);
  sprintf(buff,"%s HTOT_CNTL_VGA_EN:%x", buff, reg->bitfields.HTOT_CNTL_VGA_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PLL_TEST_CNTL_M6 regPLL_TEST_CNTL_M6;

__inline void dump_PLL_TEST_CNTL_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regPLL_TEST_CNTL_M6 *reg = (regPLL_TEST_CNTL_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TST_SRC_SEL:%x", buff, reg->bitfields.TST_SRC_SEL);
  sprintf(buff,"%s TST_SRC_INV:%x", buff, reg->bitfields.TST_SRC_INV);
  sprintf(buff,"%s TST_DIVIDERS:%x", buff, reg->bitfields.TST_DIVIDERS);
  sprintf(buff,"%s PLL_MASK_READ_B:%x", buff, reg->bitfields.PLL_MASK_READ_B);
  sprintf(buff,"%s TESTCLK_MUX_SEL:%x", buff, reg->bitfields.TESTCLK_MUX_SEL);
  sprintf(buff,"%s ANALOG_MON:%x", buff, reg->bitfields.ANALOG_MON);
  sprintf(buff,"%s TEST_COUNT:%x", buff, reg->bitfields.TEST_COUNT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union P2PLL_DIV_0 regP2PLL_DIV_0;

__inline void dump_P2PLL_DIV_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regP2PLL_DIV_0 *reg = (regP2PLL_DIV_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s P2PLL_FB_DIV:%x", buff, reg->bitfields.P2PLL_FB_DIV);
  sprintf(buff,"%s P2PLL_ATOMIC_UPDATE_W:%x", buff, reg->bitfields.P2PLL_ATOMIC_UPDATE_W);
  sprintf(buff,"%s P2PLL_POST_DIV:%x", buff, reg->bitfields.P2PLL_POST_DIV);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HTOTAL2_CNTL regHTOTAL2_CNTL;

__inline void dump_HTOTAL2_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regHTOTAL2_CNTL *reg = (regHTOTAL2_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HTOT2_PIX_SLIP:%x", buff, reg->bitfields.HTOT2_PIX_SLIP);
  sprintf(buff,"%s HTOT2_PIX2CLK_SLIP:%x", buff, reg->bitfields.HTOT2_PIX2CLK_SLIP);
  sprintf(buff,"%s HTOT2_P2PLL_SLIP:%x", buff, reg->bitfields.HTOT2_P2PLL_SLIP);
  sprintf(buff,"%s HTOT2_CNTL_EDGE:%x", buff, reg->bitfields.HTOT2_CNTL_EDGE);
  sprintf(buff,"%s HTOT2_CNTL_UPDATE:%x", buff, reg->bitfields.HTOT2_CNTL_UPDATE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250DAC_CNTL2 regrv250DAC_CNTL2;

__inline void dump_rv250DAC_CNTL2(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250DAC_CNTL2 *reg = (regrv250DAC_CNTL2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_CLK_SEL:%x", buff, reg->bitfields.DAC_CLK_SEL);
  sprintf(buff,"%s DAC2_CLK_SEL:%x", buff, reg->bitfields.DAC2_CLK_SEL);
  sprintf(buff,"%s PALETTE_ACCESS_CNTL:%x", buff, reg->bitfields.PALETTE_ACCESS_CNTL);
  sprintf(buff,"%s DAC2_CMP_EN:%x", buff, reg->bitfields.DAC2_CMP_EN);
  sprintf(buff,"%s DAC2_CMP_OUT_R:%x", buff, reg->bitfields.DAC2_CMP_OUT_R);
  sprintf(buff,"%s DAC2_CMP_OUT_G:%x", buff, reg->bitfields.DAC2_CMP_OUT_G);
  sprintf(buff,"%s DAC2_CMP_OUT_B:%x", buff, reg->bitfields.DAC2_CMP_OUT_B);
  sprintf(buff,"%s DAC2_CMP_OUTPUT:%x", buff, reg->bitfields.DAC2_CMP_OUTPUT);
  sprintf(buff,"%s DAC2_EXPAND_MODE:%x", buff, reg->bitfields.DAC2_EXPAND_MODE);
  sprintf(buff,"%s CRT2_SENSE:%x", buff, reg->bitfields.CRT2_SENSE);
  sprintf(buff,"%s CRT2_DETECTION_ON:%x", buff, reg->bitfields.CRT2_DETECTION_ON);
  sprintf(buff,"%s DAC_CRC2_CONT_EN:%x", buff, reg->bitfields.DAC_CRC2_CONT_EN);
  sprintf(buff,"%s DAC_CRC2_EN:%x", buff, reg->bitfields.DAC_CRC2_EN);
  sprintf(buff,"%s DAC_CRC2_FIELD:%x", buff, reg->bitfields.DAC_CRC2_FIELD);
  sprintf(buff,"%s DAC2_LUT_COUNTER_LIMIT:%x", buff, reg->bitfields.DAC2_LUT_COUNTER_LIMIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_MASTER_CNTL regTV_MASTER_CNTL;

__inline void dump_TV_MASTER_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_MASTER_CNTL *reg = (regTV_MASTER_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TV_ASYNC_RST:%x", buff, reg->bitfields.TV_ASYNC_RST);
  sprintf(buff,"%s CRT_ASYNC_RST:%x", buff, reg->bitfields.CRT_ASYNC_RST);
  sprintf(buff,"%s RESTART_PHASE_FIX:%x", buff, reg->bitfields.RESTART_PHASE_FIX);
  sprintf(buff,"%s TV_FIFO_ASYNC_RST:%x", buff, reg->bitfields.TV_FIFO_ASYNC_RST);
  sprintf(buff,"%s MV_BP_LEVEL_FIX_EN:%x", buff, reg->bitfields.MV_BP_LEVEL_FIX_EN);
  sprintf(buff,"%s EXTRA_BIT_ONE_0:%x", buff, reg->bitfields.EXTRA_BIT_ONE_0);
  sprintf(buff,"%s CRT_FIFO_CE_EN:%x", buff, reg->bitfields.CRT_FIFO_CE_EN);
  sprintf(buff,"%s TV_FIFO_CE_EN:%x", buff, reg->bitfields.TV_FIFO_CE_EN);
  sprintf(buff,"%s RE_SYNC_NOW_SEL:%x", buff, reg->bitfields.RE_SYNC_NOW_SEL);
  sprintf(buff,"%s EXTRA_BIT_ZERO_1:%x", buff, reg->bitfields.EXTRA_BIT_ZERO_1);
  sprintf(buff,"%s EXTRA_BIT_ONE_1:%x", buff, reg->bitfields.EXTRA_BIT_ONE_1);
  sprintf(buff,"%s EXTRA_BIT_ZERO_2:%x", buff, reg->bitfields.EXTRA_BIT_ZERO_2);
  sprintf(buff,"%s EXTRA_BIT_ONE_2:%x", buff, reg->bitfields.EXTRA_BIT_ONE_2);
  sprintf(buff,"%s TVCLK_ALWAYS_ONb:%x", buff, reg->bitfields.TVCLK_ALWAYS_ONb);
  sprintf(buff,"%s TV_ON:%x", buff, reg->bitfields.TV_ON);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_RGB_CNTL regTV_RGB_CNTL;

__inline void dump_TV_RGB_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_RGB_CNTL *reg = (regTV_RGB_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s UV_DITHER_EN:%x", buff, reg->bitfields.UV_DITHER_EN);
  sprintf(buff,"%s SWITCH_TO_BLUE:%x", buff, reg->bitfields.SWITCH_TO_BLUE);
  sprintf(buff,"%s RGB_DITHER_EN:%x", buff, reg->bitfields.RGB_DITHER_EN);
  sprintf(buff,"%s RGB_SRC_SEL:%x", buff, reg->bitfields.RGB_SRC_SEL);
  sprintf(buff,"%s RGB_CONVERT_BY_PASS:%x", buff, reg->bitfields.RGB_CONVERT_BY_PASS);
  sprintf(buff,"%s RE_SYNC_NOW_POS:%x", buff, reg->bitfields.RE_SYNC_NOW_POS);
  sprintf(buff,"%s IGNORE_ODD_LINES:%x", buff, reg->bitfields.IGNORE_ODD_LINES);
  sprintf(buff,"%s DSP_VCOUNT_RST:%x", buff, reg->bitfields.DSP_VCOUNT_RST);
  sprintf(buff,"%s DSP2_VCOUNT_RST:%x", buff, reg->bitfields.DSP2_VCOUNT_RST);
  sprintf(buff,"%s UVRAM_READ_MARGIN:%x", buff, reg->bitfields.UVRAM_READ_MARGIN);
  sprintf(buff,"%s FIFORAM_FFMACRO_READ_MARGIN:%x", buff, reg->bitfields.FIFORAM_FFMACRO_READ_MARGIN);
  sprintf(buff,"%s RGB_ATTEN_SEL:%x", buff, reg->bitfields.RGB_ATTEN_SEL);
  sprintf(buff,"%s RGB_ATTEN_VAL:%x", buff, reg->bitfields.RGB_ATTEN_VAL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_SYNC_CNTL regTV_SYNC_CNTL;

__inline void dump_TV_SYNC_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_SYNC_CNTL *reg = (regTV_SYNC_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SYNC_OE:%x", buff, reg->bitfields.SYNC_OE);
  sprintf(buff,"%s SYNC_OUT:%x", buff, reg->bitfields.SYNC_OUT);
  sprintf(buff,"%s SYNC_IN:%x", buff, reg->bitfields.SYNC_IN);
  sprintf(buff,"%s SYNC_PUB:%x", buff, reg->bitfields.SYNC_PUB);
  sprintf(buff,"%s SYNC_PD:%x", buff, reg->bitfields.SYNC_PD);
  sprintf(buff,"%s TV_SYNC_IO_DRIVE:%x", buff, reg->bitfields.TV_SYNC_IO_DRIVE);
  sprintf(buff,"%s SYNC_MX:%x", buff, reg->bitfields.SYNC_MX);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_HTOTAL regTV_HTOTAL;

__inline void dump_TV_HTOTAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_HTOTAL *reg = (regTV_HTOTAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_HDISP regTV_HDISP;

__inline void dump_TV_HDISP(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_HDISP *reg = (regTV_HDISP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_HSTART regTV_HSTART;

__inline void dump_TV_HSTART(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_HSTART *reg = (regTV_HSTART *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_HCOUNT regTV_HCOUNT;

__inline void dump_TV_HCOUNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_HCOUNT *reg = (regTV_HCOUNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VTOTAL regTV_VTOTAL;

__inline void dump_TV_VTOTAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VTOTAL *reg = (regTV_VTOTAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VDISP regTV_VDISP;

__inline void dump_TV_VDISP(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VDISP *reg = (regTV_VDISP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VCOUNT regTV_VCOUNT;

__inline void dump_TV_VCOUNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VCOUNT *reg = (regTV_VCOUNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_FTOTAL regTV_FTOTAL;

__inline void dump_TV_FTOTAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_FTOTAL *reg = (regTV_FTOTAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_FCOUNT regTV_FCOUNT;

__inline void dump_TV_FCOUNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_FCOUNT *reg = (regTV_FCOUNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_FRESTART regTV_FRESTART;

__inline void dump_TV_FRESTART(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_FRESTART *reg = (regTV_FRESTART *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_HRESTART regTV_HRESTART;

__inline void dump_TV_HRESTART(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_HRESTART *reg = (regTV_HRESTART *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VRESTART regTV_VRESTART;

__inline void dump_TV_VRESTART(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VRESTART *reg = (regTV_VRESTART *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_HOST_READ_DATA regTV_HOST_READ_DATA;

__inline void dump_TV_HOST_READ_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_HOST_READ_DATA *reg = (regTV_HOST_READ_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HOST_RD_DATA_W0:%x", buff, reg->bitfields.HOST_RD_DATA_W0);
  sprintf(buff,"%s HOST_RD_DATA_W1:%x", buff, reg->bitfields.HOST_RD_DATA_W1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_HOST_WRITE_DATA regTV_HOST_WRITE_DATA;

__inline void dump_TV_HOST_WRITE_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_HOST_WRITE_DATA *reg = (regTV_HOST_WRITE_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HOST_WT_DATA_W0:%x", buff, reg->bitfields.HOST_WT_DATA_W0);
  sprintf(buff,"%s HOST_WT_DATA_W1:%x", buff, reg->bitfields.HOST_WT_DATA_W1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_HOST_RD_WT_CNTL regTV_HOST_RD_WT_CNTL;

__inline void dump_TV_HOST_RD_WT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_HOST_RD_WT_CNTL *reg = (regTV_HOST_RD_WT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HOST_ADR:%x", buff, reg->bitfields.HOST_ADR);
  sprintf(buff,"%s HOST_FIFO_RD:%x", buff, reg->bitfields.HOST_FIFO_RD);
  sprintf(buff,"%s HOST_FIFO_RD_ACK:%x", buff, reg->bitfields.HOST_FIFO_RD_ACK);
  sprintf(buff,"%s HOST_FIFO_WT:%x", buff, reg->bitfields.HOST_FIFO_WT);
  sprintf(buff,"%s HOST_FIFO_WT_ACK:%x", buff, reg->bitfields.HOST_FIFO_WT_ACK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VSCALER_CNTL1 regTV_VSCALER_CNTL1;

__inline void dump_TV_VSCALER_CNTL1(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VSCALER_CNTL1 *reg = (regTV_VSCALER_CNTL1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s UV_INC:%x", buff, reg->bitfields.UV_INC);
  sprintf(buff,"%s UV_THINNER:%x", buff, reg->bitfields.UV_THINNER);
  sprintf(buff,"%s Y_W_EN:%x", buff, reg->bitfields.Y_W_EN);
  sprintf(buff,"%s Y_DEL_W_SIG:%x", buff, reg->bitfields.Y_DEL_W_SIG);
  sprintf(buff,"%s RESTART_FIELD:%x", buff, reg->bitfields.RESTART_FIELD);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_TIMING_CNTL regTV_TIMING_CNTL;

__inline void dump_TV_TIMING_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_TIMING_CNTL *reg = (regTV_TIMING_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s H_INC:%x", buff, reg->bitfields.H_INC);
  sprintf(buff,"%s REQ_DELAY:%x", buff, reg->bitfields.REQ_DELAY);
  sprintf(buff,"%s REQ_Y_FIRST:%x", buff, reg->bitfields.REQ_Y_FIRST);
  sprintf(buff,"%s MV_VBIPULSE_ENB:%x", buff, reg->bitfields.MV_VBIPULSE_ENB);
  sprintf(buff,"%s FORCE_BURST_ALWAYS:%x", buff, reg->bitfields.FORCE_BURST_ALWAYS);
  sprintf(buff,"%s UV_POST_SCALE_BYPASS:%x", buff, reg->bitfields.UV_POST_SCALE_BYPASS);
  sprintf(buff,"%s UV_OUTPUT_POST_SCALE:%x", buff, reg->bitfields.UV_OUTPUT_POST_SCALE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VSCALER_CNTL2 regTV_VSCALER_CNTL2;

__inline void dump_TV_VSCALER_CNTL2(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VSCALER_CNTL2 *reg = (regTV_VSCALER_CNTL2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DITHER_MODE:%x", buff, reg->bitfields.DITHER_MODE);
  sprintf(buff,"%s Y_OUTPUT_DITHER_EN:%x", buff, reg->bitfields.Y_OUTPUT_DITHER_EN);
  sprintf(buff,"%s UV_OUTPUT_DITHER_EN:%x", buff, reg->bitfields.UV_OUTPUT_DITHER_EN);
  sprintf(buff,"%s UV_TO_BUF_DITHER_EN:%x", buff, reg->bitfields.UV_TO_BUF_DITHER_EN);
  sprintf(buff,"%s UV_ACCUM_INIT:%x", buff, reg->bitfields.UV_ACCUM_INIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_Y_FALL_CNTL regTV_Y_FALL_CNTL;

__inline void dump_TV_Y_FALL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_Y_FALL_CNTL *reg = (regTV_Y_FALL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s Y_FALL_ACCUM_INIT:%x", buff, reg->bitfields.Y_FALL_ACCUM_INIT);
  sprintf(buff,"%s Y_FALL_PING_PONG:%x", buff, reg->bitfields.Y_FALL_PING_PONG);
  sprintf(buff,"%s Y_COEF_EN:%x", buff, reg->bitfields.Y_COEF_EN);
  sprintf(buff,"%s Y_COEF_VALUE:%x", buff, reg->bitfields.Y_COEF_VALUE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_Y_RISE_CNTL regTV_Y_RISE_CNTL;

__inline void dump_TV_Y_RISE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_Y_RISE_CNTL *reg = (regTV_Y_RISE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s Y_RISE_ACCUM_INIT:%x", buff, reg->bitfields.Y_RISE_ACCUM_INIT);
  sprintf(buff,"%s Y_RISE_PING_PONG:%x", buff, reg->bitfields.Y_RISE_PING_PONG);
  sprintf(buff,"%s MV_STRIPE_ENB:%x", buff, reg->bitfields.MV_STRIPE_ENB);
  sprintf(buff,"%s MV_BPPULSE_ENB:%x", buff, reg->bitfields.MV_BPPULSE_ENB);
  sprintf(buff,"%s MV_ZONE_1_PHASE:%x", buff, reg->bitfields.MV_ZONE_1_PHASE);
  sprintf(buff,"%s MV_ZONE_2_PHASE:%x", buff, reg->bitfields.MV_ZONE_2_PHASE);
  sprintf(buff,"%s MV_ZONE_3_PHASE:%x", buff, reg->bitfields.MV_ZONE_3_PHASE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_Y_SAW_TOOTH_CNTL regTV_Y_SAW_TOOTH_CNTL;

__inline void dump_TV_Y_SAW_TOOTH_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_Y_SAW_TOOTH_CNTL *reg = (regTV_Y_SAW_TOOTH_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s Y_SAW_TOOTH_AMP:%x", buff, reg->bitfields.Y_SAW_TOOTH_AMP);
  sprintf(buff,"%s Y_SAW_TOOTH_SLOPE:%x", buff, reg->bitfields.Y_SAW_TOOTH_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_UPSAMP_AND_GAIN_CNTL regTV_UPSAMP_AND_GAIN_CNTL;

__inline void dump_TV_UPSAMP_AND_GAIN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_UPSAMP_AND_GAIN_CNTL *reg = (regTV_UPSAMP_AND_GAIN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s YUPSAMP_EN:%x", buff, reg->bitfields.YUPSAMP_EN);
  sprintf(buff,"%s YUPSAMP_FLAT:%x", buff, reg->bitfields.YUPSAMP_FLAT);
  sprintf(buff,"%s UVUPSAMP_EN:%x", buff, reg->bitfields.UVUPSAMP_EN);
  sprintf(buff,"%s UVUPSAMP_FLAT:%x", buff, reg->bitfields.UVUPSAMP_FLAT);
  sprintf(buff,"%s YUPSAMP_WINDOW_CNTL:%x", buff, reg->bitfields.YUPSAMP_WINDOW_CNTL);
  sprintf(buff,"%s YUPSAMP_COEF_SEL:%x", buff, reg->bitfields.YUPSAMP_COEF_SEL);
  sprintf(buff,"%s Y_BREAK_EN:%x", buff, reg->bitfields.Y_BREAK_EN);
  sprintf(buff,"%s UV_BREAK_EN:%x", buff, reg->bitfields.UV_BREAK_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_GAIN_LIMIT_SETTINGS regTV_GAIN_LIMIT_SETTINGS;

__inline void dump_TV_GAIN_LIMIT_SETTINGS(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_GAIN_LIMIT_SETTINGS *reg = (regTV_GAIN_LIMIT_SETTINGS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s Y_GAIN_LIMIT:%x", buff, reg->bitfields.Y_GAIN_LIMIT);
  sprintf(buff,"%s UV_GAIN_LIMIT:%x", buff, reg->bitfields.UV_GAIN_LIMIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_LINEAR_GAIN_SETTINGS regTV_LINEAR_GAIN_SETTINGS;

__inline void dump_TV_LINEAR_GAIN_SETTINGS(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_LINEAR_GAIN_SETTINGS *reg = (regTV_LINEAR_GAIN_SETTINGS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s Y_GAIN:%x", buff, reg->bitfields.Y_GAIN);
  sprintf(buff,"%s UV_GAIN:%x", buff, reg->bitfields.UV_GAIN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_MODULATOR_CNTL1 regTV_MODULATOR_CNTL1;

__inline void dump_TV_MODULATOR_CNTL1(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_MODULATOR_CNTL1 *reg = (regTV_MODULATOR_CNTL1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s YY_FILT_BLEND:%x", buff, reg->bitfields.YY_FILT_BLEND);
  sprintf(buff,"%s YFLT_EN:%x", buff, reg->bitfields.YFLT_EN);
  sprintf(buff,"%s UVFLT_EN:%x", buff, reg->bitfields.UVFLT_EN);
  sprintf(buff,"%s ALT_PHASE_EN:%x", buff, reg->bitfields.ALT_PHASE_EN);
  sprintf(buff,"%s SYNC_TIP_LEVEL:%x", buff, reg->bitfields.SYNC_TIP_LEVEL);
  sprintf(buff,"%s SET_UP_LEVEL:%x", buff, reg->bitfields.SET_UP_LEVEL);
  sprintf(buff,"%s BLANK_LEVEL:%x", buff, reg->bitfields.BLANK_LEVEL);
  sprintf(buff,"%s SLEW_RATE_LIMIT:%x", buff, reg->bitfields.SLEW_RATE_LIMIT);
  sprintf(buff,"%s FORCE_BLACK_WHITE:%x", buff, reg->bitfields.FORCE_BLACK_WHITE);
  sprintf(buff,"%s MV_VSYNC_AMP:%x", buff, reg->bitfields.MV_VSYNC_AMP);
  sprintf(buff,"%s MV_HSYNC_AMP:%x", buff, reg->bitfields.MV_HSYNC_AMP);
  sprintf(buff,"%s CY_FILT_BLEND:%x", buff, reg->bitfields.CY_FILT_BLEND);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_MODULATOR_CNTL2 regTV_MODULATOR_CNTL2;

__inline void dump_TV_MODULATOR_CNTL2(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_MODULATOR_CNTL2 *reg = (regTV_MODULATOR_CNTL2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s U_BURST_LEVEL:%x", buff, reg->bitfields.U_BURST_LEVEL);
  sprintf(buff,"%s V_BURST_LEVEL:%x", buff, reg->bitfields.V_BURST_LEVEL);
  sprintf(buff,"%s SETUP_DELAY:%x", buff, reg->bitfields.SETUP_DELAY);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_MV_MODE_CNTL regTV_MV_MODE_CNTL;

__inline void dump_TV_MV_MODE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_MV_MODE_CNTL *reg = (regTV_MV_MODE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MV_AGC_CYC_MODE:%x", buff, reg->bitfields.MV_AGC_CYC_MODE);
  sprintf(buff,"%s MV_AGC_CYC_TMODE_EN:%x", buff, reg->bitfields.MV_AGC_CYC_TMODE_EN);
  sprintf(buff,"%s MV_AGC_AMPL_STEP:%x", buff, reg->bitfields.MV_AGC_AMPL_STEP);
  sprintf(buff,"%s MV_AGC_CLK_DEVIDE_SEL:%x", buff, reg->bitfields.MV_AGC_CLK_DEVIDE_SEL);
  sprintf(buff,"%s MV_OVRB_EN:%x", buff, reg->bitfields.MV_OVRB_EN);
  sprintf(buff,"%s MV_OVRB_LEVEL:%x", buff, reg->bitfields.MV_OVRB_LEVEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_MV_STRIPE_CNTL regTV_MV_STRIPE_CNTL;

__inline void dump_TV_MV_STRIPE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_MV_STRIPE_CNTL *reg = (regTV_MV_STRIPE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MV_LINE_1_PHASE:%x", buff, reg->bitfields.MV_LINE_1_PHASE);
  sprintf(buff,"%s MV_LINE_2_PHASE:%x", buff, reg->bitfields.MV_LINE_2_PHASE);
  sprintf(buff,"%s MV_LINE_3_PHASE:%x", buff, reg->bitfields.MV_LINE_3_PHASE);
  sprintf(buff,"%s MV_LINE_4_PHASE:%x", buff, reg->bitfields.MV_LINE_4_PHASE);
  sprintf(buff,"%s MV_LINE_5_PHASE:%x", buff, reg->bitfields.MV_LINE_5_PHASE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_MV_LEVEL_CNTL regTV_MV_LEVEL_CNTL;

__inline void dump_TV_MV_LEVEL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_MV_LEVEL_CNTL *reg = (regTV_MV_LEVEL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MV_BLANK_LEVEL:%x", buff, reg->bitfields.MV_BLANK_LEVEL);
  sprintf(buff,"%s MV_SETUP_LEVEL:%x", buff, reg->bitfields.MV_SETUP_LEVEL);
  sprintf(buff,"%s MV_AGC_AMPL_A:%x", buff, reg->bitfields.MV_AGC_AMPL_A);
  sprintf(buff,"%s MV_AGC_AMPL_B:%x", buff, reg->bitfields.MV_AGC_AMPL_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_MV_LEVEL_CNTL2 regTV_MV_LEVEL_CNTL2;

__inline void dump_TV_MV_LEVEL_CNTL2(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_MV_LEVEL_CNTL2 *reg = (regTV_MV_LEVEL_CNTL2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MV_AGC_AMPL_MAX:%x", buff, reg->bitfields.MV_AGC_AMPL_MAX);
  sprintf(buff,"%s MV_BP_LEVEL:%x", buff, reg->bitfields.MV_BP_LEVEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_PRE_DAC_MUX_CNTL regTV_PRE_DAC_MUX_CNTL;

__inline void dump_TV_PRE_DAC_MUX_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_PRE_DAC_MUX_CNTL *reg = (regTV_PRE_DAC_MUX_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s Y_RED_EN:%x", buff, reg->bitfields.Y_RED_EN);
  sprintf(buff,"%s C_GRN_EN:%x", buff, reg->bitfields.C_GRN_EN);
  sprintf(buff,"%s CMP_BLU_EN:%x", buff, reg->bitfields.CMP_BLU_EN);
  sprintf(buff,"%s DAC_DITHER_EN:%x", buff, reg->bitfields.DAC_DITHER_EN);
  sprintf(buff,"%s RED_MX:%x", buff, reg->bitfields.RED_MX);
  sprintf(buff,"%s GRN_MX:%x", buff, reg->bitfields.GRN_MX);
  sprintf(buff,"%s BLU_MX:%x", buff, reg->bitfields.BLU_MX);
  sprintf(buff,"%s FORCE_DAC_DATA:%x", buff, reg->bitfields.FORCE_DAC_DATA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_DAC_CNTL regTV_DAC_CNTL;

__inline void dump_TV_DAC_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_DAC_CNTL *reg = (regTV_DAC_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s NBLANK:%x", buff, reg->bitfields.NBLANK);
  sprintf(buff,"%s NHOLD:%x", buff, reg->bitfields.NHOLD);
  sprintf(buff,"%s PEDESTAL:%x", buff, reg->bitfields.PEDESTAL);
  sprintf(buff,"%s DETECT:%x", buff, reg->bitfields.DETECT);
  sprintf(buff,"%s CMPOUT:%x", buff, reg->bitfields.CMPOUT);
  sprintf(buff,"%s BGSLEEP:%x", buff, reg->bitfields.BGSLEEP);
  sprintf(buff,"%s STD:%x", buff, reg->bitfields.STD);
  sprintf(buff,"%s MON:%x", buff, reg->bitfields.MON);
  sprintf(buff,"%s BGADJ:%x", buff, reg->bitfields.BGADJ);
  sprintf(buff,"%s DACADJ:%x", buff, reg->bitfields.DACADJ);
  sprintf(buff,"%s RDACPD:%x", buff, reg->bitfields.RDACPD);
  sprintf(buff,"%s GDACPD:%x", buff, reg->bitfields.GDACPD);
  sprintf(buff,"%s BDACPD:%x", buff, reg->bitfields.BDACPD);
  sprintf(buff,"%s RDACDET:%x", buff, reg->bitfields.RDACDET);
  sprintf(buff,"%s GDACDET:%x", buff, reg->bitfields.GDACDET);
  sprintf(buff,"%s BDACDET:%x", buff, reg->bitfields.BDACDET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_CRC_CNTL regTV_CRC_CNTL;

__inline void dump_TV_CRC_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_CRC_CNTL *reg = (regTV_CRC_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s V_COMP_DATA_EN:%x", buff, reg->bitfields.V_COMP_DATA_EN);
  sprintf(buff,"%s V_COMP_GATE:%x", buff, reg->bitfields.V_COMP_GATE);
  sprintf(buff,"%s V_COMP_EN:%x", buff, reg->bitfields.V_COMP_EN);
  sprintf(buff,"%s RST_SUBC_ONRSTRT:%x", buff, reg->bitfields.RST_SUBC_ONRSTRT);
  sprintf(buff,"%s CRC_TV_RSTRT_SEL:%x", buff, reg->bitfields.CRC_TV_RSTRT_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VIDEO_PORT_SIG regTV_VIDEO_PORT_SIG;

__inline void dump_TV_VIDEO_PORT_SIG(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VIDEO_PORT_SIG *reg = (regTV_VIDEO_PORT_SIG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VBI_CC_CNTL regTV_VBI_CC_CNTL;

__inline void dump_TV_VBI_CC_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VBI_CC_CNTL *reg = (regTV_VBI_CC_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VBI_CC_DATA:%x", buff, reg->bitfields.VBI_CC_DATA);
  sprintf(buff,"%s VBI_CC_WT:%x", buff, reg->bitfields.VBI_CC_WT);
  sprintf(buff,"%s VBI_CC_WT_ACK:%x", buff, reg->bitfields.VBI_CC_WT_ACK);
  sprintf(buff,"%s VBI_CC_HOLD:%x", buff, reg->bitfields.VBI_CC_HOLD);
  sprintf(buff,"%s VBI_DECODE_EN:%x", buff, reg->bitfields.VBI_DECODE_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VBI_EDS_CNTL regTV_VBI_EDS_CNTL;

__inline void dump_TV_VBI_EDS_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VBI_EDS_CNTL *reg = (regTV_VBI_EDS_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VBI_EDS_DATA:%x", buff, reg->bitfields.VBI_EDS_DATA);
  sprintf(buff,"%s VBI_EDS_WT:%x", buff, reg->bitfields.VBI_EDS_WT);
  sprintf(buff,"%s VBI_EDS_WT_ACK:%x", buff, reg->bitfields.VBI_EDS_WT_ACK);
  sprintf(buff,"%s VBI_EDS_HOLD:%x", buff, reg->bitfields.VBI_EDS_HOLD);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VBI_20BIT_CNTL regTV_VBI_20BIT_CNTL;

__inline void dump_TV_VBI_20BIT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VBI_20BIT_CNTL *reg = (regTV_VBI_20BIT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VBI_20BIT_DATA0:%x", buff, reg->bitfields.VBI_20BIT_DATA0);
  sprintf(buff,"%s VBI_20BIT_DATA1:%x", buff, reg->bitfields.VBI_20BIT_DATA1);
  sprintf(buff,"%s VBI_20BIT_WT:%x", buff, reg->bitfields.VBI_20BIT_WT);
  sprintf(buff,"%s VBI_20BIT_WT_ACK:%x", buff, reg->bitfields.VBI_20BIT_WT_ACK);
  sprintf(buff,"%s VBI_20BIT_HOLD:%x", buff, reg->bitfields.VBI_20BIT_HOLD);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VBI_DTO_CNTL regTV_VBI_DTO_CNTL;

__inline void dump_TV_VBI_DTO_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VBI_DTO_CNTL *reg = (regTV_VBI_DTO_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VBI_CC_DTO_P:%x", buff, reg->bitfields.VBI_CC_DTO_P);
  sprintf(buff,"%s VBI_20BIT_DTO_P:%x", buff, reg->bitfields.VBI_20BIT_DTO_P);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VBI_LEVEL_CNTL regTV_VBI_LEVEL_CNTL;

__inline void dump_TV_VBI_LEVEL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VBI_LEVEL_CNTL *reg = (regTV_VBI_LEVEL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VBI_CC_LEVEL:%x", buff, reg->bitfields.VBI_CC_LEVEL);
  sprintf(buff,"%s VBI_20BIT_LEVEL:%x", buff, reg->bitfields.VBI_20BIT_LEVEL);
  sprintf(buff,"%s VBI_CLK_RUNIN_GAIN:%x", buff, reg->bitfields.VBI_CLK_RUNIN_GAIN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_UV_ADR regTV_UV_ADR;

__inline void dump_TV_UV_ADR(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_UV_ADR *reg = (regTV_UV_ADR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MAX_UV_ADR:%x", buff, reg->bitfields.MAX_UV_ADR);
  sprintf(buff,"%s TABLE1_BOT_ADR:%x", buff, reg->bitfields.TABLE1_BOT_ADR);
  sprintf(buff,"%s TABLE3_TOP_ADR:%x", buff, reg->bitfields.TABLE3_TOP_ADR);
  sprintf(buff,"%s MV_DECODE_EN:%x", buff, reg->bitfields.MV_DECODE_EN);
  sprintf(buff,"%s HCODE_TABLE_SEL:%x", buff, reg->bitfields.HCODE_TABLE_SEL);
  sprintf(buff,"%s VCODE_TABLE_SEL:%x", buff, reg->bitfields.VCODE_TABLE_SEL);
  sprintf(buff,"%s MV_LINES_PER_STRIPE:%x", buff, reg->bitfields.MV_LINES_PER_STRIPE);
  sprintf(buff,"%s SWITCH_TABLE_REQ:%x", buff, reg->bitfields.SWITCH_TABLE_REQ);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VSYNC_DIFF_CNTL regTV_VSYNC_DIFF_CNTL;

__inline void dump_TV_VSYNC_DIFF_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VSYNC_DIFF_CNTL *reg = (regTV_VSYNC_DIFF_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VSYNC_DIFF_MEASURE_EN:%x", buff, reg->bitfields.VSYNC_DIFF_MEASURE_EN);
  sprintf(buff,"%s VSYNC_RESTART_AT_LIMIT:%x", buff, reg->bitfields.VSYNC_RESTART_AT_LIMIT);
  sprintf(buff,"%s VSYNC_HW_LOCK_EN:%x", buff, reg->bitfields.VSYNC_HW_LOCK_EN);
  sprintf(buff,"%s VSYNC_HW_LOCK_TYPE:%x", buff, reg->bitfields.VSYNC_HW_LOCK_TYPE);
  sprintf(buff,"%s VSYNC_SLIP_REQ_EN:%x", buff, reg->bitfields.VSYNC_SLIP_REQ_EN);
  sprintf(buff,"%s INVERT_LOCK_CNTL:%x", buff, reg->bitfields.INVERT_LOCK_CNTL);
  sprintf(buff,"%s SLIP_DURING_HSYNC_ONLY:%x", buff, reg->bitfields.SLIP_DURING_HSYNC_ONLY);
  sprintf(buff,"%s RESTART_TWICE:%x", buff, reg->bitfields.RESTART_TWICE);
  sprintf(buff,"%s DELAY_RESTART:%x", buff, reg->bitfields.DELAY_RESTART);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VSYNC_DIFF_LIMITS regTV_VSYNC_DIFF_LIMITS;

__inline void dump_TV_VSYNC_DIFF_LIMITS(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VSYNC_DIFF_LIMITS *reg = (regTV_VSYNC_DIFF_LIMITS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DIFF_LIMIT_LOW:%x", buff, reg->bitfields.DIFF_LIMIT_LOW);
  sprintf(buff,"%s DIFF_LIMIT_HIGH:%x", buff, reg->bitfields.DIFF_LIMIT_HIGH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_VSYNC_DIFF_RD_DATA regTV_VSYNC_DIFF_RD_DATA;

__inline void dump_TV_VSYNC_DIFF_RD_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_VSYNC_DIFF_RD_DATA *reg = (regTV_VSYNC_DIFF_RD_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s UPDATE_END_TOGGLE:%x", buff, reg->bitfields.UPDATE_END_TOGGLE);
  sprintf(buff,"%s VSYNC_DIFF:%x", buff, reg->bitfields.VSYNC_DIFF);
  sprintf(buff,"%s VSYNC_DIFF_OVERFLOW:%x", buff, reg->bitfields.VSYNC_DIFF_OVERFLOW);
  sprintf(buff,"%s TV_FIRST:%x", buff, reg->bitfields.TV_FIRST);
  sprintf(buff,"%s UPDATE_START_TOGGLE:%x", buff, reg->bitfields.UPDATE_START_TOGGLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_RB_BASE regCP_RB_BASE;

__inline void dump_CP_RB_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_RB_BASE *reg = (regCP_RB_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_RB_CNTL regCP_RB_CNTL;

__inline void dump_CP_RB_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_RB_CNTL *reg = (regCP_RB_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s RB_BUFSZ:%x", buff, reg->bitfields.RB_BUFSZ);
  sprintf(buff,"%s RB_BLKSZ:%x", buff, reg->bitfields.RB_BLKSZ);
  sprintf(buff,"%s BUF_SWAP:%x", buff, reg->bitfields.BUF_SWAP);
  sprintf(buff,"%s MAX_FETCH:%x", buff, reg->bitfields.MAX_FETCH);
  sprintf(buff,"%s RB_NO_UPDATE:%x", buff, reg->bitfields.RB_NO_UPDATE);
  sprintf(buff,"%s RB_RPTR_WR_ENA:%x", buff, reg->bitfields.RB_RPTR_WR_ENA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_RB_RPTR_ADDR regCP_RB_RPTR_ADDR;

__inline void dump_CP_RB_RPTR_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_RB_RPTR_ADDR *reg = (regCP_RB_RPTR_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s RB_RPTR_SWAP:%x", buff, reg->bitfields.RB_RPTR_SWAP);
  sprintf(buff,"%s RB_RPTR_ADDR:%x", buff, reg->bitfields.RB_RPTR_ADDR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_RB_RPTR regCP_RB_RPTR;

__inline void dump_CP_RB_RPTR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_RB_RPTR *reg = (regCP_RB_RPTR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_RB_RPTR_WR regCP_RB_RPTR_WR;

__inline void dump_CP_RB_RPTR_WR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_RB_RPTR_WR *reg = (regCP_RB_RPTR_WR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_RB_WPTR regCP_RB_WPTR;

__inline void dump_CP_RB_WPTR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_RB_WPTR *reg = (regCP_RB_WPTR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_RB_WPTR_DELAY regCP_RB_WPTR_DELAY;

__inline void dump_CP_RB_WPTR_DELAY(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_RB_WPTR_DELAY *reg = (regCP_RB_WPTR_DELAY *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PRE_WRITE_TIMER:%x", buff, reg->bitfields.PRE_WRITE_TIMER);
  sprintf(buff,"%s PRE_WRITE_LIMIT:%x", buff, reg->bitfields.PRE_WRITE_LIMIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_IB_BASE regCP_IB_BASE;

__inline void dump_CP_IB_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_IB_BASE *reg = (regCP_IB_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_IB_BUFSZ regCP_IB_BUFSZ;

__inline void dump_CP_IB_BUFSZ(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_IB_BUFSZ *reg = (regCP_IB_BUFSZ *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_IB2_BASE regCP_IB2_BASE;

__inline void dump_CP_IB2_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_IB2_BASE *reg = (regCP_IB2_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_IB2_BUFSZ regCP_IB2_BUFSZ;

__inline void dump_CP_IB2_BUFSZ(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_IB2_BUFSZ *reg = (regCP_IB2_BUFSZ *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_CSQ_CNTL regCP_CSQ_CNTL;

__inline void dump_CP_CSQ_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_CSQ_CNTL *reg = (regCP_CSQ_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CSQ_CNT_PRIMARY:%x", buff, reg->bitfields.CSQ_CNT_PRIMARY);
  sprintf(buff,"%s CSQ_CNT_INDIRECT:%x", buff, reg->bitfields.CSQ_CNT_INDIRECT);
  sprintf(buff,"%s CSQ_CNT_INDIRECT2:%x", buff, reg->bitfields.CSQ_CNT_INDIRECT2);
  sprintf(buff,"%s CSQ_MODE:%x", buff, reg->bitfields.CSQ_MODE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_CSQ_APER_PRIMARY regCP_CSQ_APER_PRIMARY;

__inline void dump_CP_CSQ_APER_PRIMARY(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_CSQ_APER_PRIMARY *reg = (regCP_CSQ_APER_PRIMARY *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_CSQ_APER_INDIRECT regCP_CSQ_APER_INDIRECT;

__inline void dump_CP_CSQ_APER_INDIRECT(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_CSQ_APER_INDIRECT *reg = (regCP_CSQ_APER_INDIRECT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_CSQ_APER_INDIRECT2 regCP_CSQ_APER_INDIRECT2;

__inline void dump_CP_CSQ_APER_INDIRECT2(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_CSQ_APER_INDIRECT2 *reg = (regCP_CSQ_APER_INDIRECT2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_CSQ_MODE regCP_CSQ_MODE;

__inline void dump_CP_CSQ_MODE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_CSQ_MODE *reg = (regCP_CSQ_MODE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s INDIRECT2_START:%x", buff, reg->bitfields.INDIRECT2_START);
  sprintf(buff,"%s INDIRECT1_START:%x", buff, reg->bitfields.INDIRECT1_START);
  sprintf(buff,"%s CSQ_INDIRECT2_MODE:%x", buff, reg->bitfields.CSQ_INDIRECT2_MODE);
  sprintf(buff,"%s CSQ_INDIRECT2_ENABLE:%x", buff, reg->bitfields.CSQ_INDIRECT2_ENABLE);
  sprintf(buff,"%s CSQ_INDIRECT1_MODE:%x", buff, reg->bitfields.CSQ_INDIRECT1_MODE);
  sprintf(buff,"%s CSQ_INDIRECT1_ENABLE:%x", buff, reg->bitfields.CSQ_INDIRECT1_ENABLE);
  sprintf(buff,"%s CSQ_PRIMARY_MODE:%x", buff, reg->bitfields.CSQ_PRIMARY_MODE);
  sprintf(buff,"%s CSQ_PRIMARY_ENABLE:%x", buff, reg->bitfields.CSQ_PRIMARY_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_ME_CNTL regCP_ME_CNTL;

__inline void dump_CP_ME_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_ME_CNTL *reg = (regCP_ME_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ME_STAT:%x", buff, reg->bitfields.ME_STAT);
  sprintf(buff,"%s ME_STATMUX:%x", buff, reg->bitfields.ME_STATMUX);
  sprintf(buff,"%s ME_BUSY:%x", buff, reg->bitfields.ME_BUSY);
  sprintf(buff,"%s ME_MODE:%x", buff, reg->bitfields.ME_MODE);
  sprintf(buff,"%s ME_STEP:%x", buff, reg->bitfields.ME_STEP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_ME_RAM_ADDR regCP_ME_RAM_ADDR;

__inline void dump_CP_ME_RAM_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_ME_RAM_ADDR *reg = (regCP_ME_RAM_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_ME_RAM_RADDR regCP_ME_RAM_RADDR;

__inline void dump_CP_ME_RAM_RADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_ME_RAM_RADDR *reg = (regCP_ME_RAM_RADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_ME_RAM_DATAH regCP_ME_RAM_DATAH;

__inline void dump_CP_ME_RAM_DATAH(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_ME_RAM_DATAH *reg = (regCP_ME_RAM_DATAH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_ME_RAM_DATAL regCP_ME_RAM_DATAL;

__inline void dump_CP_ME_RAM_DATAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_ME_RAM_DATAL *reg = (regCP_ME_RAM_DATAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_DEBUG regCP_DEBUG;

__inline void dump_CP_DEBUG(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_DEBUG *reg = (regCP_DEBUG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCRATCH_REG0 regSCRATCH_REG0;

__inline void dump_SCRATCH_REG0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCRATCH_REG0 *reg = (regSCRATCH_REG0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCRATCH_REG1 regSCRATCH_REG1;

__inline void dump_SCRATCH_REG1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCRATCH_REG1 *reg = (regSCRATCH_REG1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCRATCH_REG2 regSCRATCH_REG2;

__inline void dump_SCRATCH_REG2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCRATCH_REG2 *reg = (regSCRATCH_REG2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCRATCH_REG3 regSCRATCH_REG3;

__inline void dump_SCRATCH_REG3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCRATCH_REG3 *reg = (regSCRATCH_REG3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCRATCH_REG4 regSCRATCH_REG4;

__inline void dump_SCRATCH_REG4(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCRATCH_REG4 *reg = (regSCRATCH_REG4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCRATCH_REG5 regSCRATCH_REG5;

__inline void dump_SCRATCH_REG5(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCRATCH_REG5 *reg = (regSCRATCH_REG5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCRATCH_REG6 regSCRATCH_REG6;

__inline void dump_SCRATCH_REG6(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCRATCH_REG6 *reg = (regSCRATCH_REG6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCRATCH_REG7 regSCRATCH_REG7;

__inline void dump_SCRATCH_REG7(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCRATCH_REG7 *reg = (regSCRATCH_REG7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCRATCH_UMSK regSCRATCH_UMSK;

__inline void dump_SCRATCH_UMSK(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCRATCH_UMSK *reg = (regSCRATCH_UMSK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SCRATCH_UMSK:%x", buff, reg->bitfields.SCRATCH_UMSK);
  sprintf(buff,"%s SCRATCH_SWAP:%x", buff, reg->bitfields.SCRATCH_SWAP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCRATCH_ADDR regSCRATCH_ADDR;

__inline void dump_SCRATCH_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCRATCH_ADDR *reg = (regSCRATCH_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_GUI_TABLE_ADDR regDMA_GUI_TABLE_ADDR;

__inline void dump_DMA_GUI_TABLE_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_GUI_TABLE_ADDR *reg = (regDMA_GUI_TABLE_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CP_SYNC:%x", buff, reg->bitfields.CP_SYNC);
  sprintf(buff,"%s TABLE_ADDR:%x", buff, reg->bitfields.TABLE_ADDR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_GUI_SRC_ADDR regDMA_GUI_SRC_ADDR;

__inline void dump_DMA_GUI_SRC_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_GUI_SRC_ADDR *reg = (regDMA_GUI_SRC_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_GUI_DST_ADDR regDMA_GUI_DST_ADDR;

__inline void dump_DMA_GUI_DST_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_GUI_DST_ADDR *reg = (regDMA_GUI_DST_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_GUI_COMMAND regDMA_GUI_COMMAND;

__inline void dump_DMA_GUI_COMMAND(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_GUI_COMMAND *reg = (regDMA_GUI_COMMAND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BYTE_COUNT:%x", buff, reg->bitfields.BYTE_COUNT);
  sprintf(buff,"%s SRC_SWAP:%x", buff, reg->bitfields.SRC_SWAP);
  sprintf(buff,"%s DST_SWAP:%x", buff, reg->bitfields.DST_SWAP);
  sprintf(buff,"%s SAS:%x", buff, reg->bitfields.SAS);
  sprintf(buff,"%s DAS:%x", buff, reg->bitfields.DAS);
  sprintf(buff,"%s SAIC:%x", buff, reg->bitfields.SAIC);
  sprintf(buff,"%s DAIC:%x", buff, reg->bitfields.DAIC);
  sprintf(buff,"%s INTDIS:%x", buff, reg->bitfields.INTDIS);
  sprintf(buff,"%s EOL:%x", buff, reg->bitfields.EOL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_GUI_STATUS regDMA_GUI_STATUS;

__inline void dump_DMA_GUI_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_GUI_STATUS *reg = (regDMA_GUI_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DTAQ_AVAIL:%x", buff, reg->bitfields.DTAQ_AVAIL);
  sprintf(buff,"%s LAST_TABLE_NUM:%x", buff, reg->bitfields.LAST_TABLE_NUM);
  sprintf(buff,"%s CURRENT_TABLE_NUM:%x", buff, reg->bitfields.CURRENT_TABLE_NUM);
  sprintf(buff,"%s ABORT_EN:%x", buff, reg->bitfields.ABORT_EN);
  sprintf(buff,"%s ACTIVE:%x", buff, reg->bitfields.ACTIVE);
  sprintf(buff,"%s SWAP:%x", buff, reg->bitfields.SWAP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_GUI_ACT_DSCRPTR regDMA_GUI_ACT_DSCRPTR;

__inline void dump_DMA_GUI_ACT_DSCRPTR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_GUI_ACT_DSCRPTR *reg = (regDMA_GUI_ACT_DSCRPTR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_GUI_SRC_ADDR regCP_GUI_SRC_ADDR;

__inline void dump_CP_GUI_SRC_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_GUI_SRC_ADDR *reg = (regCP_GUI_SRC_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_GUI_DST_ADDR regCP_GUI_DST_ADDR;

__inline void dump_CP_GUI_DST_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_GUI_DST_ADDR *reg = (regCP_GUI_DST_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_GUI_COMMAND regCP_GUI_COMMAND;

__inline void dump_CP_GUI_COMMAND(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_GUI_COMMAND *reg = (regCP_GUI_COMMAND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VID_TABLE_ADDR regDMA_VID_TABLE_ADDR;

__inline void dump_DMA_VID_TABLE_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VID_TABLE_ADDR *reg = (regDMA_VID_TABLE_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CP_SYNC:%x", buff, reg->bitfields.CP_SYNC);
  sprintf(buff,"%s TABLE_ADDR:%x", buff, reg->bitfields.TABLE_ADDR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VID_SRC_ADDR regDMA_VID_SRC_ADDR;

__inline void dump_DMA_VID_SRC_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VID_SRC_ADDR *reg = (regDMA_VID_SRC_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VID_DST_ADDR regDMA_VID_DST_ADDR;

__inline void dump_DMA_VID_DST_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VID_DST_ADDR *reg = (regDMA_VID_DST_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VID_COMMAND regDMA_VID_COMMAND;

__inline void dump_DMA_VID_COMMAND(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VID_COMMAND *reg = (regDMA_VID_COMMAND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BYTE_COUNT:%x", buff, reg->bitfields.BYTE_COUNT);
  sprintf(buff,"%s SRC_SWAP:%x", buff, reg->bitfields.SRC_SWAP);
  sprintf(buff,"%s DST_SWAP:%x", buff, reg->bitfields.DST_SWAP);
  sprintf(buff,"%s SAS:%x", buff, reg->bitfields.SAS);
  sprintf(buff,"%s DAS:%x", buff, reg->bitfields.DAS);
  sprintf(buff,"%s SAIC:%x", buff, reg->bitfields.SAIC);
  sprintf(buff,"%s DAIC:%x", buff, reg->bitfields.DAIC);
  sprintf(buff,"%s INTDIS:%x", buff, reg->bitfields.INTDIS);
  sprintf(buff,"%s EOL:%x", buff, reg->bitfields.EOL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VID_STATUS regDMA_VID_STATUS;

__inline void dump_DMA_VID_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VID_STATUS *reg = (regDMA_VID_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DTAQ_AVAIL:%x", buff, reg->bitfields.DTAQ_AVAIL);
  sprintf(buff,"%s LAST_TABLE_NUM:%x", buff, reg->bitfields.LAST_TABLE_NUM);
  sprintf(buff,"%s CURRENT_TABLE_NUM:%x", buff, reg->bitfields.CURRENT_TABLE_NUM);
  sprintf(buff,"%s ABORT_EN:%x", buff, reg->bitfields.ABORT_EN);
  sprintf(buff,"%s ACTIVE:%x", buff, reg->bitfields.ACTIVE);
  sprintf(buff,"%s SWAP:%x", buff, reg->bitfields.SWAP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VID_ACT_DSCRPTR regDMA_VID_ACT_DSCRPTR;

__inline void dump_DMA_VID_ACT_DSCRPTR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VID_ACT_DSCRPTR *reg = (regDMA_VID_ACT_DSCRPTR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_VID_SRC_ADDR regCP_VID_SRC_ADDR;

__inline void dump_CP_VID_SRC_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_VID_SRC_ADDR *reg = (regCP_VID_SRC_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_VID_DST_ADDR regCP_VID_DST_ADDR;

__inline void dump_CP_VID_DST_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_VID_DST_ADDR *reg = (regCP_VID_DST_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_VID_COMMAND regCP_VID_COMMAND;

__inline void dump_CP_VID_COMMAND(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_VID_COMMAND *reg = (regCP_VID_COMMAND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_CSQ2_STAT regCP_CSQ2_STAT;

__inline void dump_CP_CSQ2_STAT(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_CSQ2_STAT *reg = (regCP_CSQ2_STAT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CSQ_WPTR_INDIRECT:%x", buff, reg->bitfields.CSQ_WPTR_INDIRECT);
  sprintf(buff,"%s CSQ_RPTR_INDIRECT2:%x", buff, reg->bitfields.CSQ_RPTR_INDIRECT2);
  sprintf(buff,"%s CSQ_WPTR_INDIRECT2:%x", buff, reg->bitfields.CSQ_WPTR_INDIRECT2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_CSQ_ADDR regCP_CSQ_ADDR;

__inline void dump_CP_CSQ_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_CSQ_ADDR *reg = (regCP_CSQ_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_CSQ_DATA regCP_CSQ_DATA;

__inline void dump_CP_CSQ_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_CSQ_DATA *reg = (regCP_CSQ_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_CSQ_STAT regCP_CSQ_STAT;

__inline void dump_CP_CSQ_STAT(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_CSQ_STAT *reg = (regCP_CSQ_STAT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CSQ_RPTR_PRIMARY:%x", buff, reg->bitfields.CSQ_RPTR_PRIMARY);
  sprintf(buff,"%s CSQ_WPTR_PRIMARY:%x", buff, reg->bitfields.CSQ_WPTR_PRIMARY);
  sprintf(buff,"%s CSQ_RPTR_INDIRECT:%x", buff, reg->bitfields.CSQ_RPTR_INDIRECT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CP_STAT regCP_STAT;

__inline void dump_CP_STAT(__in  unsigned int *dwreg, __in  char *buff)
{
  regCP_STAT *reg = (regCP_STAT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MRU_BUSY:%x", buff, reg->bitfields.MRU_BUSY);
  sprintf(buff,"%s MWU_BUSY:%x", buff, reg->bitfields.MWU_BUSY);
  sprintf(buff,"%s RSIU_BUSY:%x", buff, reg->bitfields.RSIU_BUSY);
  sprintf(buff,"%s RCIU_BUSY:%x", buff, reg->bitfields.RCIU_BUSY);
  sprintf(buff,"%s CSF_PRIMARY_BUSY:%x", buff, reg->bitfields.CSF_PRIMARY_BUSY);
  sprintf(buff,"%s CSF_INDIRECT_BUSY:%x", buff, reg->bitfields.CSF_INDIRECT_BUSY);
  sprintf(buff,"%s CSQ_PRIMARY_BUSY:%x", buff, reg->bitfields.CSQ_PRIMARY_BUSY);
  sprintf(buff,"%s CSQ_INDIRECT_BUSY:%x", buff, reg->bitfields.CSQ_INDIRECT_BUSY);
  sprintf(buff,"%s CSI_BUSY:%x", buff, reg->bitfields.CSI_BUSY);
  sprintf(buff,"%s CSF_INDIRECT2_BUSY:%x", buff, reg->bitfields.CSF_INDIRECT2_BUSY);
  sprintf(buff,"%s CSQ_INDIRECT2_BUSY:%x", buff, reg->bitfields.CSQ_INDIRECT2_BUSY);
  sprintf(buff,"%s GUIDMA_BUSY:%x", buff, reg->bitfields.GUIDMA_BUSY);
  sprintf(buff,"%s VIDDMA_BUSY:%x", buff, reg->bitfields.VIDDMA_BUSY);
  sprintf(buff,"%s CMDSTRM_BUSY:%x", buff, reg->bitfields.CMDSTRM_BUSY);
  sprintf(buff,"%s CP_BUSY:%x", buff, reg->bitfields.CP_BUSY);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA0 regSE_PORT_DATA0;

__inline void dump_SE_PORT_DATA0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA0 *reg = (regSE_PORT_DATA0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA1 regSE_PORT_DATA1;

__inline void dump_SE_PORT_DATA1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA1 *reg = (regSE_PORT_DATA1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA2 regSE_PORT_DATA2;

__inline void dump_SE_PORT_DATA2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA2 *reg = (regSE_PORT_DATA2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA3 regSE_PORT_DATA3;

__inline void dump_SE_PORT_DATA3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA3 *reg = (regSE_PORT_DATA3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA4 regSE_PORT_DATA4;

__inline void dump_SE_PORT_DATA4(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA4 *reg = (regSE_PORT_DATA4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA5 regSE_PORT_DATA5;

__inline void dump_SE_PORT_DATA5(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA5 *reg = (regSE_PORT_DATA5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA6 regSE_PORT_DATA6;

__inline void dump_SE_PORT_DATA6(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA6 *reg = (regSE_PORT_DATA6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA7 regSE_PORT_DATA7;

__inline void dump_SE_PORT_DATA7(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA7 *reg = (regSE_PORT_DATA7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA8 regSE_PORT_DATA8;

__inline void dump_SE_PORT_DATA8(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA8 *reg = (regSE_PORT_DATA8 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA9 regSE_PORT_DATA9;

__inline void dump_SE_PORT_DATA9(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA9 *reg = (regSE_PORT_DATA9 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA10 regSE_PORT_DATA10;

__inline void dump_SE_PORT_DATA10(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA10 *reg = (regSE_PORT_DATA10 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA11 regSE_PORT_DATA11;

__inline void dump_SE_PORT_DATA11(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA11 *reg = (regSE_PORT_DATA11 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA12 regSE_PORT_DATA12;

__inline void dump_SE_PORT_DATA12(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA12 *reg = (regSE_PORT_DATA12 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA13 regSE_PORT_DATA13;

__inline void dump_SE_PORT_DATA13(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA13 *reg = (regSE_PORT_DATA13 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA14 regSE_PORT_DATA14;

__inline void dump_SE_PORT_DATA14(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA14 *reg = (regSE_PORT_DATA14 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_DATA15 regSE_PORT_DATA15;

__inline void dump_SE_PORT_DATA15(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_DATA15 *reg = (regSE_PORT_DATA15 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX0 regSE_PORT_IDX0;

__inline void dump_SE_PORT_IDX0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX0 *reg = (regSE_PORT_IDX0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX1 regSE_PORT_IDX1;

__inline void dump_SE_PORT_IDX1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX1 *reg = (regSE_PORT_IDX1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX2 regSE_PORT_IDX2;

__inline void dump_SE_PORT_IDX2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX2 *reg = (regSE_PORT_IDX2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX3 regSE_PORT_IDX3;

__inline void dump_SE_PORT_IDX3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX3 *reg = (regSE_PORT_IDX3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX4 regSE_PORT_IDX4;

__inline void dump_SE_PORT_IDX4(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX4 *reg = (regSE_PORT_IDX4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX5 regSE_PORT_IDX5;

__inline void dump_SE_PORT_IDX5(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX5 *reg = (regSE_PORT_IDX5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX6 regSE_PORT_IDX6;

__inline void dump_SE_PORT_IDX6(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX6 *reg = (regSE_PORT_IDX6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX7 regSE_PORT_IDX7;

__inline void dump_SE_PORT_IDX7(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX7 *reg = (regSE_PORT_IDX7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX8 regSE_PORT_IDX8;

__inline void dump_SE_PORT_IDX8(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX8 *reg = (regSE_PORT_IDX8 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX9 regSE_PORT_IDX9;

__inline void dump_SE_PORT_IDX9(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX9 *reg = (regSE_PORT_IDX9 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX10 regSE_PORT_IDX10;

__inline void dump_SE_PORT_IDX10(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX10 *reg = (regSE_PORT_IDX10 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX11 regSE_PORT_IDX11;

__inline void dump_SE_PORT_IDX11(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX11 *reg = (regSE_PORT_IDX11 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX12 regSE_PORT_IDX12;

__inline void dump_SE_PORT_IDX12(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX12 *reg = (regSE_PORT_IDX12 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX13 regSE_PORT_IDX13;

__inline void dump_SE_PORT_IDX13(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX13 *reg = (regSE_PORT_IDX13 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX14 regSE_PORT_IDX14;

__inline void dump_SE_PORT_IDX14(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX14 *reg = (regSE_PORT_IDX14 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PORT_IDX15 regSE_PORT_IDX15;

__inline void dump_SE_PORT_IDX15(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PORT_IDX15 *reg = (regSE_PORT_IDX15 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VF_CNTL regSE_VF_CNTL;

__inline void dump_SE_VF_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VF_CNTL *reg = (regSE_VF_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PRIM_TYPE:%x", buff, reg->bitfields.PRIM_TYPE);
  sprintf(buff,"%s PRIM_WALK:%x", buff, reg->bitfields.PRIM_WALK);
  sprintf(buff,"%s COLOR_ORDER:%x", buff, reg->bitfields.COLOR_ORDER);
  sprintf(buff,"%s TCL_OUTPUT_CTL_ENA:%x", buff, reg->bitfields.TCL_OUTPUT_CTL_ENA);
  sprintf(buff,"%s PROG_STREAM_ENA:%x", buff, reg->bitfields.PROG_STREAM_ENA);
  sprintf(buff,"%s INDEX_SIZE:%x", buff, reg->bitfields.INDEX_SIZE);
  sprintf(buff,"%s NUM_VERTICES:%x", buff, reg->bitfields.NUM_VERTICES);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_FMT_0 regSE_VTX_FMT_0;

__inline void dump_SE_VTX_FMT_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_FMT_0 *reg = (regSE_VTX_FMT_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_Z0_PRESENT:%x", buff, reg->bitfields.VTX_Z0_PRESENT);
  sprintf(buff,"%s VTX_W0_PRESENT:%x", buff, reg->bitfields.VTX_W0_PRESENT);
  sprintf(buff,"%s VTX_BLEND_WEIGHT_CNT:%x", buff, reg->bitfields.VTX_BLEND_WEIGHT_CNT);
  sprintf(buff,"%s VTX_PV_MTX_SEL_PRESENT:%x", buff, reg->bitfields.VTX_PV_MTX_SEL_PRESENT);
  sprintf(buff,"%s VTX_N0_PRESENT:%x", buff, reg->bitfields.VTX_N0_PRESENT);
  sprintf(buff,"%s VTX_PT_SIZE_PRESENT:%x", buff, reg->bitfields.VTX_PT_SIZE_PRESENT);
  sprintf(buff,"%s VTX_DISCRETE_FOG_PRESENT:%x", buff, reg->bitfields.VTX_DISCRETE_FOG_PRESENT);
  sprintf(buff,"%s VTX_SHININESS_0_PRESENT:%x", buff, reg->bitfields.VTX_SHININESS_0_PRESENT);
  sprintf(buff,"%s VTX_SHININESS_1_PRESENT:%x", buff, reg->bitfields.VTX_SHININESS_1_PRESENT);
  sprintf(buff,"%s VTX_COLOR_0_FMT:%x", buff, reg->bitfields.VTX_COLOR_0_FMT);
  sprintf(buff,"%s VTX_COLOR_1_FMT:%x", buff, reg->bitfields.VTX_COLOR_1_FMT);
  sprintf(buff,"%s VTX_COLOR_2_FMT:%x", buff, reg->bitfields.VTX_COLOR_2_FMT);
  sprintf(buff,"%s VTX_COLOR_3_FMT:%x", buff, reg->bitfields.VTX_COLOR_3_FMT);
  sprintf(buff,"%s VTX_COLOR_4_FMT:%x", buff, reg->bitfields.VTX_COLOR_4_FMT);
  sprintf(buff,"%s VTX_COLOR_5_FMT:%x", buff, reg->bitfields.VTX_COLOR_5_FMT);
  sprintf(buff,"%s VTX_COLOR_6_FMT:%x", buff, reg->bitfields.VTX_COLOR_6_FMT);
  sprintf(buff,"%s VTX_COLOR_7_FMT:%x", buff, reg->bitfields.VTX_COLOR_7_FMT);
  sprintf(buff,"%s VTX_XY1_PRESENT:%x", buff, reg->bitfields.VTX_XY1_PRESENT);
  sprintf(buff,"%s VTX_Z1_PRESENT:%x", buff, reg->bitfields.VTX_Z1_PRESENT);
  sprintf(buff,"%s VTX_W1_PRESENT:%x", buff, reg->bitfields.VTX_W1_PRESENT);
  sprintf(buff,"%s VTX_N1_PRESENT:%x", buff, reg->bitfields.VTX_N1_PRESENT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_FMT_1 regSE_VTX_FMT_1;

__inline void dump_SE_VTX_FMT_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_FMT_1 *reg = (regSE_VTX_FMT_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_0_COMP_CNT:%x", buff, reg->bitfields.TEX_0_COMP_CNT);
  sprintf(buff,"%s TEX_1_COMP_CNT:%x", buff, reg->bitfields.TEX_1_COMP_CNT);
  sprintf(buff,"%s TEX_2_COMP_CNT:%x", buff, reg->bitfields.TEX_2_COMP_CNT);
  sprintf(buff,"%s TEX_3_COMP_CNT:%x", buff, reg->bitfields.TEX_3_COMP_CNT);
  sprintf(buff,"%s TEX_4_COMP_CNT:%x", buff, reg->bitfields.TEX_4_COMP_CNT);
  sprintf(buff,"%s TEX_5_COMP_CNT:%x", buff, reg->bitfields.TEX_5_COMP_CNT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_OUTPUT_VTX_FMT_0 regSE_TCL_OUTPUT_VTX_FMT_0;

__inline void dump_SE_TCL_OUTPUT_VTX_FMT_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_OUTPUT_VTX_FMT_0 *reg = (regSE_TCL_OUTPUT_VTX_FMT_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_Z0_PRESENT:%x", buff, reg->bitfields.VTX_Z0_PRESENT);
  sprintf(buff,"%s VTX_W0_PRESENT:%x", buff, reg->bitfields.VTX_W0_PRESENT);
  sprintf(buff,"%s VTX_BLEND_WEIGHT_CNT:%x", buff, reg->bitfields.VTX_BLEND_WEIGHT_CNT);
  sprintf(buff,"%s VTX_PV_MTX_SEL_PRESENT:%x", buff, reg->bitfields.VTX_PV_MTX_SEL_PRESENT);
  sprintf(buff,"%s VTX_N0_PRESENT:%x", buff, reg->bitfields.VTX_N0_PRESENT);
  sprintf(buff,"%s VTX_PT_SIZE_PRESENT:%x", buff, reg->bitfields.VTX_PT_SIZE_PRESENT);
  sprintf(buff,"%s VTX_DISCRETE_FOG_PRESENT:%x", buff, reg->bitfields.VTX_DISCRETE_FOG_PRESENT);
  sprintf(buff,"%s VTX_SHININESS_0_PRESENT:%x", buff, reg->bitfields.VTX_SHININESS_0_PRESENT);
  sprintf(buff,"%s VTX_SHININESS_1_PRESENT:%x", buff, reg->bitfields.VTX_SHININESS_1_PRESENT);
  sprintf(buff,"%s VTX_COLOR_0_FMT:%x", buff, reg->bitfields.VTX_COLOR_0_FMT);
  sprintf(buff,"%s VTX_COLOR_1_FMT:%x", buff, reg->bitfields.VTX_COLOR_1_FMT);
  sprintf(buff,"%s VTX_COLOR_2_FMT:%x", buff, reg->bitfields.VTX_COLOR_2_FMT);
  sprintf(buff,"%s VTX_COLOR_3_FMT:%x", buff, reg->bitfields.VTX_COLOR_3_FMT);
  sprintf(buff,"%s VTX_COLOR_4_FMT:%x", buff, reg->bitfields.VTX_COLOR_4_FMT);
  sprintf(buff,"%s VTX_COLOR_5_FMT:%x", buff, reg->bitfields.VTX_COLOR_5_FMT);
  sprintf(buff,"%s VTX_COLOR_6_FMT:%x", buff, reg->bitfields.VTX_COLOR_6_FMT);
  sprintf(buff,"%s VTX_COLOR_7_FMT:%x", buff, reg->bitfields.VTX_COLOR_7_FMT);
  sprintf(buff,"%s VTX_XY1_PRESENT:%x", buff, reg->bitfields.VTX_XY1_PRESENT);
  sprintf(buff,"%s VTX_Z1_PRESENT:%x", buff, reg->bitfields.VTX_Z1_PRESENT);
  sprintf(buff,"%s VTX_W1_PRESENT:%x", buff, reg->bitfields.VTX_W1_PRESENT);
  sprintf(buff,"%s VTX_N1_PRESENT:%x", buff, reg->bitfields.VTX_N1_PRESENT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_OUTPUT_VTX_FMT_1 regSE_TCL_OUTPUT_VTX_FMT_1;

__inline void dump_SE_TCL_OUTPUT_VTX_FMT_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_OUTPUT_VTX_FMT_1 *reg = (regSE_TCL_OUTPUT_VTX_FMT_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_0_COMP_CNT:%x", buff, reg->bitfields.TEX_0_COMP_CNT);
  sprintf(buff,"%s TEX_1_COMP_CNT:%x", buff, reg->bitfields.TEX_1_COMP_CNT);
  sprintf(buff,"%s TEX_2_COMP_CNT:%x", buff, reg->bitfields.TEX_2_COMP_CNT);
  sprintf(buff,"%s TEX_3_COMP_CNT:%x", buff, reg->bitfields.TEX_3_COMP_CNT);
  sprintf(buff,"%s TEX_4_COMP_CNT:%x", buff, reg->bitfields.TEX_4_COMP_CNT);
  sprintf(buff,"%s TEX_5_COMP_CNT:%x", buff, reg->bitfields.TEX_5_COMP_CNT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VPORT_XSCALE regSE_VPORT_XSCALE;

__inline void dump_SE_VPORT_XSCALE(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VPORT_XSCALE *reg = (regSE_VPORT_XSCALE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VPORT_XOFFSET regSE_VPORT_XOFFSET;

__inline void dump_SE_VPORT_XOFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VPORT_XOFFSET *reg = (regSE_VPORT_XOFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VPORT_YSCALE regSE_VPORT_YSCALE;

__inline void dump_SE_VPORT_YSCALE(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VPORT_YSCALE *reg = (regSE_VPORT_YSCALE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VPORT_YOFFSET regSE_VPORT_YOFFSET;

__inline void dump_SE_VPORT_YOFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VPORT_YOFFSET *reg = (regSE_VPORT_YOFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VPORT_ZSCALE regSE_VPORT_ZSCALE;

__inline void dump_SE_VPORT_ZSCALE(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VPORT_ZSCALE *reg = (regSE_VPORT_ZSCALE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VPORT_ZOFFSET regSE_VPORT_ZOFFSET;

__inline void dump_SE_VPORT_ZOFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VPORT_ZOFFSET *reg = (regSE_VPORT_ZOFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTE_CNTL regSE_VTE_CNTL;

__inline void dump_SE_VTE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTE_CNTL *reg = (regSE_VTE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VPORT_X_SCALE_ENA:%x", buff, reg->bitfields.VPORT_X_SCALE_ENA);
  sprintf(buff,"%s VPORT_X_OFFSET_ENA:%x", buff, reg->bitfields.VPORT_X_OFFSET_ENA);
  sprintf(buff,"%s VPORT_Y_SCALE_ENA:%x", buff, reg->bitfields.VPORT_Y_SCALE_ENA);
  sprintf(buff,"%s VPORT_Y_OFFSET_ENA:%x", buff, reg->bitfields.VPORT_Y_OFFSET_ENA);
  sprintf(buff,"%s VPORT_Z_SCALE_ENA:%x", buff, reg->bitfields.VPORT_Z_SCALE_ENA);
  sprintf(buff,"%s VPORT_Z_OFFSET_ENA:%x", buff, reg->bitfields.VPORT_Z_OFFSET_ENA);
  sprintf(buff,"%s VTX_XY_FMT:%x", buff, reg->bitfields.VTX_XY_FMT);
  sprintf(buff,"%s VTX_Z_FMT:%x", buff, reg->bitfields.VTX_Z_FMT);
  sprintf(buff,"%s VTX_W0_FMT:%x", buff, reg->bitfields.VTX_W0_FMT);
  sprintf(buff,"%s VTX_W0_NORMALIZE:%x", buff, reg->bitfields.VTX_W0_NORMALIZE);
  sprintf(buff,"%s VTX_ST_DENORMALIZED:%x", buff, reg->bitfields.VTX_ST_DENORMALIZED);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_W0_RANGE regSE_W0_RANGE;

__inline void dump_SE_W0_RANGE(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_W0_RANGE *reg = (regSE_W0_RANGE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250SE_VTX_NUM_ARRAYS regrv250SE_VTX_NUM_ARRAYS;

__inline void dump_rv250SE_VTX_NUM_ARRAYS(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250SE_VTX_NUM_ARRAYS *reg = (regrv250SE_VTX_NUM_ARRAYS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_NUM_ARRAYS:%x", buff, reg->bitfields.VTX_NUM_ARRAYS);
  sprintf(buff,"%s VTX_REUSE_DISABLE:%x", buff, reg->bitfields.VTX_REUSE_DISABLE);
  sprintf(buff,"%s VC_PFETCH:%x", buff, reg->bitfields.VC_PFETCH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ATTR01 regSE_VTX_AOS_ATTR01;

__inline void dump_SE_VTX_AOS_ATTR01(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ATTR01 *reg = (regSE_VTX_AOS_ATTR01 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_AOS_COUNT0:%x", buff, reg->bitfields.VTX_AOS_COUNT0);
  sprintf(buff,"%s VTX_AOS_STRIDE0:%x", buff, reg->bitfields.VTX_AOS_STRIDE0);
  sprintf(buff,"%s VTX_AOS_COUNT1:%x", buff, reg->bitfields.VTX_AOS_COUNT1);
  sprintf(buff,"%s VTX_AOS_STRIDE1:%x", buff, reg->bitfields.VTX_AOS_STRIDE1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ADDR0 regSE_VTX_AOS_ADDR0;

__inline void dump_SE_VTX_AOS_ADDR0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ADDR0 *reg = (regSE_VTX_AOS_ADDR0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ADDR1 regSE_VTX_AOS_ADDR1;

__inline void dump_SE_VTX_AOS_ADDR1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ADDR1 *reg = (regSE_VTX_AOS_ADDR1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ATTR23 regSE_VTX_AOS_ATTR23;

__inline void dump_SE_VTX_AOS_ATTR23(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ATTR23 *reg = (regSE_VTX_AOS_ATTR23 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_AOS_COUNT2:%x", buff, reg->bitfields.VTX_AOS_COUNT2);
  sprintf(buff,"%s VTX_AOS_STRIDE2:%x", buff, reg->bitfields.VTX_AOS_STRIDE2);
  sprintf(buff,"%s VTX_AOS_COUNT3:%x", buff, reg->bitfields.VTX_AOS_COUNT3);
  sprintf(buff,"%s VTX_AOS_STRIDE3:%x", buff, reg->bitfields.VTX_AOS_STRIDE3);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ADDR2 regSE_VTX_AOS_ADDR2;

__inline void dump_SE_VTX_AOS_ADDR2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ADDR2 *reg = (regSE_VTX_AOS_ADDR2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ADDR3 regSE_VTX_AOS_ADDR3;

__inline void dump_SE_VTX_AOS_ADDR3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ADDR3 *reg = (regSE_VTX_AOS_ADDR3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ATTR45 regSE_VTX_AOS_ATTR45;

__inline void dump_SE_VTX_AOS_ATTR45(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ATTR45 *reg = (regSE_VTX_AOS_ATTR45 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_AOS_COUNT4:%x", buff, reg->bitfields.VTX_AOS_COUNT4);
  sprintf(buff,"%s VTX_AOS_STRIDE4:%x", buff, reg->bitfields.VTX_AOS_STRIDE4);
  sprintf(buff,"%s VTX_AOS_COUNT5:%x", buff, reg->bitfields.VTX_AOS_COUNT5);
  sprintf(buff,"%s VTX_AOS_STRIDE5:%x", buff, reg->bitfields.VTX_AOS_STRIDE5);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ADDR4 regSE_VTX_AOS_ADDR4;

__inline void dump_SE_VTX_AOS_ADDR4(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ADDR4 *reg = (regSE_VTX_AOS_ADDR4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ADDR5 regSE_VTX_AOS_ADDR5;

__inline void dump_SE_VTX_AOS_ADDR5(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ADDR5 *reg = (regSE_VTX_AOS_ADDR5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ATTR67 regSE_VTX_AOS_ATTR67;

__inline void dump_SE_VTX_AOS_ATTR67(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ATTR67 *reg = (regSE_VTX_AOS_ATTR67 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_AOS_COUNT6:%x", buff, reg->bitfields.VTX_AOS_COUNT6);
  sprintf(buff,"%s VTX_AOS_STRIDE6:%x", buff, reg->bitfields.VTX_AOS_STRIDE6);
  sprintf(buff,"%s VTX_AOS_COUNT7:%x", buff, reg->bitfields.VTX_AOS_COUNT7);
  sprintf(buff,"%s VTX_AOS_STRIDE7:%x", buff, reg->bitfields.VTX_AOS_STRIDE7);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ADDR6 regSE_VTX_AOS_ADDR6;

__inline void dump_SE_VTX_AOS_ADDR6(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ADDR6 *reg = (regSE_VTX_AOS_ADDR6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ADDR7 regSE_VTX_AOS_ADDR7;

__inline void dump_SE_VTX_AOS_ADDR7(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ADDR7 *reg = (regSE_VTX_AOS_ADDR7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ATTR89 regSE_VTX_AOS_ATTR89;

__inline void dump_SE_VTX_AOS_ATTR89(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ATTR89 *reg = (regSE_VTX_AOS_ATTR89 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_AOS_COUNT8:%x", buff, reg->bitfields.VTX_AOS_COUNT8);
  sprintf(buff,"%s VTX_AOS_STRIDE8:%x", buff, reg->bitfields.VTX_AOS_STRIDE8);
  sprintf(buff,"%s VTX_AOS_COUNT9:%x", buff, reg->bitfields.VTX_AOS_COUNT9);
  sprintf(buff,"%s VTX_AOS_STRIDE9:%x", buff, reg->bitfields.VTX_AOS_STRIDE9);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ADDR8 regSE_VTX_AOS_ADDR8;

__inline void dump_SE_VTX_AOS_ADDR8(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ADDR8 *reg = (regSE_VTX_AOS_ADDR8 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ADDR9 regSE_VTX_AOS_ADDR9;

__inline void dump_SE_VTX_AOS_ADDR9(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ADDR9 *reg = (regSE_VTX_AOS_ADDR9 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ATTR1011 regSE_VTX_AOS_ATTR1011;

__inline void dump_SE_VTX_AOS_ATTR1011(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ATTR1011 *reg = (regSE_VTX_AOS_ATTR1011 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_AOS_COUNT10:%x", buff, reg->bitfields.VTX_AOS_COUNT10);
  sprintf(buff,"%s VTX_AOS_STRIDE10:%x", buff, reg->bitfields.VTX_AOS_STRIDE10);
  sprintf(buff,"%s VTX_AOS_COUNT11:%x", buff, reg->bitfields.VTX_AOS_COUNT11);
  sprintf(buff,"%s VTX_AOS_STRIDE11:%x", buff, reg->bitfields.VTX_AOS_STRIDE11);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ADDR10 regSE_VTX_AOS_ADDR10;

__inline void dump_SE_VTX_AOS_ADDR10(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ADDR10 *reg = (regSE_VTX_AOS_ADDR10 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_AOS_ADDR11 regSE_VTX_AOS_ADDR11;

__inline void dump_SE_VTX_AOS_ADDR11(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_AOS_ADDR11 *reg = (regSE_VTX_AOS_ADDR11 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VF_MAX_VTX_INDX regSE_VF_MAX_VTX_INDX;

__inline void dump_SE_VF_MAX_VTX_INDX(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VF_MAX_VTX_INDX *reg = (regSE_VF_MAX_VTX_INDX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VF_MIN_VTX_INDX regSE_VF_MIN_VTX_INDX;

__inline void dump_SE_VF_MIN_VTX_INDX(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VF_MIN_VTX_INDX *reg = (regSE_VF_MIN_VTX_INDX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VAP_PERF_CNTL_0 regSE_VAP_PERF_CNTL_0;

__inline void dump_SE_VAP_PERF_CNTL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VAP_PERF_CNTL_0 *reg = (regSE_VAP_PERF_CNTL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PERF_SEL_0:%x", buff, reg->bitfields.PERF_SEL_0);
  sprintf(buff,"%s CLR_PERF_0:%x", buff, reg->bitfields.CLR_PERF_0);
  sprintf(buff,"%s EN_PERF_0:%x", buff, reg->bitfields.EN_PERF_0);
  sprintf(buff,"%s NUM_VERTS_TO_BYPASS_0:%x", buff, reg->bitfields.NUM_VERTS_TO_BYPASS_0);
  sprintf(buff,"%s NUM_VERTS_TO_COUNT_0:%x", buff, reg->bitfields.NUM_VERTS_TO_COUNT_0);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VAP_PERF_CNTL_1 regSE_VAP_PERF_CNTL_1;

__inline void dump_SE_VAP_PERF_CNTL_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VAP_PERF_CNTL_1 *reg = (regSE_VAP_PERF_CNTL_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PERF_SEL_1:%x", buff, reg->bitfields.PERF_SEL_1);
  sprintf(buff,"%s CLR_PERF_1:%x", buff, reg->bitfields.CLR_PERF_1);
  sprintf(buff,"%s EN_PERF_1:%x", buff, reg->bitfields.EN_PERF_1);
  sprintf(buff,"%s NUM_VERTS_TO_BYPASS_1:%x", buff, reg->bitfields.NUM_VERTS_TO_BYPASS_1);
  sprintf(buff,"%s NUM_VERTS_TO_COUNT_1:%x", buff, reg->bitfields.NUM_VERTS_TO_COUNT_1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VAP_PERF_COUNT_0 regSE_VAP_PERF_COUNT_0;

__inline void dump_SE_VAP_PERF_COUNT_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VAP_PERF_COUNT_0 *reg = (regSE_VAP_PERF_COUNT_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VAP_PERF_COUNT_1 regSE_VAP_PERF_COUNT_1;

__inline void dump_SE_VAP_PERF_COUNT_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VAP_PERF_COUNT_1 *reg = (regSE_VAP_PERF_COUNT_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_DEBUG regSE_DEBUG;

__inline void dump_SE_DEBUG(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_DEBUG *reg = (regSE_DEBUG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VAP_CNTL_STATUS regSE_VAP_CNTL_STATUS;

__inline void dump_SE_VAP_CNTL_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VAP_CNTL_STATUS *reg = (regSE_VAP_CNTL_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VC_SWAP:%x", buff, reg->bitfields.VC_SWAP);
  sprintf(buff,"%s TCL_BYPASS:%x", buff, reg->bitfields.TCL_BYPASS);
  sprintf(buff,"%s TCL_BUSY:%x", buff, reg->bitfields.TCL_BUSY);
  sprintf(buff,"%s PERF_BUSY:%x", buff, reg->bitfields.PERF_BUSY);
  sprintf(buff,"%s PRIMITIVE_BYPASS_BUSY:%x", buff, reg->bitfields.PRIMITIVE_BYPASS_BUSY);
  sprintf(buff,"%s RCP_BUSY:%x", buff, reg->bitfields.RCP_BUSY);
  sprintf(buff,"%s VAPB_RBIU_SLAVE_BUSY:%x", buff, reg->bitfields.VAPB_RBIU_SLAVE_BUSY);
  sprintf(buff,"%s MIU_BUSY:%x", buff, reg->bitfields.MIU_BUSY);
  sprintf(buff,"%s VC_BUSY:%x", buff, reg->bitfields.VC_BUSY);
  sprintf(buff,"%s VF_BUSY:%x", buff, reg->bitfields.VF_BUSY);
  sprintf(buff,"%s REGPIPE_BUSY:%x", buff, reg->bitfields.REGPIPE_BUSY);
  sprintf(buff,"%s VAP_BUSY:%x", buff, reg->bitfields.VAP_BUSY);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PROG_STREAM_CNTL_0 regSE_PROG_STREAM_CNTL_0;

__inline void dump_SE_PROG_STREAM_CNTL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PROG_STREAM_CNTL_0 *reg = (regSE_PROG_STREAM_CNTL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DATA_TYPE_0:%x", buff, reg->bitfields.DATA_TYPE_0);
  sprintf(buff,"%s SKIP_DWORDS_0:%x", buff, reg->bitfields.SKIP_DWORDS_0);
  sprintf(buff,"%s DST_VEC_LOC_0:%x", buff, reg->bitfields.DST_VEC_LOC_0);
  sprintf(buff,"%s LAST_VEC_0:%x", buff, reg->bitfields.LAST_VEC_0);
  sprintf(buff,"%s SIGNED_0:%x", buff, reg->bitfields.SIGNED_0);
  sprintf(buff,"%s NORMALIZE_0:%x", buff, reg->bitfields.NORMALIZE_0);
  sprintf(buff,"%s DATA_TYPE_1:%x", buff, reg->bitfields.DATA_TYPE_1);
  sprintf(buff,"%s SKIP_DWORDS_1:%x", buff, reg->bitfields.SKIP_DWORDS_1);
  sprintf(buff,"%s DST_VEC_LOC_1:%x", buff, reg->bitfields.DST_VEC_LOC_1);
  sprintf(buff,"%s LAST_VEC_1:%x", buff, reg->bitfields.LAST_VEC_1);
  sprintf(buff,"%s SIGNED_1:%x", buff, reg->bitfields.SIGNED_1);
  sprintf(buff,"%s NORMALIZE_1:%x", buff, reg->bitfields.NORMALIZE_1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PROG_STREAM_CNTL_1 regSE_PROG_STREAM_CNTL_1;

__inline void dump_SE_PROG_STREAM_CNTL_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PROG_STREAM_CNTL_1 *reg = (regSE_PROG_STREAM_CNTL_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DATA_TYPE_2:%x", buff, reg->bitfields.DATA_TYPE_2);
  sprintf(buff,"%s SKIP_DWORDS_2:%x", buff, reg->bitfields.SKIP_DWORDS_2);
  sprintf(buff,"%s DST_VEC_LOC_2:%x", buff, reg->bitfields.DST_VEC_LOC_2);
  sprintf(buff,"%s LAST_VEC_2:%x", buff, reg->bitfields.LAST_VEC_2);
  sprintf(buff,"%s SIGNED_2:%x", buff, reg->bitfields.SIGNED_2);
  sprintf(buff,"%s NORMALIZE_2:%x", buff, reg->bitfields.NORMALIZE_2);
  sprintf(buff,"%s DATA_TYPE_3:%x", buff, reg->bitfields.DATA_TYPE_3);
  sprintf(buff,"%s SKIP_DWORDS_3:%x", buff, reg->bitfields.SKIP_DWORDS_3);
  sprintf(buff,"%s DST_VEC_LOC_3:%x", buff, reg->bitfields.DST_VEC_LOC_3);
  sprintf(buff,"%s LAST_VEC_3:%x", buff, reg->bitfields.LAST_VEC_3);
  sprintf(buff,"%s SIGNED_3:%x", buff, reg->bitfields.SIGNED_3);
  sprintf(buff,"%s NORMALIZE_3:%x", buff, reg->bitfields.NORMALIZE_3);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PROG_STREAM_CNTL_2 regSE_PROG_STREAM_CNTL_2;

__inline void dump_SE_PROG_STREAM_CNTL_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PROG_STREAM_CNTL_2 *reg = (regSE_PROG_STREAM_CNTL_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DATA_TYPE_4:%x", buff, reg->bitfields.DATA_TYPE_4);
  sprintf(buff,"%s SKIP_DWORDS_4:%x", buff, reg->bitfields.SKIP_DWORDS_4);
  sprintf(buff,"%s DST_VEC_LOC_4:%x", buff, reg->bitfields.DST_VEC_LOC_4);
  sprintf(buff,"%s LAST_VEC_4:%x", buff, reg->bitfields.LAST_VEC_4);
  sprintf(buff,"%s SIGNED_4:%x", buff, reg->bitfields.SIGNED_4);
  sprintf(buff,"%s NORMALIZE_4:%x", buff, reg->bitfields.NORMALIZE_4);
  sprintf(buff,"%s DATA_TYPE_5:%x", buff, reg->bitfields.DATA_TYPE_5);
  sprintf(buff,"%s SKIP_DWORDS_5:%x", buff, reg->bitfields.SKIP_DWORDS_5);
  sprintf(buff,"%s DST_VEC_LOC_5:%x", buff, reg->bitfields.DST_VEC_LOC_5);
  sprintf(buff,"%s LAST_VEC_5:%x", buff, reg->bitfields.LAST_VEC_5);
  sprintf(buff,"%s SIGNED_5:%x", buff, reg->bitfields.SIGNED_5);
  sprintf(buff,"%s NORMALIZE_5:%x", buff, reg->bitfields.NORMALIZE_5);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PROG_STREAM_CNTL_3 regSE_PROG_STREAM_CNTL_3;

__inline void dump_SE_PROG_STREAM_CNTL_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PROG_STREAM_CNTL_3 *reg = (regSE_PROG_STREAM_CNTL_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DATA_TYPE_6:%x", buff, reg->bitfields.DATA_TYPE_6);
  sprintf(buff,"%s SKIP_DWORDS_6:%x", buff, reg->bitfields.SKIP_DWORDS_6);
  sprintf(buff,"%s DST_VEC_LOC_6:%x", buff, reg->bitfields.DST_VEC_LOC_6);
  sprintf(buff,"%s LAST_VEC_6:%x", buff, reg->bitfields.LAST_VEC_6);
  sprintf(buff,"%s SIGNED_6:%x", buff, reg->bitfields.SIGNED_6);
  sprintf(buff,"%s NORMALIZE_6:%x", buff, reg->bitfields.NORMALIZE_6);
  sprintf(buff,"%s DATA_TYPE_7:%x", buff, reg->bitfields.DATA_TYPE_7);
  sprintf(buff,"%s SKIP_DWORDS_7:%x", buff, reg->bitfields.SKIP_DWORDS_7);
  sprintf(buff,"%s DST_VEC_LOC_7:%x", buff, reg->bitfields.DST_VEC_LOC_7);
  sprintf(buff,"%s LAST_VEC_7:%x", buff, reg->bitfields.LAST_VEC_7);
  sprintf(buff,"%s SIGNED_7:%x", buff, reg->bitfields.SIGNED_7);
  sprintf(buff,"%s NORMALIZE_7:%x", buff, reg->bitfields.NORMALIZE_7);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PROG_STREAM_CNTL_4 regSE_PROG_STREAM_CNTL_4;

__inline void dump_SE_PROG_STREAM_CNTL_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PROG_STREAM_CNTL_4 *reg = (regSE_PROG_STREAM_CNTL_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DATA_TYPE_8:%x", buff, reg->bitfields.DATA_TYPE_8);
  sprintf(buff,"%s SKIP_DWORDS_8:%x", buff, reg->bitfields.SKIP_DWORDS_8);
  sprintf(buff,"%s DST_VEC_LOC_8:%x", buff, reg->bitfields.DST_VEC_LOC_8);
  sprintf(buff,"%s LAST_VEC_8:%x", buff, reg->bitfields.LAST_VEC_8);
  sprintf(buff,"%s SIGNED_8:%x", buff, reg->bitfields.SIGNED_8);
  sprintf(buff,"%s NORMALIZE_8:%x", buff, reg->bitfields.NORMALIZE_8);
  sprintf(buff,"%s DATA_TYPE_9:%x", buff, reg->bitfields.DATA_TYPE_9);
  sprintf(buff,"%s SKIP_DWORDS_9:%x", buff, reg->bitfields.SKIP_DWORDS_9);
  sprintf(buff,"%s DST_VEC_LOC_9:%x", buff, reg->bitfields.DST_VEC_LOC_9);
  sprintf(buff,"%s LAST_VEC_9:%x", buff, reg->bitfields.LAST_VEC_9);
  sprintf(buff,"%s SIGNED_9:%x", buff, reg->bitfields.SIGNED_9);
  sprintf(buff,"%s NORMALIZE_9:%x", buff, reg->bitfields.NORMALIZE_9);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PROG_STREAM_CNTL_5 regSE_PROG_STREAM_CNTL_5;

__inline void dump_SE_PROG_STREAM_CNTL_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PROG_STREAM_CNTL_5 *reg = (regSE_PROG_STREAM_CNTL_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DATA_TYPE_10:%x", buff, reg->bitfields.DATA_TYPE_10);
  sprintf(buff,"%s SKIP_DWORDS_10:%x", buff, reg->bitfields.SKIP_DWORDS_10);
  sprintf(buff,"%s DST_VEC_LOC_10:%x", buff, reg->bitfields.DST_VEC_LOC_10);
  sprintf(buff,"%s LAST_VEC_10:%x", buff, reg->bitfields.LAST_VEC_10);
  sprintf(buff,"%s SIGNED_10:%x", buff, reg->bitfields.SIGNED_10);
  sprintf(buff,"%s NORMALIZE_10:%x", buff, reg->bitfields.NORMALIZE_10);
  sprintf(buff,"%s DATA_TYPE_11:%x", buff, reg->bitfields.DATA_TYPE_11);
  sprintf(buff,"%s SKIP_DWORDS_11:%x", buff, reg->bitfields.SKIP_DWORDS_11);
  sprintf(buff,"%s DST_VEC_LOC_11:%x", buff, reg->bitfields.DST_VEC_LOC_11);
  sprintf(buff,"%s LAST_VEC_11:%x", buff, reg->bitfields.LAST_VEC_11);
  sprintf(buff,"%s SIGNED_11:%x", buff, reg->bitfields.SIGNED_11);
  sprintf(buff,"%s NORMALIZE_11:%x", buff, reg->bitfields.NORMALIZE_11);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PROG_STREAM_CNTL_6 regSE_PROG_STREAM_CNTL_6;

__inline void dump_SE_PROG_STREAM_CNTL_6(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PROG_STREAM_CNTL_6 *reg = (regSE_PROG_STREAM_CNTL_6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DATA_TYPE_12:%x", buff, reg->bitfields.DATA_TYPE_12);
  sprintf(buff,"%s SKIP_DWORDS_12:%x", buff, reg->bitfields.SKIP_DWORDS_12);
  sprintf(buff,"%s DST_VEC_LOC_12:%x", buff, reg->bitfields.DST_VEC_LOC_12);
  sprintf(buff,"%s LAST_VEC_12:%x", buff, reg->bitfields.LAST_VEC_12);
  sprintf(buff,"%s SIGNED_12:%x", buff, reg->bitfields.SIGNED_12);
  sprintf(buff,"%s NORMALIZE_12:%x", buff, reg->bitfields.NORMALIZE_12);
  sprintf(buff,"%s DATA_TYPE_13:%x", buff, reg->bitfields.DATA_TYPE_13);
  sprintf(buff,"%s SKIP_DWORDS_13:%x", buff, reg->bitfields.SKIP_DWORDS_13);
  sprintf(buff,"%s DST_VEC_LOC_13:%x", buff, reg->bitfields.DST_VEC_LOC_13);
  sprintf(buff,"%s LAST_VEC_13:%x", buff, reg->bitfields.LAST_VEC_13);
  sprintf(buff,"%s SIGNED_13:%x", buff, reg->bitfields.SIGNED_13);
  sprintf(buff,"%s NORMALIZE_13:%x", buff, reg->bitfields.NORMALIZE_13);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PROG_STREAM_CNTL_7 regSE_PROG_STREAM_CNTL_7;

__inline void dump_SE_PROG_STREAM_CNTL_7(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PROG_STREAM_CNTL_7 *reg = (regSE_PROG_STREAM_CNTL_7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DATA_TYPE_14:%x", buff, reg->bitfields.DATA_TYPE_14);
  sprintf(buff,"%s SKIP_DWORDS_14:%x", buff, reg->bitfields.SKIP_DWORDS_14);
  sprintf(buff,"%s DST_VEC_LOC_14:%x", buff, reg->bitfields.DST_VEC_LOC_14);
  sprintf(buff,"%s LAST_VEC_14:%x", buff, reg->bitfields.LAST_VEC_14);
  sprintf(buff,"%s SIGNED_14:%x", buff, reg->bitfields.SIGNED_14);
  sprintf(buff,"%s NORMALIZE_14:%x", buff, reg->bitfields.NORMALIZE_14);
  sprintf(buff,"%s DATA_TYPE_15:%x", buff, reg->bitfields.DATA_TYPE_15);
  sprintf(buff,"%s SKIP_DWORDS_15:%x", buff, reg->bitfields.SKIP_DWORDS_15);
  sprintf(buff,"%s DST_VEC_LOC_15:%x", buff, reg->bitfields.DST_VEC_LOC_15);
  sprintf(buff,"%s LAST_VEC_15:%x", buff, reg->bitfields.LAST_VEC_15);
  sprintf(buff,"%s SIGNED_15:%x", buff, reg->bitfields.SIGNED_15);
  sprintf(buff,"%s NORMALIZE_15:%x", buff, reg->bitfields.NORMALIZE_15);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_CNTL regSE_VTX_STATE_CNTL;

__inline void dump_SE_VTX_STATE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_CNTL *reg = (regSE_VTX_STATE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_0_ASSEMBLY_CNTL:%x", buff, reg->bitfields.COLOR_0_ASSEMBLY_CNTL);
  sprintf(buff,"%s COLOR_1_ASSEMBLY_CNTL:%x", buff, reg->bitfields.COLOR_1_ASSEMBLY_CNTL);
  sprintf(buff,"%s COLOR_2_ASSEMBLY_CNTL:%x", buff, reg->bitfields.COLOR_2_ASSEMBLY_CNTL);
  sprintf(buff,"%s COLOR_3_ASSEMBLY_CNTL:%x", buff, reg->bitfields.COLOR_3_ASSEMBLY_CNTL);
  sprintf(buff,"%s COLOR_4_ASSEMBLY_CNTL:%x", buff, reg->bitfields.COLOR_4_ASSEMBLY_CNTL);
  sprintf(buff,"%s COLOR_5_ASSEMBLY_CNTL:%x", buff, reg->bitfields.COLOR_5_ASSEMBLY_CNTL);
  sprintf(buff,"%s COLOR_6_ASSEMBLY_CNTL:%x", buff, reg->bitfields.COLOR_6_ASSEMBLY_CNTL);
  sprintf(buff,"%s COLOR_7_ASSEMBLY_CNTL:%x", buff, reg->bitfields.COLOR_7_ASSEMBLY_CNTL);
  sprintf(buff,"%s UPDATE_USER_COLOR_0_ENA:%x", buff, reg->bitfields.UPDATE_USER_COLOR_0_ENA);
  sprintf(buff,"%s UPDATE_USER_COLOR_1_ENA:%x", buff, reg->bitfields.UPDATE_USER_COLOR_1_ENA);
  sprintf(buff,"%s USE_ADDR_IND_TBL:%x", buff, reg->bitfields.USE_ADDR_IND_TBL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_0 regSE_VTX_STATE_IND_REG_0;

__inline void dump_SE_VTX_STATE_IND_REG_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_0 *reg = (regSE_VTX_STATE_IND_REG_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_0:%x", buff, reg->bitfields.ADDR_0);
  sprintf(buff,"%s ADDR_1:%x", buff, reg->bitfields.ADDR_1);
  sprintf(buff,"%s ADDR_2:%x", buff, reg->bitfields.ADDR_2);
  sprintf(buff,"%s ADDR_3:%x", buff, reg->bitfields.ADDR_3);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_1 regSE_VTX_STATE_IND_REG_1;

__inline void dump_SE_VTX_STATE_IND_REG_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_1 *reg = (regSE_VTX_STATE_IND_REG_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_4:%x", buff, reg->bitfields.ADDR_4);
  sprintf(buff,"%s ADDR_5:%x", buff, reg->bitfields.ADDR_5);
  sprintf(buff,"%s ADDR_6:%x", buff, reg->bitfields.ADDR_6);
  sprintf(buff,"%s ADDR_7:%x", buff, reg->bitfields.ADDR_7);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_2 regSE_VTX_STATE_IND_REG_2;

__inline void dump_SE_VTX_STATE_IND_REG_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_2 *reg = (regSE_VTX_STATE_IND_REG_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_8:%x", buff, reg->bitfields.ADDR_8);
  sprintf(buff,"%s ADDR_9:%x", buff, reg->bitfields.ADDR_9);
  sprintf(buff,"%s ADDR_10:%x", buff, reg->bitfields.ADDR_10);
  sprintf(buff,"%s ADDR_11:%x", buff, reg->bitfields.ADDR_11);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_3 regSE_VTX_STATE_IND_REG_3;

__inline void dump_SE_VTX_STATE_IND_REG_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_3 *reg = (regSE_VTX_STATE_IND_REG_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_12:%x", buff, reg->bitfields.ADDR_12);
  sprintf(buff,"%s ADDR_13:%x", buff, reg->bitfields.ADDR_13);
  sprintf(buff,"%s ADDR_14:%x", buff, reg->bitfields.ADDR_14);
  sprintf(buff,"%s ADDR_15:%x", buff, reg->bitfields.ADDR_15);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_4 regSE_VTX_STATE_IND_REG_4;

__inline void dump_SE_VTX_STATE_IND_REG_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_4 *reg = (regSE_VTX_STATE_IND_REG_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_16:%x", buff, reg->bitfields.ADDR_16);
  sprintf(buff,"%s ADDR_17:%x", buff, reg->bitfields.ADDR_17);
  sprintf(buff,"%s ADDR_18:%x", buff, reg->bitfields.ADDR_18);
  sprintf(buff,"%s ADDR_19:%x", buff, reg->bitfields.ADDR_19);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_5 regSE_VTX_STATE_IND_REG_5;

__inline void dump_SE_VTX_STATE_IND_REG_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_5 *reg = (regSE_VTX_STATE_IND_REG_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_20:%x", buff, reg->bitfields.ADDR_20);
  sprintf(buff,"%s ADDR_21:%x", buff, reg->bitfields.ADDR_21);
  sprintf(buff,"%s ADDR_22:%x", buff, reg->bitfields.ADDR_22);
  sprintf(buff,"%s ADDR_23:%x", buff, reg->bitfields.ADDR_23);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_6 regSE_VTX_STATE_IND_REG_6;

__inline void dump_SE_VTX_STATE_IND_REG_6(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_6 *reg = (regSE_VTX_STATE_IND_REG_6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_24:%x", buff, reg->bitfields.ADDR_24);
  sprintf(buff,"%s ADDR_25:%x", buff, reg->bitfields.ADDR_25);
  sprintf(buff,"%s ADDR_26:%x", buff, reg->bitfields.ADDR_26);
  sprintf(buff,"%s ADDR_27:%x", buff, reg->bitfields.ADDR_27);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_7 regSE_VTX_STATE_IND_REG_7;

__inline void dump_SE_VTX_STATE_IND_REG_7(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_7 *reg = (regSE_VTX_STATE_IND_REG_7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_28:%x", buff, reg->bitfields.ADDR_28);
  sprintf(buff,"%s ADDR_29:%x", buff, reg->bitfields.ADDR_29);
  sprintf(buff,"%s ADDR_30:%x", buff, reg->bitfields.ADDR_30);
  sprintf(buff,"%s ADDR_31:%x", buff, reg->bitfields.ADDR_31);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_8 regSE_VTX_STATE_IND_REG_8;

__inline void dump_SE_VTX_STATE_IND_REG_8(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_8 *reg = (regSE_VTX_STATE_IND_REG_8 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_32:%x", buff, reg->bitfields.ADDR_32);
  sprintf(buff,"%s ADDR_33:%x", buff, reg->bitfields.ADDR_33);
  sprintf(buff,"%s ADDR_34:%x", buff, reg->bitfields.ADDR_34);
  sprintf(buff,"%s ADDR_35:%x", buff, reg->bitfields.ADDR_35);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_9 regSE_VTX_STATE_IND_REG_9;

__inline void dump_SE_VTX_STATE_IND_REG_9(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_9 *reg = (regSE_VTX_STATE_IND_REG_9 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_36:%x", buff, reg->bitfields.ADDR_36);
  sprintf(buff,"%s ADDR_37:%x", buff, reg->bitfields.ADDR_37);
  sprintf(buff,"%s ADDR_38:%x", buff, reg->bitfields.ADDR_38);
  sprintf(buff,"%s ADDR_39:%x", buff, reg->bitfields.ADDR_39);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_10 regSE_VTX_STATE_IND_REG_10;

__inline void dump_SE_VTX_STATE_IND_REG_10(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_10 *reg = (regSE_VTX_STATE_IND_REG_10 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_40:%x", buff, reg->bitfields.ADDR_40);
  sprintf(buff,"%s ADDR_41:%x", buff, reg->bitfields.ADDR_41);
  sprintf(buff,"%s ADDR_42:%x", buff, reg->bitfields.ADDR_42);
  sprintf(buff,"%s ADDR_43:%x", buff, reg->bitfields.ADDR_43);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_11 regSE_VTX_STATE_IND_REG_11;

__inline void dump_SE_VTX_STATE_IND_REG_11(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_11 *reg = (regSE_VTX_STATE_IND_REG_11 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_44:%x", buff, reg->bitfields.ADDR_44);
  sprintf(buff,"%s ADDR_45:%x", buff, reg->bitfields.ADDR_45);
  sprintf(buff,"%s ADDR_46:%x", buff, reg->bitfields.ADDR_46);
  sprintf(buff,"%s ADDR_47:%x", buff, reg->bitfields.ADDR_47);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_12 regSE_VTX_STATE_IND_REG_12;

__inline void dump_SE_VTX_STATE_IND_REG_12(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_12 *reg = (regSE_VTX_STATE_IND_REG_12 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_48:%x", buff, reg->bitfields.ADDR_48);
  sprintf(buff,"%s ADDR_49:%x", buff, reg->bitfields.ADDR_49);
  sprintf(buff,"%s ADDR_50:%x", buff, reg->bitfields.ADDR_50);
  sprintf(buff,"%s ADDR_51:%x", buff, reg->bitfields.ADDR_51);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_13 regSE_VTX_STATE_IND_REG_13;

__inline void dump_SE_VTX_STATE_IND_REG_13(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_13 *reg = (regSE_VTX_STATE_IND_REG_13 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_52:%x", buff, reg->bitfields.ADDR_52);
  sprintf(buff,"%s ADDR_53:%x", buff, reg->bitfields.ADDR_53);
  sprintf(buff,"%s ADDR_54:%x", buff, reg->bitfields.ADDR_54);
  sprintf(buff,"%s ADDR_55:%x", buff, reg->bitfields.ADDR_55);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_14 regSE_VTX_STATE_IND_REG_14;

__inline void dump_SE_VTX_STATE_IND_REG_14(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_14 *reg = (regSE_VTX_STATE_IND_REG_14 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_56:%x", buff, reg->bitfields.ADDR_56);
  sprintf(buff,"%s ADDR_57:%x", buff, reg->bitfields.ADDR_57);
  sprintf(buff,"%s ADDR_58:%x", buff, reg->bitfields.ADDR_58);
  sprintf(buff,"%s ADDR_59:%x", buff, reg->bitfields.ADDR_59);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_STATE_IND_REG_15 regSE_VTX_STATE_IND_REG_15;

__inline void dump_SE_VTX_STATE_IND_REG_15(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_STATE_IND_REG_15 *reg = (regSE_VTX_STATE_IND_REG_15 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ADDR_60:%x", buff, reg->bitfields.ADDR_60);
  sprintf(buff,"%s ADDR_61:%x", buff, reg->bitfields.ADDR_61);
  sprintf(buff,"%s ADDR_62:%x", buff, reg->bitfields.ADDR_62);
  sprintf(buff,"%s ADDR_63:%x", buff, reg->bitfields.ADDR_63);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_VECTOR_INDX_REG regSE_TCL_VECTOR_INDX_REG;

__inline void dump_SE_TCL_VECTOR_INDX_REG(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_VECTOR_INDX_REG *reg = (regSE_TCL_VECTOR_INDX_REG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OCTWORD_OFFSET:%x", buff, reg->bitfields.OCTWORD_OFFSET);
  sprintf(buff,"%s OCTWORD_STRIDE:%x", buff, reg->bitfields.OCTWORD_STRIDE);
  sprintf(buff,"%s DWORD_COUNT:%x", buff, reg->bitfields.DWORD_COUNT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_VECTOR_DATA_REG regSE_TCL_VECTOR_DATA_REG;

__inline void dump_SE_TCL_VECTOR_DATA_REG(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_VECTOR_DATA_REG *reg = (regSE_TCL_VECTOR_DATA_REG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_SCALAR_INDX_REG regSE_TCL_SCALAR_INDX_REG;

__inline void dump_SE_TCL_SCALAR_INDX_REG(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_SCALAR_INDX_REG *reg = (regSE_TCL_SCALAR_INDX_REG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DWORD_OFFSET:%x", buff, reg->bitfields.DWORD_OFFSET);
  sprintf(buff,"%s DWORD_STRIDE:%x", buff, reg->bitfields.DWORD_STRIDE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_SCALAR_DATA_REG regSE_TCL_SCALAR_DATA_REG;

__inline void dump_SE_TCL_SCALAR_DATA_REG(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_SCALAR_DATA_REG *reg = (regSE_TCL_SCALAR_DATA_REG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_MATRIX_SEL_0 regSE_TCL_MATRIX_SEL_0;

__inline void dump_SE_TCL_MATRIX_SEL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_MATRIX_SEL_0 *reg = (regSE_TCL_MATRIX_SEL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MODELVIEW_MTX_0_SEL:%x", buff, reg->bitfields.MODELVIEW_MTX_0_SEL);
  sprintf(buff,"%s MODELVIEW_MTX_1_SEL:%x", buff, reg->bitfields.MODELVIEW_MTX_1_SEL);
  sprintf(buff,"%s MODELVIEW_MTX_2_SEL:%x", buff, reg->bitfields.MODELVIEW_MTX_2_SEL);
  sprintf(buff,"%s MODELVIEW_MTX_3_SEL:%x", buff, reg->bitfields.MODELVIEW_MTX_3_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_MATRIX_SEL_1 regSE_TCL_MATRIX_SEL_1;

__inline void dump_SE_TCL_MATRIX_SEL_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_MATRIX_SEL_1 *reg = (regSE_TCL_MATRIX_SEL_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s IT_MODELVIEW_MTX_0_SEL:%x", buff, reg->bitfields.IT_MODELVIEW_MTX_0_SEL);
  sprintf(buff,"%s IT_MODELVIEW_MTX_1_SEL:%x", buff, reg->bitfields.IT_MODELVIEW_MTX_1_SEL);
  sprintf(buff,"%s IT_MODELVIEW_MTX_2_SEL:%x", buff, reg->bitfields.IT_MODELVIEW_MTX_2_SEL);
  sprintf(buff,"%s IT_MODELVIEW_MTX_3_SEL:%x", buff, reg->bitfields.IT_MODELVIEW_MTX_3_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_MATRIX_SEL_2 regSE_TCL_MATRIX_SEL_2;

__inline void dump_SE_TCL_MATRIX_SEL_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_MATRIX_SEL_2 *reg = (regSE_TCL_MATRIX_SEL_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MODEL2CLIP_MTX_0_SEL:%x", buff, reg->bitfields.MODEL2CLIP_MTX_0_SEL);
  sprintf(buff,"%s MODEL2CLIP_MTX_1_SEL:%x", buff, reg->bitfields.MODEL2CLIP_MTX_1_SEL);
  sprintf(buff,"%s MODEL2CLIP_MTX_2_SEL:%x", buff, reg->bitfields.MODEL2CLIP_MTX_2_SEL);
  sprintf(buff,"%s MODEL2CLIP_MTX_3_SEL:%x", buff, reg->bitfields.MODEL2CLIP_MTX_3_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_MATRIX_SEL_3 regSE_TCL_MATRIX_SEL_3;

__inline void dump_SE_TCL_MATRIX_SEL_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_MATRIX_SEL_3 *reg = (regSE_TCL_MATRIX_SEL_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_XFORM_MTX_0_SEL:%x", buff, reg->bitfields.TEX_XFORM_MTX_0_SEL);
  sprintf(buff,"%s TEX_XFORM_MTX_1_SEL:%x", buff, reg->bitfields.TEX_XFORM_MTX_1_SEL);
  sprintf(buff,"%s TEX_XFORM_MTX_2_SEL:%x", buff, reg->bitfields.TEX_XFORM_MTX_2_SEL);
  sprintf(buff,"%s TEX_XFORM_MTX_3_SEL:%x", buff, reg->bitfields.TEX_XFORM_MTX_3_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_MATRIX_SEL_4 regSE_TCL_MATRIX_SEL_4;

__inline void dump_SE_TCL_MATRIX_SEL_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_MATRIX_SEL_4 *reg = (regSE_TCL_MATRIX_SEL_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_XFORM_MTX_4_SEL:%x", buff, reg->bitfields.TEX_XFORM_MTX_4_SEL);
  sprintf(buff,"%s TEX_XFORM_MTX_5_SEL:%x", buff, reg->bitfields.TEX_XFORM_MTX_5_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_PER_VTX_MTX_CNTL regSE_TCL_PER_VTX_MTX_CNTL;

__inline void dump_SE_TCL_PER_VTX_MTX_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_PER_VTX_MTX_CNTL *reg = (regSE_TCL_PER_VTX_MTX_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MV_MTX_0_INDX:%x", buff, reg->bitfields.MV_MTX_0_INDX);
  sprintf(buff,"%s ITMV_MTX_0_INDX:%x", buff, reg->bitfields.ITMV_MTX_0_INDX);
  sprintf(buff,"%s M2C_MTX_0_INDX:%x", buff, reg->bitfields.M2C_MTX_0_INDX);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_OUTPUT_VTX_COMP_SEL regSE_TCL_OUTPUT_VTX_COMP_SEL;

__inline void dump_SE_TCL_OUTPUT_VTX_COMP_SEL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_OUTPUT_VTX_COMP_SEL *reg = (regSE_TCL_OUTPUT_VTX_COMP_SEL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_XYZW_SEL:%x", buff, reg->bitfields.VTX_XYZW_SEL);
  sprintf(buff,"%s VTX_COLOR_0_SEL:%x", buff, reg->bitfields.VTX_COLOR_0_SEL);
  sprintf(buff,"%s VTX_COLOR_1_SEL:%x", buff, reg->bitfields.VTX_COLOR_1_SEL);
  sprintf(buff,"%s VTX_TEX_0_SEL:%x", buff, reg->bitfields.VTX_TEX_0_SEL);
  sprintf(buff,"%s VTX_TEX_1_SEL:%x", buff, reg->bitfields.VTX_TEX_1_SEL);
  sprintf(buff,"%s VTX_TEX_2_SEL:%x", buff, reg->bitfields.VTX_TEX_2_SEL);
  sprintf(buff,"%s VTX_TEX_3_SEL:%x", buff, reg->bitfields.VTX_TEX_3_SEL);
  sprintf(buff,"%s VTX_TEX_4_SEL:%x", buff, reg->bitfields.VTX_TEX_4_SEL);
  sprintf(buff,"%s VTX_TEX_5_SEL:%x", buff, reg->bitfields.VTX_TEX_5_SEL);
  sprintf(buff,"%s VTX_DISCRETE_FOG_SEL:%x", buff, reg->bitfields.VTX_DISCRETE_FOG_SEL);
  sprintf(buff,"%s VTX_PT_SIZE_SEL:%x", buff, reg->bitfields.VTX_PT_SIZE_SEL);
  sprintf(buff,"%s FORCE_IN_ORDER_PROC:%x", buff, reg->bitfields.FORCE_IN_ORDER_PROC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_INPUT_VTX_VECTOR_ADDR_0 regSE_TCL_INPUT_VTX_VECTOR_ADDR_0;

__inline void dump_SE_TCL_INPUT_VTX_VECTOR_ADDR_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_INPUT_VTX_VECTOR_ADDR_0 *reg = (regSE_TCL_INPUT_VTX_VECTOR_ADDR_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_INPUT_VTX_VECTOR_ADDR_1 regSE_TCL_INPUT_VTX_VECTOR_ADDR_1;

__inline void dump_SE_TCL_INPUT_VTX_VECTOR_ADDR_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_INPUT_VTX_VECTOR_ADDR_1 *reg = (regSE_TCL_INPUT_VTX_VECTOR_ADDR_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_COLOR_0_ADDR:%x", buff, reg->bitfields.VTX_COLOR_0_ADDR);
  sprintf(buff,"%s VTX_COLOR_1_ADDR:%x", buff, reg->bitfields.VTX_COLOR_1_ADDR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_INPUT_VTX_VECTOR_ADDR_2 regSE_TCL_INPUT_VTX_VECTOR_ADDR_2;

__inline void dump_SE_TCL_INPUT_VTX_VECTOR_ADDR_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_INPUT_VTX_VECTOR_ADDR_2 *reg = (regSE_TCL_INPUT_VTX_VECTOR_ADDR_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_TEX_0_ADDR:%x", buff, reg->bitfields.VTX_TEX_0_ADDR);
  sprintf(buff,"%s VTX_TEX_1_ADDR:%x", buff, reg->bitfields.VTX_TEX_1_ADDR);
  sprintf(buff,"%s VTX_TEX_2_ADDR:%x", buff, reg->bitfields.VTX_TEX_2_ADDR);
  sprintf(buff,"%s VTX_TEX_3_ADDR:%x", buff, reg->bitfields.VTX_TEX_3_ADDR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_INPUT_VTX_VECTOR_ADDR_3 regSE_TCL_INPUT_VTX_VECTOR_ADDR_3;

__inline void dump_SE_TCL_INPUT_VTX_VECTOR_ADDR_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_INPUT_VTX_VECTOR_ADDR_3 *reg = (regSE_TCL_INPUT_VTX_VECTOR_ADDR_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_TEX_4_ADDR:%x", buff, reg->bitfields.VTX_TEX_4_ADDR);
  sprintf(buff,"%s VTX_TEX_5_ADDR:%x", buff, reg->bitfields.VTX_TEX_5_ADDR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_LIGHT_MODEL_CNTL_0 regSE_TCL_LIGHT_MODEL_CNTL_0;

__inline void dump_SE_TCL_LIGHT_MODEL_CNTL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_LIGHT_MODEL_CNTL_0 *reg = (regSE_TCL_LIGHT_MODEL_CNTL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LIGHTING_ENA:%x", buff, reg->bitfields.LIGHTING_ENA);
  sprintf(buff,"%s LIGHTING_IN_MODEL:%x", buff, reg->bitfields.LIGHTING_IN_MODEL);
  sprintf(buff,"%s LOCAL_VIEWER:%x", buff, reg->bitfields.LOCAL_VIEWER);
  sprintf(buff,"%s NORMALIZE_NORMAL:%x", buff, reg->bitfields.NORMALIZE_NORMAL);
  sprintf(buff,"%s RESCALE_NORMAL:%x", buff, reg->bitfields.RESCALE_NORMAL);
  sprintf(buff,"%s SPECULAR_ENA:%x", buff, reg->bitfields.SPECULAR_ENA);
  sprintf(buff,"%s DIFFUSE_SPECULAR_COMBINE:%x", buff, reg->bitfields.DIFFUSE_SPECULAR_COMBINE);
  sprintf(buff,"%s ALPHA_LIGHTING:%x", buff, reg->bitfields.ALPHA_LIGHTING);
  sprintf(buff,"%s LOC_LIGHT_W_SCALE_SUB:%x", buff, reg->bitfields.LOC_LIGHT_W_SCALE_SUB);
  sprintf(buff,"%s NO_NORMAL_DO_AMB_ONLY:%x", buff, reg->bitfields.NO_NORMAL_DO_AMB_ONLY);
  sprintf(buff,"%s TWO_SIDED_LIGHTING_ENA:%x", buff, reg->bitfields.TWO_SIDED_LIGHTING_ENA);
  sprintf(buff,"%s FRONT_SHININESS_SRC:%x", buff, reg->bitfields.FRONT_SHININESS_SRC);
  sprintf(buff,"%s BACK_SHININESS_SRC:%x", buff, reg->bitfields.BACK_SHININESS_SRC);
  sprintf(buff,"%s WAIT_ON_CLIP_DIS:%x", buff, reg->bitfields.WAIT_ON_CLIP_DIS);
  sprintf(buff,"%s CLIP_DBL_BUF_ENA:%x", buff, reg->bitfields.CLIP_DBL_BUF_ENA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_LIGHT_MODEL_CNTL_1 regSE_TCL_LIGHT_MODEL_CNTL_1;

__inline void dump_SE_TCL_LIGHT_MODEL_CNTL_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_LIGHT_MODEL_CNTL_1 *reg = (regSE_TCL_LIGHT_MODEL_CNTL_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FRONT_EMISSIVE_SRC:%x", buff, reg->bitfields.FRONT_EMISSIVE_SRC);
  sprintf(buff,"%s FRONT_AMBIENT_SRC:%x", buff, reg->bitfields.FRONT_AMBIENT_SRC);
  sprintf(buff,"%s FRONT_DIFFUSE_SRC:%x", buff, reg->bitfields.FRONT_DIFFUSE_SRC);
  sprintf(buff,"%s FRONT_SPECULAR_SRC:%x", buff, reg->bitfields.FRONT_SPECULAR_SRC);
  sprintf(buff,"%s BACK_EMISSIVE_SRC:%x", buff, reg->bitfields.BACK_EMISSIVE_SRC);
  sprintf(buff,"%s BACK_AMBIENT_SRC:%x", buff, reg->bitfields.BACK_AMBIENT_SRC);
  sprintf(buff,"%s BACK_DIFFUSE_SRC:%x", buff, reg->bitfields.BACK_DIFFUSE_SRC);
  sprintf(buff,"%s BACK_SPECULAR_SRC:%x", buff, reg->bitfields.BACK_SPECULAR_SRC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_PER_LIGHT_CNTL_0 regSE_TCL_PER_LIGHT_CNTL_0;

__inline void dump_SE_TCL_PER_LIGHT_CNTL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_PER_LIGHT_CNTL_0 *reg = (regSE_TCL_PER_LIGHT_CNTL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LIGHT_ENA_0:%x", buff, reg->bitfields.LIGHT_ENA_0);
  sprintf(buff,"%s AMBIENT_ENA_0:%x", buff, reg->bitfields.AMBIENT_ENA_0);
  sprintf(buff,"%s SPECULAR_ENA_0:%x", buff, reg->bitfields.SPECULAR_ENA_0);
  sprintf(buff,"%s LOCAL_LIGHT_0:%x", buff, reg->bitfields.LOCAL_LIGHT_0);
  sprintf(buff,"%s SPOT_ENA_0:%x", buff, reg->bitfields.SPOT_ENA_0);
  sprintf(buff,"%s SPOT_DUAL_CONE_0:%x", buff, reg->bitfields.SPOT_DUAL_CONE_0);
  sprintf(buff,"%s RNG_ATT_ENA_0:%x", buff, reg->bitfields.RNG_ATT_ENA_0);
  sprintf(buff,"%s RNG_ATT_CONSTANT_ENA_0:%x", buff, reg->bitfields.RNG_ATT_CONSTANT_ENA_0);
  sprintf(buff,"%s RSVD_LT0_1BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT0_1BIT_NUM0);
  sprintf(buff,"%s RSVD_LT0_1BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT0_1BIT_NUM1);
  sprintf(buff,"%s RSVD_LT0_1BIT_NUM2:%x", buff, reg->bitfields.RSVD_LT0_1BIT_NUM2);
  sprintf(buff,"%s RSVD_LT0_1BIT_NUM3:%x", buff, reg->bitfields.RSVD_LT0_1BIT_NUM3);
  sprintf(buff,"%s RSVD_LT0_2BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT0_2BIT_NUM0);
  sprintf(buff,"%s RSVD_LT0_2BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT0_2BIT_NUM1);
  sprintf(buff,"%s LIGHT_ENA_1:%x", buff, reg->bitfields.LIGHT_ENA_1);
  sprintf(buff,"%s AMBIENT_ENA_1:%x", buff, reg->bitfields.AMBIENT_ENA_1);
  sprintf(buff,"%s SPECULAR_ENA_1:%x", buff, reg->bitfields.SPECULAR_ENA_1);
  sprintf(buff,"%s LOCAL_LIGHT_1:%x", buff, reg->bitfields.LOCAL_LIGHT_1);
  sprintf(buff,"%s SPOT_ENA_1:%x", buff, reg->bitfields.SPOT_ENA_1);
  sprintf(buff,"%s SPOT_DUAL_CONE_1:%x", buff, reg->bitfields.SPOT_DUAL_CONE_1);
  sprintf(buff,"%s RNG_ATT_ENA_1:%x", buff, reg->bitfields.RNG_ATT_ENA_1);
  sprintf(buff,"%s RNG_ATT_CONSTANT_ENA_1:%x", buff, reg->bitfields.RNG_ATT_CONSTANT_ENA_1);
  sprintf(buff,"%s RSVD_LT1_1BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT1_1BIT_NUM0);
  sprintf(buff,"%s RSVD_LT1_1BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT1_1BIT_NUM1);
  sprintf(buff,"%s RSVD_LT1_1BIT_NUM2:%x", buff, reg->bitfields.RSVD_LT1_1BIT_NUM2);
  sprintf(buff,"%s RSVD_LT1_1BIT_NUM3:%x", buff, reg->bitfields.RSVD_LT1_1BIT_NUM3);
  sprintf(buff,"%s RSVD_LT1_2BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT1_2BIT_NUM0);
  sprintf(buff,"%s RSVD_LT1_2BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT1_2BIT_NUM1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_PER_LIGHT_CNTL_1 regSE_TCL_PER_LIGHT_CNTL_1;

__inline void dump_SE_TCL_PER_LIGHT_CNTL_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_PER_LIGHT_CNTL_1 *reg = (regSE_TCL_PER_LIGHT_CNTL_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LIGHT_ENA_2:%x", buff, reg->bitfields.LIGHT_ENA_2);
  sprintf(buff,"%s AMBIENT_ENA_2:%x", buff, reg->bitfields.AMBIENT_ENA_2);
  sprintf(buff,"%s SPECULAR_ENA_2:%x", buff, reg->bitfields.SPECULAR_ENA_2);
  sprintf(buff,"%s LOCAL_LIGHT_2:%x", buff, reg->bitfields.LOCAL_LIGHT_2);
  sprintf(buff,"%s SPOT_ENA_2:%x", buff, reg->bitfields.SPOT_ENA_2);
  sprintf(buff,"%s SPOT_DUAL_CONE_2:%x", buff, reg->bitfields.SPOT_DUAL_CONE_2);
  sprintf(buff,"%s RNG_ATT_ENA_2:%x", buff, reg->bitfields.RNG_ATT_ENA_2);
  sprintf(buff,"%s RNG_ATT_CONSTANT_ENA_2:%x", buff, reg->bitfields.RNG_ATT_CONSTANT_ENA_2);
  sprintf(buff,"%s RSVD_LT2_1BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT2_1BIT_NUM0);
  sprintf(buff,"%s RSVD_LT2_1BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT2_1BIT_NUM1);
  sprintf(buff,"%s RSVD_LT2_1BIT_NUM2:%x", buff, reg->bitfields.RSVD_LT2_1BIT_NUM2);
  sprintf(buff,"%s RSVD_LT2_1BIT_NUM3:%x", buff, reg->bitfields.RSVD_LT2_1BIT_NUM3);
  sprintf(buff,"%s RSVD_LT2_2BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT2_2BIT_NUM0);
  sprintf(buff,"%s RSVD_LT2_2BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT2_2BIT_NUM1);
  sprintf(buff,"%s LIGHT_ENA_3:%x", buff, reg->bitfields.LIGHT_ENA_3);
  sprintf(buff,"%s AMBIENT_ENA_3:%x", buff, reg->bitfields.AMBIENT_ENA_3);
  sprintf(buff,"%s SPECULAR_ENA_3:%x", buff, reg->bitfields.SPECULAR_ENA_3);
  sprintf(buff,"%s LOCAL_LIGHT_3:%x", buff, reg->bitfields.LOCAL_LIGHT_3);
  sprintf(buff,"%s SPOT_ENA_3:%x", buff, reg->bitfields.SPOT_ENA_3);
  sprintf(buff,"%s SPOT_DUAL_CONE_3:%x", buff, reg->bitfields.SPOT_DUAL_CONE_3);
  sprintf(buff,"%s RNG_ATT_ENA_3:%x", buff, reg->bitfields.RNG_ATT_ENA_3);
  sprintf(buff,"%s RNG_ATT_CONSTANT_ENA_3:%x", buff, reg->bitfields.RNG_ATT_CONSTANT_ENA_3);
  sprintf(buff,"%s RSVD_LT3_1BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT3_1BIT_NUM0);
  sprintf(buff,"%s RSVD_LT3_1BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT3_1BIT_NUM1);
  sprintf(buff,"%s RSVD_LT3_1BIT_NUM2:%x", buff, reg->bitfields.RSVD_LT3_1BIT_NUM2);
  sprintf(buff,"%s RSVD_LT3_1BIT_NUM3:%x", buff, reg->bitfields.RSVD_LT3_1BIT_NUM3);
  sprintf(buff,"%s RSVD_LT3_2BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT3_2BIT_NUM0);
  sprintf(buff,"%s RSVD_LT3_2BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT3_2BIT_NUM1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_PER_LIGHT_CNTL_2 regSE_TCL_PER_LIGHT_CNTL_2;

__inline void dump_SE_TCL_PER_LIGHT_CNTL_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_PER_LIGHT_CNTL_2 *reg = (regSE_TCL_PER_LIGHT_CNTL_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LIGHT_ENA_4:%x", buff, reg->bitfields.LIGHT_ENA_4);
  sprintf(buff,"%s AMBIENT_ENA_4:%x", buff, reg->bitfields.AMBIENT_ENA_4);
  sprintf(buff,"%s SPECULAR_ENA_4:%x", buff, reg->bitfields.SPECULAR_ENA_4);
  sprintf(buff,"%s LOCAL_LIGHT_4:%x", buff, reg->bitfields.LOCAL_LIGHT_4);
  sprintf(buff,"%s SPOT_ENA_4:%x", buff, reg->bitfields.SPOT_ENA_4);
  sprintf(buff,"%s SPOT_DUAL_CONE_4:%x", buff, reg->bitfields.SPOT_DUAL_CONE_4);
  sprintf(buff,"%s RNG_ATT_ENA_4:%x", buff, reg->bitfields.RNG_ATT_ENA_4);
  sprintf(buff,"%s RNG_ATT_CONSTANT_ENA_4:%x", buff, reg->bitfields.RNG_ATT_CONSTANT_ENA_4);
  sprintf(buff,"%s RSVD_LT4_1BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT4_1BIT_NUM0);
  sprintf(buff,"%s RSVD_LT4_1BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT4_1BIT_NUM1);
  sprintf(buff,"%s RSVD_LT4_1BIT_NUM2:%x", buff, reg->bitfields.RSVD_LT4_1BIT_NUM2);
  sprintf(buff,"%s RSVD_LT4_1BIT_NUM3:%x", buff, reg->bitfields.RSVD_LT4_1BIT_NUM3);
  sprintf(buff,"%s RSVD_LT4_2BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT4_2BIT_NUM0);
  sprintf(buff,"%s RSVD_LT4_2BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT4_2BIT_NUM1);
  sprintf(buff,"%s LIGHT_ENA_5:%x", buff, reg->bitfields.LIGHT_ENA_5);
  sprintf(buff,"%s AMBIENT_ENA_5:%x", buff, reg->bitfields.AMBIENT_ENA_5);
  sprintf(buff,"%s SPECULAR_ENA_5:%x", buff, reg->bitfields.SPECULAR_ENA_5);
  sprintf(buff,"%s LOCAL_LIGHT_5:%x", buff, reg->bitfields.LOCAL_LIGHT_5);
  sprintf(buff,"%s SPOT_ENA_5:%x", buff, reg->bitfields.SPOT_ENA_5);
  sprintf(buff,"%s SPOT_DUAL_CONE_5:%x", buff, reg->bitfields.SPOT_DUAL_CONE_5);
  sprintf(buff,"%s RNG_ATT_ENA_5:%x", buff, reg->bitfields.RNG_ATT_ENA_5);
  sprintf(buff,"%s RNG_ATT_CONSTANT_ENA_5:%x", buff, reg->bitfields.RNG_ATT_CONSTANT_ENA_5);
  sprintf(buff,"%s RSVD_LT5_1BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT5_1BIT_NUM0);
  sprintf(buff,"%s RSVD_LT5_1BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT5_1BIT_NUM1);
  sprintf(buff,"%s RSVD_LT5_1BIT_NUM2:%x", buff, reg->bitfields.RSVD_LT5_1BIT_NUM2);
  sprintf(buff,"%s RSVD_LT5_1BIT_NUM3:%x", buff, reg->bitfields.RSVD_LT5_1BIT_NUM3);
  sprintf(buff,"%s RSVD_LT5_2BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT5_2BIT_NUM0);
  sprintf(buff,"%s RSVD_LT5_2BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT5_2BIT_NUM1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_PER_LIGHT_CNTL_3 regSE_TCL_PER_LIGHT_CNTL_3;

__inline void dump_SE_TCL_PER_LIGHT_CNTL_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_PER_LIGHT_CNTL_3 *reg = (regSE_TCL_PER_LIGHT_CNTL_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LIGHT_ENA_6:%x", buff, reg->bitfields.LIGHT_ENA_6);
  sprintf(buff,"%s AMBIENT_ENA_6:%x", buff, reg->bitfields.AMBIENT_ENA_6);
  sprintf(buff,"%s SPECULAR_ENA_6:%x", buff, reg->bitfields.SPECULAR_ENA_6);
  sprintf(buff,"%s LOCAL_LIGHT_6:%x", buff, reg->bitfields.LOCAL_LIGHT_6);
  sprintf(buff,"%s SPOT_ENA_6:%x", buff, reg->bitfields.SPOT_ENA_6);
  sprintf(buff,"%s SPOT_DUAL_CONE_6:%x", buff, reg->bitfields.SPOT_DUAL_CONE_6);
  sprintf(buff,"%s RNG_ATT_ENA_6:%x", buff, reg->bitfields.RNG_ATT_ENA_6);
  sprintf(buff,"%s RNG_ATT_CONSTANT_ENA_6:%x", buff, reg->bitfields.RNG_ATT_CONSTANT_ENA_6);
  sprintf(buff,"%s RSVD_LT6_1BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT6_1BIT_NUM0);
  sprintf(buff,"%s RSVD_LT6_1BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT6_1BIT_NUM1);
  sprintf(buff,"%s RSVD_LT6_1BIT_NUM2:%x", buff, reg->bitfields.RSVD_LT6_1BIT_NUM2);
  sprintf(buff,"%s RSVD_LT6_1BIT_NUM3:%x", buff, reg->bitfields.RSVD_LT6_1BIT_NUM3);
  sprintf(buff,"%s RSVD_LT6_2BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT6_2BIT_NUM0);
  sprintf(buff,"%s RSVD_LT6_2BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT6_2BIT_NUM1);
  sprintf(buff,"%s LIGHT_ENA_7:%x", buff, reg->bitfields.LIGHT_ENA_7);
  sprintf(buff,"%s AMBIENT_ENA_7:%x", buff, reg->bitfields.AMBIENT_ENA_7);
  sprintf(buff,"%s SPECULAR_ENA_7:%x", buff, reg->bitfields.SPECULAR_ENA_7);
  sprintf(buff,"%s LOCAL_LIGHT_7:%x", buff, reg->bitfields.LOCAL_LIGHT_7);
  sprintf(buff,"%s SPOT_ENA_7:%x", buff, reg->bitfields.SPOT_ENA_7);
  sprintf(buff,"%s SPOT_DUAL_CONE_7:%x", buff, reg->bitfields.SPOT_DUAL_CONE_7);
  sprintf(buff,"%s RNG_ATT_ENA_7:%x", buff, reg->bitfields.RNG_ATT_ENA_7);
  sprintf(buff,"%s RNG_ATT_CONSTANT_ENA_7:%x", buff, reg->bitfields.RNG_ATT_CONSTANT_ENA_7);
  sprintf(buff,"%s RSVD_LT7_1BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT7_1BIT_NUM0);
  sprintf(buff,"%s RSVD_LT7_1BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT7_1BIT_NUM1);
  sprintf(buff,"%s RSVD_LT7_1BIT_NUM2:%x", buff, reg->bitfields.RSVD_LT7_1BIT_NUM2);
  sprintf(buff,"%s RSVD_LT7_1BIT_NUM3:%x", buff, reg->bitfields.RSVD_LT7_1BIT_NUM3);
  sprintf(buff,"%s RSVD_LT7_2BIT_NUM0:%x", buff, reg->bitfields.RSVD_LT7_2BIT_NUM0);
  sprintf(buff,"%s RSVD_LT7_2BIT_NUM1:%x", buff, reg->bitfields.RSVD_LT7_2BIT_NUM1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_DEBUG_0 regSE_TCL_DEBUG_0;

__inline void dump_SE_TCL_DEBUG_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_DEBUG_0 *reg = (regSE_TCL_DEBUG_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DEBUG_RD_SEL_ENA:%x", buff, reg->bitfields.DEBUG_RD_SEL_ENA);
  sprintf(buff,"%s DEBUG_RD_SEL:%x", buff, reg->bitfields.DEBUG_RD_SEL);
  sprintf(buff,"%s DEBUG_IMM_RD:%x", buff, reg->bitfields.DEBUG_IMM_RD);
  sprintf(buff,"%s ST_UPD_FIFO_SZ:%x", buff, reg->bitfields.ST_UPD_FIFO_SZ);
  sprintf(buff,"%s DIS_CLIP_ERR_DETECT:%x", buff, reg->bitfields.DIS_CLIP_ERR_DETECT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_STATE_FLUSH_REG regSE_TCL_STATE_FLUSH_REG;

__inline void dump_SE_TCL_STATE_FLUSH_REG(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_STATE_FLUSH_REG *reg = (regSE_TCL_STATE_FLUSH_REG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_FPU_LATENCY regSE_TCL_FPU_LATENCY;

__inline void dump_SE_TCL_FPU_LATENCY(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_FPU_LATENCY *reg = (regSE_TCL_FPU_LATENCY *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VE_ENG_LATENCY:%x", buff, reg->bitfields.VE_ENG_LATENCY);
  sprintf(buff,"%s VE_MULT_LATENCY:%x", buff, reg->bitfields.VE_MULT_LATENCY);
  sprintf(buff,"%s VE_ACCUM_LATENCY:%x", buff, reg->bitfields.VE_ACCUM_LATENCY);
  sprintf(buff,"%s SC_ENG_LATENCY:%x", buff, reg->bitfields.SC_ENG_LATENCY);
  sprintf(buff,"%s VE_OUT_LATENCY:%x", buff, reg->bitfields.VE_OUT_LATENCY);
  sprintf(buff,"%s SC_MATH_LATENCY:%x", buff, reg->bitfields.SC_MATH_LATENCY);
  sprintf(buff,"%s RSVD_LTNCY_2BIT:%x", buff, reg->bitfields.RSVD_LTNCY_2BIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_TEX_PROC_CNTL_2 regSE_TCL_TEX_PROC_CNTL_2;

__inline void dump_SE_TCL_TEX_PROC_CNTL_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_TEX_PROC_CNTL_2 *reg = (regSE_TCL_TEX_PROC_CNTL_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TCG_COMP_MASK_0:%x", buff, reg->bitfields.TCG_COMP_MASK_0);
  sprintf(buff,"%s TCG_COMP_MASK_1:%x", buff, reg->bitfields.TCG_COMP_MASK_1);
  sprintf(buff,"%s TCG_COMP_MASK_2:%x", buff, reg->bitfields.TCG_COMP_MASK_2);
  sprintf(buff,"%s TCG_COMP_MASK_3:%x", buff, reg->bitfields.TCG_COMP_MASK_3);
  sprintf(buff,"%s TCG_COMP_MASK_4:%x", buff, reg->bitfields.TCG_COMP_MASK_4);
  sprintf(buff,"%s TCG_COMP_MASK_5:%x", buff, reg->bitfields.TCG_COMP_MASK_5);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_TEX_PROC_CNTL_3 regSE_TCL_TEX_PROC_CNTL_3;

__inline void dump_SE_TCL_TEX_PROC_CNTL_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_TEX_PROC_CNTL_3 *reg = (regSE_TCL_TEX_PROC_CNTL_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TCG_INPUT_TEX_0:%x", buff, reg->bitfields.TCG_INPUT_TEX_0);
  sprintf(buff,"%s TCG_INPUT_TEX_1:%x", buff, reg->bitfields.TCG_INPUT_TEX_1);
  sprintf(buff,"%s TCG_INPUT_TEX_2:%x", buff, reg->bitfields.TCG_INPUT_TEX_2);
  sprintf(buff,"%s TCG_INPUT_TEX_3:%x", buff, reg->bitfields.TCG_INPUT_TEX_3);
  sprintf(buff,"%s TCG_INPUT_TEX_4:%x", buff, reg->bitfields.TCG_INPUT_TEX_4);
  sprintf(buff,"%s TCG_INPUT_TEX_5:%x", buff, reg->bitfields.TCG_INPUT_TEX_5);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_TEX_PROC_CNTL_0 regSE_TCL_TEX_PROC_CNTL_0;

__inline void dump_SE_TCL_TEX_PROC_CNTL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_TEX_PROC_CNTL_0 *reg = (regSE_TCL_TEX_PROC_CNTL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_CS_PROC_ENA_0:%x", buff, reg->bitfields.TEX_CS_PROC_ENA_0);
  sprintf(buff,"%s TEX_CS_PROC_ENA_1:%x", buff, reg->bitfields.TEX_CS_PROC_ENA_1);
  sprintf(buff,"%s TEX_CS_PROC_ENA_2:%x", buff, reg->bitfields.TEX_CS_PROC_ENA_2);
  sprintf(buff,"%s TEX_CS_PROC_ENA_3:%x", buff, reg->bitfields.TEX_CS_PROC_ENA_3);
  sprintf(buff,"%s TEX_CS_PROC_ENA_4:%x", buff, reg->bitfields.TEX_CS_PROC_ENA_4);
  sprintf(buff,"%s TEX_CS_PROC_ENA_5:%x", buff, reg->bitfields.TEX_CS_PROC_ENA_5);
  sprintf(buff,"%s TEX_XFORM_ENA_0:%x", buff, reg->bitfields.TEX_XFORM_ENA_0);
  sprintf(buff,"%s TEX_XFORM_ENA_1:%x", buff, reg->bitfields.TEX_XFORM_ENA_1);
  sprintf(buff,"%s TEX_XFORM_ENA_2:%x", buff, reg->bitfields.TEX_XFORM_ENA_2);
  sprintf(buff,"%s TEX_XFORM_ENA_3:%x", buff, reg->bitfields.TEX_XFORM_ENA_3);
  sprintf(buff,"%s TEX_XFORM_ENA_4:%x", buff, reg->bitfields.TEX_XFORM_ENA_4);
  sprintf(buff,"%s TEX_XFORM_ENA_5:%x", buff, reg->bitfields.TEX_XFORM_ENA_5);
  sprintf(buff,"%s TCG_FORCE_W_TO_ONE:%x", buff, reg->bitfields.TCG_FORCE_W_TO_ONE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_TEX_PROC_CNTL_1 regSE_TCL_TEX_PROC_CNTL_1;

__inline void dump_SE_TCL_TEX_PROC_CNTL_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_TEX_PROC_CNTL_1 *reg = (regSE_TCL_TEX_PROC_CNTL_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_CS_PROC_SRC_0:%x", buff, reg->bitfields.TEX_CS_PROC_SRC_0);
  sprintf(buff,"%s TEX_CS_PROC_SRC_1:%x", buff, reg->bitfields.TEX_CS_PROC_SRC_1);
  sprintf(buff,"%s TEX_CS_PROC_SRC_2:%x", buff, reg->bitfields.TEX_CS_PROC_SRC_2);
  sprintf(buff,"%s TEX_CS_PROC_SRC_3:%x", buff, reg->bitfields.TEX_CS_PROC_SRC_3);
  sprintf(buff,"%s TEX_CS_PROC_SRC_4:%x", buff, reg->bitfields.TEX_CS_PROC_SRC_4);
  sprintf(buff,"%s TEX_CS_PROC_SRC_5:%x", buff, reg->bitfields.TEX_CS_PROC_SRC_5);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_TEX_CYL_WRAP_CNTL regSE_TCL_TEX_CYL_WRAP_CNTL;

__inline void dump_SE_TCL_TEX_CYL_WRAP_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_TEX_CYL_WRAP_CNTL *reg = (regSE_TCL_TEX_CYL_WRAP_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_CYL_WRAP_0:%x", buff, reg->bitfields.TEX_CYL_WRAP_0);
  sprintf(buff,"%s TEX_CYL_WRAP_1:%x", buff, reg->bitfields.TEX_CYL_WRAP_1);
  sprintf(buff,"%s TEX_CYL_WRAP_2:%x", buff, reg->bitfields.TEX_CYL_WRAP_2);
  sprintf(buff,"%s TEX_CYL_WRAP_3:%x", buff, reg->bitfields.TEX_CYL_WRAP_3);
  sprintf(buff,"%s TEX_CYL_WRAP_4:%x", buff, reg->bitfields.TEX_CYL_WRAP_4);
  sprintf(buff,"%s TEX_CYL_WRAP_5:%x", buff, reg->bitfields.TEX_CYL_WRAP_5);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_UCP_VTX_BLEND_CNTL regSE_TCL_UCP_VTX_BLEND_CNTL;

__inline void dump_SE_TCL_UCP_VTX_BLEND_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_UCP_VTX_BLEND_CNTL *reg = (regSE_TCL_UCP_VTX_BLEND_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s UCP_IN_CLIP_SPACE:%x", buff, reg->bitfields.UCP_IN_CLIP_SPACE);
  sprintf(buff,"%s UCP_IN_MODEL_SPACE:%x", buff, reg->bitfields.UCP_IN_MODEL_SPACE);
  sprintf(buff,"%s UCP_ENA_0:%x", buff, reg->bitfields.UCP_ENA_0);
  sprintf(buff,"%s UCP_ENA_1:%x", buff, reg->bitfields.UCP_ENA_1);
  sprintf(buff,"%s UCP_ENA_2:%x", buff, reg->bitfields.UCP_ENA_2);
  sprintf(buff,"%s UCP_ENA_3:%x", buff, reg->bitfields.UCP_ENA_3);
  sprintf(buff,"%s UCP_ENA_4:%x", buff, reg->bitfields.UCP_ENA_4);
  sprintf(buff,"%s UCP_ENA_5:%x", buff, reg->bitfields.UCP_ENA_5);
  sprintf(buff,"%s FOG_MODE:%x", buff, reg->bitfields.FOG_MODE);
  sprintf(buff,"%s RNG_BASED_FOG:%x", buff, reg->bitfields.RNG_BASED_FOG);
  sprintf(buff,"%s CLIP_DISABLE:%x", buff, reg->bitfields.CLIP_DISABLE);
  sprintf(buff,"%s BLEND_OP_CNT:%x", buff, reg->bitfields.BLEND_OP_CNT);
  sprintf(buff,"%s USE_ST_BLEND_OP_CNT:%x", buff, reg->bitfields.USE_ST_BLEND_OP_CNT);
  sprintf(buff,"%s POSITION_BLEND_OPERATION:%x", buff, reg->bitfields.POSITION_BLEND_OPERATION);
  sprintf(buff,"%s NORMAL_BLEND_OPERATION:%x", buff, reg->bitfields.NORMAL_BLEND_OPERATION);
  sprintf(buff,"%s VTX_BLEND_SRC_0:%x", buff, reg->bitfields.VTX_BLEND_SRC_0);
  sprintf(buff,"%s VTX_BLEND_SRC_1:%x", buff, reg->bitfields.VTX_BLEND_SRC_1);
  sprintf(buff,"%s VTX_BLEND_SRC_2:%x", buff, reg->bitfields.VTX_BLEND_SRC_2);
  sprintf(buff,"%s VTX_BLEND_SRC_3:%x", buff, reg->bitfields.VTX_BLEND_SRC_3);
  sprintf(buff,"%s BLEND_WEIGHT_MINUS_ONE:%x", buff, reg->bitfields.BLEND_WEIGHT_MINUS_ONE);
  sprintf(buff,"%s VTX_BLEND_USE_PROJ_MTX:%x", buff, reg->bitfields.VTX_BLEND_USE_PROJ_MTX);
  sprintf(buff,"%s VTX_BLEND_2_OPTIMIZE:%x", buff, reg->bitfields.VTX_BLEND_2_OPTIMIZE);
  sprintf(buff,"%s CULL_EQ_0_ENA:%x", buff, reg->bitfields.CULL_EQ_0_ENA);
  sprintf(buff,"%s CULL_METHOD:%x", buff, reg->bitfields.CULL_METHOD);
  sprintf(buff,"%s CULLING_FF_DIR:%x", buff, reg->bitfields.CULLING_FF_DIR);
  sprintf(buff,"%s CULL_FF_ENA:%x", buff, reg->bitfields.CULL_FF_ENA);
  sprintf(buff,"%s CULL_BF_ENA:%x", buff, reg->bitfields.CULL_BF_ENA);
  sprintf(buff,"%s UCP_CULL_ONLY_ENA:%x", buff, reg->bitfields.UCP_CULL_ONLY_ENA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_POINT_SPRITE_CNTL regSE_TCL_POINT_SPRITE_CNTL;

__inline void dump_SE_TCL_POINT_SPRITE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_POINT_SPRITE_CNTL *reg = (regSE_TCL_POINT_SPRITE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PS_MULT:%x", buff, reg->bitfields.PS_MULT);
  sprintf(buff,"%s PS_LIN_ATT_ZERO:%x", buff, reg->bitfields.PS_LIN_ATT_ZERO);
  sprintf(buff,"%s PS_USE_MODEL_EYE_VEC:%x", buff, reg->bitfields.PS_USE_MODEL_EYE_VEC);
  sprintf(buff,"%s PS_ATT_ALPHA:%x", buff, reg->bitfields.PS_ATT_ALPHA);
  sprintf(buff,"%s PS_UCP_MODE:%x", buff, reg->bitfields.PS_UCP_MODE);
  sprintf(buff,"%s PS_GEN_TEX_0:%x", buff, reg->bitfields.PS_GEN_TEX_0);
  sprintf(buff,"%s PS_GEN_TEX_1:%x", buff, reg->bitfields.PS_GEN_TEX_1);
  sprintf(buff,"%s PS_GEN_TEX_2:%x", buff, reg->bitfields.PS_GEN_TEX_2);
  sprintf(buff,"%s PS_GEN_TEX_3:%x", buff, reg->bitfields.PS_GEN_TEX_3);
  sprintf(buff,"%s PS_GEN_TEX_4:%x", buff, reg->bitfields.PS_GEN_TEX_4);
  sprintf(buff,"%s PS_GEN_TEX_5:%x", buff, reg->bitfields.PS_GEN_TEX_5);
  sprintf(buff,"%s PS_SE_SEL_STATE_SIZE:%x", buff, reg->bitfields.PS_SE_SEL_STATE_SIZE);
  sprintf(buff,"%s PS_DIS_VV_EARLY_EXIT:%x", buff, reg->bitfields.PS_DIS_VV_EARLY_EXIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PVS_CNTL regSE_PVS_CNTL;

__inline void dump_SE_PVS_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PVS_CNTL *reg = (regSE_PVS_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PVS_FIRST_INST:%x", buff, reg->bitfields.PVS_FIRST_INST);
  sprintf(buff,"%s PVS_XYZW_VALID_INST:%x", buff, reg->bitfields.PVS_XYZW_VALID_INST);
  sprintf(buff,"%s PVS_LAST_INST:%x", buff, reg->bitfields.PVS_LAST_INST);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_PVS_CONST_CNTL regSE_PVS_CONST_CNTL;

__inline void dump_SE_PVS_CONST_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_PVS_CONST_CNTL *reg = (regSE_PVS_CONST_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PVS_CONST_BASE_OFFSET:%x", buff, reg->bitfields.PVS_CONST_BASE_OFFSET);
  sprintf(buff,"%s PVS_MAX_CONST_ADDR:%x", buff, reg->bitfields.PVS_MAX_CONST_ADDR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_0_X_4 regSE_VTX_ST_POS_0_X_4;

__inline void dump_SE_VTX_ST_POS_0_X_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_0_X_4 *reg = (regSE_VTX_ST_POS_0_X_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_0_Y_4 regSE_VTX_ST_POS_0_Y_4;

__inline void dump_SE_VTX_ST_POS_0_Y_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_0_Y_4 *reg = (regSE_VTX_ST_POS_0_Y_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_0_Z_4 regSE_VTX_ST_POS_0_Z_4;

__inline void dump_SE_VTX_ST_POS_0_Z_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_0_Z_4 *reg = (regSE_VTX_ST_POS_0_Z_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_0_W_4 regSE_VTX_ST_POS_0_W_4;

__inline void dump_SE_VTX_ST_POS_0_W_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_0_W_4 *reg = (regSE_VTX_ST_POS_0_W_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_NORM_0_X regSE_VTX_ST_NORM_0_X;

__inline void dump_SE_VTX_ST_NORM_0_X(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_NORM_0_X *reg = (regSE_VTX_ST_NORM_0_X *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_NORM_0_Y regSE_VTX_ST_NORM_0_Y;

__inline void dump_SE_VTX_ST_NORM_0_Y(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_NORM_0_Y *reg = (regSE_VTX_ST_NORM_0_Y *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_NORM_0_Z regSE_VTX_ST_NORM_0_Z;

__inline void dump_SE_VTX_ST_NORM_0_Z(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_NORM_0_Z *reg = (regSE_VTX_ST_NORM_0_Z *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_PVMS regSE_VTX_ST_PVMS;

__inline void dump_SE_VTX_ST_PVMS(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_PVMS *reg = (regSE_VTX_ST_PVMS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_0_R regSE_VTX_ST_CLR_0_R;

__inline void dump_SE_VTX_ST_CLR_0_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_0_R *reg = (regSE_VTX_ST_CLR_0_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_0_G regSE_VTX_ST_CLR_0_G;

__inline void dump_SE_VTX_ST_CLR_0_G(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_0_G *reg = (regSE_VTX_ST_CLR_0_G *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_0_B regSE_VTX_ST_CLR_0_B;

__inline void dump_SE_VTX_ST_CLR_0_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_0_B *reg = (regSE_VTX_ST_CLR_0_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_0_A regSE_VTX_ST_CLR_0_A;

__inline void dump_SE_VTX_ST_CLR_0_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_0_A *reg = (regSE_VTX_ST_CLR_0_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_1_R regSE_VTX_ST_CLR_1_R;

__inline void dump_SE_VTX_ST_CLR_1_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_1_R *reg = (regSE_VTX_ST_CLR_1_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_1_G regSE_VTX_ST_CLR_1_G;

__inline void dump_SE_VTX_ST_CLR_1_G(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_1_G *reg = (regSE_VTX_ST_CLR_1_G *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_1_B regSE_VTX_ST_CLR_1_B;

__inline void dump_SE_VTX_ST_CLR_1_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_1_B *reg = (regSE_VTX_ST_CLR_1_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_1_A regSE_VTX_ST_CLR_1_A;

__inline void dump_SE_VTX_ST_CLR_1_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_1_A *reg = (regSE_VTX_ST_CLR_1_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_2_R regSE_VTX_ST_CLR_2_R;

__inline void dump_SE_VTX_ST_CLR_2_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_2_R *reg = (regSE_VTX_ST_CLR_2_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_2_G regSE_VTX_ST_CLR_2_G;

__inline void dump_SE_VTX_ST_CLR_2_G(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_2_G *reg = (regSE_VTX_ST_CLR_2_G *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_2_B regSE_VTX_ST_CLR_2_B;

__inline void dump_SE_VTX_ST_CLR_2_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_2_B *reg = (regSE_VTX_ST_CLR_2_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_2_A regSE_VTX_ST_CLR_2_A;

__inline void dump_SE_VTX_ST_CLR_2_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_2_A *reg = (regSE_VTX_ST_CLR_2_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_3_R regSE_VTX_ST_CLR_3_R;

__inline void dump_SE_VTX_ST_CLR_3_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_3_R *reg = (regSE_VTX_ST_CLR_3_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_3_G regSE_VTX_ST_CLR_3_G;

__inline void dump_SE_VTX_ST_CLR_3_G(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_3_G *reg = (regSE_VTX_ST_CLR_3_G *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_3_B regSE_VTX_ST_CLR_3_B;

__inline void dump_SE_VTX_ST_CLR_3_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_3_B *reg = (regSE_VTX_ST_CLR_3_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_3_A regSE_VTX_ST_CLR_3_A;

__inline void dump_SE_VTX_ST_CLR_3_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_3_A *reg = (regSE_VTX_ST_CLR_3_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_4_R regSE_VTX_ST_CLR_4_R;

__inline void dump_SE_VTX_ST_CLR_4_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_4_R *reg = (regSE_VTX_ST_CLR_4_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_4_G regSE_VTX_ST_CLR_4_G;

__inline void dump_SE_VTX_ST_CLR_4_G(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_4_G *reg = (regSE_VTX_ST_CLR_4_G *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_4_B regSE_VTX_ST_CLR_4_B;

__inline void dump_SE_VTX_ST_CLR_4_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_4_B *reg = (regSE_VTX_ST_CLR_4_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_4_A regSE_VTX_ST_CLR_4_A;

__inline void dump_SE_VTX_ST_CLR_4_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_4_A *reg = (regSE_VTX_ST_CLR_4_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_5_R regSE_VTX_ST_CLR_5_R;

__inline void dump_SE_VTX_ST_CLR_5_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_5_R *reg = (regSE_VTX_ST_CLR_5_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_5_G regSE_VTX_ST_CLR_5_G;

__inline void dump_SE_VTX_ST_CLR_5_G(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_5_G *reg = (regSE_VTX_ST_CLR_5_G *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_5_B regSE_VTX_ST_CLR_5_B;

__inline void dump_SE_VTX_ST_CLR_5_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_5_B *reg = (regSE_VTX_ST_CLR_5_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_5_A regSE_VTX_ST_CLR_5_A;

__inline void dump_SE_VTX_ST_CLR_5_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_5_A *reg = (regSE_VTX_ST_CLR_5_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_6_R regSE_VTX_ST_CLR_6_R;

__inline void dump_SE_VTX_ST_CLR_6_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_6_R *reg = (regSE_VTX_ST_CLR_6_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_6_G regSE_VTX_ST_CLR_6_G;

__inline void dump_SE_VTX_ST_CLR_6_G(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_6_G *reg = (regSE_VTX_ST_CLR_6_G *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_6_B regSE_VTX_ST_CLR_6_B;

__inline void dump_SE_VTX_ST_CLR_6_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_6_B *reg = (regSE_VTX_ST_CLR_6_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_6_A regSE_VTX_ST_CLR_6_A;

__inline void dump_SE_VTX_ST_CLR_6_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_6_A *reg = (regSE_VTX_ST_CLR_6_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_7_R regSE_VTX_ST_CLR_7_R;

__inline void dump_SE_VTX_ST_CLR_7_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_7_R *reg = (regSE_VTX_ST_CLR_7_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_7_G regSE_VTX_ST_CLR_7_G;

__inline void dump_SE_VTX_ST_CLR_7_G(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_7_G *reg = (regSE_VTX_ST_CLR_7_G *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_7_B regSE_VTX_ST_CLR_7_B;

__inline void dump_SE_VTX_ST_CLR_7_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_7_B *reg = (regSE_VTX_ST_CLR_7_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_7_A regSE_VTX_ST_CLR_7_A;

__inline void dump_SE_VTX_ST_CLR_7_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_7_A *reg = (regSE_VTX_ST_CLR_7_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_0_S regSE_VTX_ST_TEX_0_S;

__inline void dump_SE_VTX_ST_TEX_0_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_0_S *reg = (regSE_VTX_ST_TEX_0_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_0_T regSE_VTX_ST_TEX_0_T;

__inline void dump_SE_VTX_ST_TEX_0_T(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_0_T *reg = (regSE_VTX_ST_TEX_0_T *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_0_R regSE_VTX_ST_TEX_0_R;

__inline void dump_SE_VTX_ST_TEX_0_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_0_R *reg = (regSE_VTX_ST_TEX_0_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_0_Q regSE_VTX_ST_TEX_0_Q;

__inline void dump_SE_VTX_ST_TEX_0_Q(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_0_Q *reg = (regSE_VTX_ST_TEX_0_Q *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_1_S regSE_VTX_ST_TEX_1_S;

__inline void dump_SE_VTX_ST_TEX_1_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_1_S *reg = (regSE_VTX_ST_TEX_1_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_1_T regSE_VTX_ST_TEX_1_T;

__inline void dump_SE_VTX_ST_TEX_1_T(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_1_T *reg = (regSE_VTX_ST_TEX_1_T *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_1_R regSE_VTX_ST_TEX_1_R;

__inline void dump_SE_VTX_ST_TEX_1_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_1_R *reg = (regSE_VTX_ST_TEX_1_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_1_Q regSE_VTX_ST_TEX_1_Q;

__inline void dump_SE_VTX_ST_TEX_1_Q(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_1_Q *reg = (regSE_VTX_ST_TEX_1_Q *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_2_S regSE_VTX_ST_TEX_2_S;

__inline void dump_SE_VTX_ST_TEX_2_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_2_S *reg = (regSE_VTX_ST_TEX_2_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_2_T regSE_VTX_ST_TEX_2_T;

__inline void dump_SE_VTX_ST_TEX_2_T(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_2_T *reg = (regSE_VTX_ST_TEX_2_T *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_2_R regSE_VTX_ST_TEX_2_R;

__inline void dump_SE_VTX_ST_TEX_2_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_2_R *reg = (regSE_VTX_ST_TEX_2_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_2_Q regSE_VTX_ST_TEX_2_Q;

__inline void dump_SE_VTX_ST_TEX_2_Q(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_2_Q *reg = (regSE_VTX_ST_TEX_2_Q *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_3_S regSE_VTX_ST_TEX_3_S;

__inline void dump_SE_VTX_ST_TEX_3_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_3_S *reg = (regSE_VTX_ST_TEX_3_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_3_T regSE_VTX_ST_TEX_3_T;

__inline void dump_SE_VTX_ST_TEX_3_T(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_3_T *reg = (regSE_VTX_ST_TEX_3_T *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_3_R regSE_VTX_ST_TEX_3_R;

__inline void dump_SE_VTX_ST_TEX_3_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_3_R *reg = (regSE_VTX_ST_TEX_3_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_3_Q regSE_VTX_ST_TEX_3_Q;

__inline void dump_SE_VTX_ST_TEX_3_Q(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_3_Q *reg = (regSE_VTX_ST_TEX_3_Q *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_4_S regSE_VTX_ST_TEX_4_S;

__inline void dump_SE_VTX_ST_TEX_4_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_4_S *reg = (regSE_VTX_ST_TEX_4_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_4_T regSE_VTX_ST_TEX_4_T;

__inline void dump_SE_VTX_ST_TEX_4_T(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_4_T *reg = (regSE_VTX_ST_TEX_4_T *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_4_R regSE_VTX_ST_TEX_4_R;

__inline void dump_SE_VTX_ST_TEX_4_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_4_R *reg = (regSE_VTX_ST_TEX_4_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_4_Q regSE_VTX_ST_TEX_4_Q;

__inline void dump_SE_VTX_ST_TEX_4_Q(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_4_Q *reg = (regSE_VTX_ST_TEX_4_Q *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_5_S regSE_VTX_ST_TEX_5_S;

__inline void dump_SE_VTX_ST_TEX_5_S(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_5_S *reg = (regSE_VTX_ST_TEX_5_S *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_5_T regSE_VTX_ST_TEX_5_T;

__inline void dump_SE_VTX_ST_TEX_5_T(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_5_T *reg = (regSE_VTX_ST_TEX_5_T *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_5_R regSE_VTX_ST_TEX_5_R;

__inline void dump_SE_VTX_ST_TEX_5_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_5_R *reg = (regSE_VTX_ST_TEX_5_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_TEX_5_Q regSE_VTX_ST_TEX_5_Q;

__inline void dump_SE_VTX_ST_TEX_5_Q(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_TEX_5_Q *reg = (regSE_VTX_ST_TEX_5_Q *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_PNT_SPRT_SZ regSE_VTX_ST_PNT_SPRT_SZ;

__inline void dump_SE_VTX_ST_PNT_SPRT_SZ(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_PNT_SPRT_SZ *reg = (regSE_VTX_ST_PNT_SPRT_SZ *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_DISC_FOG regSE_VTX_ST_DISC_FOG;

__inline void dump_SE_VTX_ST_DISC_FOG(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_DISC_FOG *reg = (regSE_VTX_ST_DISC_FOG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_SHININESS_0 regSE_VTX_ST_SHININESS_0;

__inline void dump_SE_VTX_ST_SHININESS_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_SHININESS_0 *reg = (regSE_VTX_ST_SHININESS_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_SHININESS_1 regSE_VTX_ST_SHININESS_1;

__inline void dump_SE_VTX_ST_SHININESS_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_SHININESS_1 *reg = (regSE_VTX_ST_SHININESS_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_BLND_WT_0 regSE_VTX_ST_BLND_WT_0;

__inline void dump_SE_VTX_ST_BLND_WT_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_BLND_WT_0 *reg = (regSE_VTX_ST_BLND_WT_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_BLND_WT_1 regSE_VTX_ST_BLND_WT_1;

__inline void dump_SE_VTX_ST_BLND_WT_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_BLND_WT_1 *reg = (regSE_VTX_ST_BLND_WT_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_BLND_WT_2 regSE_VTX_ST_BLND_WT_2;

__inline void dump_SE_VTX_ST_BLND_WT_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_BLND_WT_2 *reg = (regSE_VTX_ST_BLND_WT_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_BLND_WT_3 regSE_VTX_ST_BLND_WT_3;

__inline void dump_SE_VTX_ST_BLND_WT_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_BLND_WT_3 *reg = (regSE_VTX_ST_BLND_WT_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_1_X regSE_VTX_ST_POS_1_X;

__inline void dump_SE_VTX_ST_POS_1_X(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_1_X *reg = (regSE_VTX_ST_POS_1_X *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_1_Y regSE_VTX_ST_POS_1_Y;

__inline void dump_SE_VTX_ST_POS_1_Y(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_1_Y *reg = (regSE_VTX_ST_POS_1_Y *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_1_Z regSE_VTX_ST_POS_1_Z;

__inline void dump_SE_VTX_ST_POS_1_Z(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_1_Z *reg = (regSE_VTX_ST_POS_1_Z *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_1_W regSE_VTX_ST_POS_1_W;

__inline void dump_SE_VTX_ST_POS_1_W(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_1_W *reg = (regSE_VTX_ST_POS_1_W *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_NORM_1_X regSE_VTX_ST_NORM_1_X;

__inline void dump_SE_VTX_ST_NORM_1_X(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_NORM_1_X *reg = (regSE_VTX_ST_NORM_1_X *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_NORM_1_Y regSE_VTX_ST_NORM_1_Y;

__inline void dump_SE_VTX_ST_NORM_1_Y(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_NORM_1_Y *reg = (regSE_VTX_ST_NORM_1_Y *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_NORM_1_Z regSE_VTX_ST_NORM_1_Z;

__inline void dump_SE_VTX_ST_NORM_1_Z(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_NORM_1_Z *reg = (regSE_VTX_ST_NORM_1_Z *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_SPARE_43C regSE_VTX_ST_SPARE_43C;

__inline void dump_SE_VTX_ST_SPARE_43C(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_SPARE_43C *reg = (regSE_VTX_ST_SPARE_43C *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_USR_CLR_0_R regSE_VTX_ST_USR_CLR_0_R;

__inline void dump_SE_VTX_ST_USR_CLR_0_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_USR_CLR_0_R *reg = (regSE_VTX_ST_USR_CLR_0_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_USR_CLR_0_G regSE_VTX_ST_USR_CLR_0_G;

__inline void dump_SE_VTX_ST_USR_CLR_0_G(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_USR_CLR_0_G *reg = (regSE_VTX_ST_USR_CLR_0_G *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_USR_CLR_0_B regSE_VTX_ST_USR_CLR_0_B;

__inline void dump_SE_VTX_ST_USR_CLR_0_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_USR_CLR_0_B *reg = (regSE_VTX_ST_USR_CLR_0_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_USR_CLR_0_A regSE_VTX_ST_USR_CLR_0_A;

__inline void dump_SE_VTX_ST_USR_CLR_0_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_USR_CLR_0_A *reg = (regSE_VTX_ST_USR_CLR_0_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_USR_CLR_1_R regSE_VTX_ST_USR_CLR_1_R;

__inline void dump_SE_VTX_ST_USR_CLR_1_R(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_USR_CLR_1_R *reg = (regSE_VTX_ST_USR_CLR_1_R *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_USR_CLR_1_G regSE_VTX_ST_USR_CLR_1_G;

__inline void dump_SE_VTX_ST_USR_CLR_1_G(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_USR_CLR_1_G *reg = (regSE_VTX_ST_USR_CLR_1_G *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_USR_CLR_1_B regSE_VTX_ST_USR_CLR_1_B;

__inline void dump_SE_VTX_ST_USR_CLR_1_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_USR_CLR_1_B *reg = (regSE_VTX_ST_USR_CLR_1_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_USR_CLR_1_A regSE_VTX_ST_USR_CLR_1_A;

__inline void dump_SE_VTX_ST_USR_CLR_1_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_USR_CLR_1_A *reg = (regSE_VTX_ST_USR_CLR_1_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_0_PKD regSE_VTX_ST_CLR_0_PKD;

__inline void dump_SE_VTX_ST_CLR_0_PKD(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_0_PKD *reg = (regSE_VTX_ST_CLR_0_PKD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_1_PKD regSE_VTX_ST_CLR_1_PKD;

__inline void dump_SE_VTX_ST_CLR_1_PKD(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_1_PKD *reg = (regSE_VTX_ST_CLR_1_PKD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_2_PKD regSE_VTX_ST_CLR_2_PKD;

__inline void dump_SE_VTX_ST_CLR_2_PKD(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_2_PKD *reg = (regSE_VTX_ST_CLR_2_PKD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_3_PKD regSE_VTX_ST_CLR_3_PKD;

__inline void dump_SE_VTX_ST_CLR_3_PKD(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_3_PKD *reg = (regSE_VTX_ST_CLR_3_PKD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_4_PKD regSE_VTX_ST_CLR_4_PKD;

__inline void dump_SE_VTX_ST_CLR_4_PKD(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_4_PKD *reg = (regSE_VTX_ST_CLR_4_PKD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_5_PKD regSE_VTX_ST_CLR_5_PKD;

__inline void dump_SE_VTX_ST_CLR_5_PKD(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_5_PKD *reg = (regSE_VTX_ST_CLR_5_PKD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_6_PKD regSE_VTX_ST_CLR_6_PKD;

__inline void dump_SE_VTX_ST_CLR_6_PKD(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_6_PKD *reg = (regSE_VTX_ST_CLR_6_PKD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_CLR_7_PKD regSE_VTX_ST_CLR_7_PKD;

__inline void dump_SE_VTX_ST_CLR_7_PKD(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_CLR_7_PKD *reg = (regSE_VTX_ST_CLR_7_PKD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_0_X_2 regSE_VTX_ST_POS_0_X_2;

__inline void dump_SE_VTX_ST_POS_0_X_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_0_X_2 *reg = (regSE_VTX_ST_POS_0_X_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_0_Y_2 regSE_VTX_ST_POS_0_Y_2;

__inline void dump_SE_VTX_ST_POS_0_Y_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_0_Y_2 *reg = (regSE_VTX_ST_POS_0_Y_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_PAR_CLR_LD regSE_VTX_ST_PAR_CLR_LD;

__inline void dump_SE_VTX_ST_PAR_CLR_LD(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_PAR_CLR_LD *reg = (regSE_VTX_ST_PAR_CLR_LD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_USR_CLR_PKD regSE_VTX_ST_USR_CLR_PKD;

__inline void dump_SE_VTX_ST_USR_CLR_PKD(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_USR_CLR_PKD *reg = (regSE_VTX_ST_USR_CLR_PKD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_0_X_3 regSE_VTX_ST_POS_0_X_3;

__inline void dump_SE_VTX_ST_POS_0_X_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_0_X_3 *reg = (regSE_VTX_ST_POS_0_X_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_0_Y_3 regSE_VTX_ST_POS_0_Y_3;

__inline void dump_SE_VTX_ST_POS_0_Y_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_0_Y_3 *reg = (regSE_VTX_ST_POS_0_Y_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_POS_0_Z_3 regSE_VTX_ST_POS_0_Z_3;

__inline void dump_SE_VTX_ST_POS_0_Z_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_POS_0_Z_3 *reg = (regSE_VTX_ST_POS_0_Z_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_ST_END_OF_PKT regSE_VTX_ST_END_OF_PKT;

__inline void dump_SE_VTX_ST_END_OF_PKT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_ST_END_OF_PKT *reg = (regSE_VTX_ST_END_OF_PKT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_SOLID_COLOR regRE_SOLID_COLOR;

__inline void dump_RE_SOLID_COLOR(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_SOLID_COLOR *reg = (regRE_SOLID_COLOR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_WIDTH_HEIGHT regRE_WIDTH_HEIGHT;

__inline void dump_RE_WIDTH_HEIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_WIDTH_HEIGHT *reg = (regRE_WIDTH_HEIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s WIDTH:%x", buff, reg->bitfields.WIDTH);
  sprintf(buff,"%s HEIGHT:%x", buff, reg->bitfields.HEIGHT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_POINTSIZE regRE_POINTSIZE;

__inline void dump_RE_POINTSIZE(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_POINTSIZE *reg = (regRE_POINTSIZE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s POINTSIZE:%x", buff, reg->bitfields.POINTSIZE);
  sprintf(buff,"%s MAXPOINTSIZE:%x", buff, reg->bitfields.MAXPOINTSIZE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_CNTL regSE_CNTL;

__inline void dump_SE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_CNTL *reg = (regSE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FFACE_CULL_DIR:%x", buff, reg->bitfields.FFACE_CULL_DIR);
  sprintf(buff,"%s BFACE_CULL_FCN:%x", buff, reg->bitfields.BFACE_CULL_FCN);
  sprintf(buff,"%s FFACE_CULL_FCN:%x", buff, reg->bitfields.FFACE_CULL_FCN);
  sprintf(buff,"%s FLAT_SHADE_VTX:%x", buff, reg->bitfields.FLAT_SHADE_VTX);
  sprintf(buff,"%s DIFFUSE_SHADE_FCN:%x", buff, reg->bitfields.DIFFUSE_SHADE_FCN);
  sprintf(buff,"%s ALPHA_SHADE_FCN:%x", buff, reg->bitfields.ALPHA_SHADE_FCN);
  sprintf(buff,"%s SPECULAR_SHADE_FCN:%x", buff, reg->bitfields.SPECULAR_SHADE_FCN);
  sprintf(buff,"%s FOG_SHADE_FCN:%x", buff, reg->bitfields.FOG_SHADE_FCN);
  sprintf(buff,"%s ZBIAS_EN_POINT:%x", buff, reg->bitfields.ZBIAS_EN_POINT);
  sprintf(buff,"%s ZBIAS_EN_LINE:%x", buff, reg->bitfields.ZBIAS_EN_LINE);
  sprintf(buff,"%s ZBIAS_EN_TRI:%x", buff, reg->bitfields.ZBIAS_EN_TRI);
  sprintf(buff,"%s WIDELINE_EN:%x", buff, reg->bitfields.WIDELINE_EN);
  sprintf(buff,"%s DISCRETE_FOG_SHADE_FCN:%x", buff, reg->bitfields.DISCRETE_FOG_SHADE_FCN);
  sprintf(buff,"%s VTX_PIXCENTER:%x", buff, reg->bitfields.VTX_PIXCENTER);
  sprintf(buff,"%s ROUND_MODE:%x", buff, reg->bitfields.ROUND_MODE);
  sprintf(buff,"%s ROUND_PRECISION:%x", buff, reg->bitfields.ROUND_PRECISION);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_CNTL regRE_CNTL;

__inline void dump_RE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_CNTL *reg = (regRE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s STIPPLE_ENABLE:%x", buff, reg->bitfields.STIPPLE_ENABLE);
  sprintf(buff,"%s SCISSOR_ENABLE:%x", buff, reg->bitfields.SCISSOR_ENABLE);
  sprintf(buff,"%s PATTERN_ENABLE:%x", buff, reg->bitfields.PATTERN_ENABLE);
  sprintf(buff,"%s PERSPECTIVE_ENABLE:%x", buff, reg->bitfields.PERSPECTIVE_ENABLE);
  sprintf(buff,"%s JITTER_ENABLE:%x", buff, reg->bitfields.JITTER_ENABLE);
  sprintf(buff,"%s POINT_SMOOTH:%x", buff, reg->bitfields.POINT_SMOOTH);
  sprintf(buff,"%s VTX_SAVE_T0_N3:%x", buff, reg->bitfields.VTX_SAVE_T0_N3);
  sprintf(buff,"%s VTX_SAVE_T1_N3:%x", buff, reg->bitfields.VTX_SAVE_T1_N3);
  sprintf(buff,"%s VTX_SAVE_T2_N3:%x", buff, reg->bitfields.VTX_SAVE_T2_N3);
  sprintf(buff,"%s VTX_SAVE_T3_N3:%x", buff, reg->bitfields.VTX_SAVE_T3_N3);
  sprintf(buff,"%s VTX_SAVE_T4_N3:%x", buff, reg->bitfields.VTX_SAVE_T4_N3);
  sprintf(buff,"%s VTX_STQ0_ROUTE:%x", buff, reg->bitfields.VTX_STQ0_ROUTE);
  sprintf(buff,"%s VTX_STQ1_ROUTE:%x", buff, reg->bitfields.VTX_STQ1_ROUTE);
  sprintf(buff,"%s VTX_STQ2_ROUTE:%x", buff, reg->bitfields.VTX_STQ2_ROUTE);
  sprintf(buff,"%s VTX_STQ3_ROUTE:%x", buff, reg->bitfields.VTX_STQ3_ROUTE);
  sprintf(buff,"%s VTX_STQ4_ROUTE:%x", buff, reg->bitfields.VTX_STQ4_ROUTE);
  sprintf(buff,"%s VTX_STQ5_ROUTE:%x", buff, reg->bitfields.VTX_STQ5_ROUTE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_PERF_CNTL regRE_PERF_CNTL;

__inline void dump_RE_PERF_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_PERF_CNTL *reg = (regRE_PERF_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CULL_PRESETUP:%x", buff, reg->bitfields.CULL_PRESETUP);
  sprintf(buff,"%s CULL_POSTSETUP:%x", buff, reg->bitfields.CULL_POSTSETUP);
  sprintf(buff,"%s BLOCK_DISABLE:%x", buff, reg->bitfields.BLOCK_DISABLE);
  sprintf(buff,"%s HZ_OVERRIDE:%x", buff, reg->bitfields.HZ_OVERRIDE);
  sprintf(buff,"%s PERFSEL0:%x", buff, reg->bitfields.PERFSEL0);
  sprintf(buff,"%s CLR_PERF0:%x", buff, reg->bitfields.CLR_PERF0);
  sprintf(buff,"%s EN_PERF0:%x", buff, reg->bitfields.EN_PERF0);
  sprintf(buff,"%s PERFSEL1:%x", buff, reg->bitfields.PERFSEL1);
  sprintf(buff,"%s CLR_PERF1:%x", buff, reg->bitfields.CLR_PERF1);
  sprintf(buff,"%s EN_PERF1:%x", buff, reg->bitfields.EN_PERF1);
  sprintf(buff,"%s PERFSEL2:%x", buff, reg->bitfields.PERFSEL2);
  sprintf(buff,"%s CLR_PERF2:%x", buff, reg->bitfields.CLR_PERF2);
  sprintf(buff,"%s EN_PERF2:%x", buff, reg->bitfields.EN_PERF2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_PERF_COUNT_0 regRE_PERF_COUNT_0;

__inline void dump_RE_PERF_COUNT_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_PERF_COUNT_0 *reg = (regRE_PERF_COUNT_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_PERF_COUNT_1 regRE_PERF_COUNT_1;

__inline void dump_RE_PERF_COUNT_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_PERF_COUNT_1 *reg = (regRE_PERF_COUNT_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_PERF_COUNT_2 regRE_PERF_COUNT_2;

__inline void dump_RE_PERF_COUNT_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_PERF_COUNT_2 *reg = (regRE_PERF_COUNT_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_DEBUG0 regRE_DEBUG0;

__inline void dump_RE_DEBUG0(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_DEBUG0 *reg = (regRE_DEBUG0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_DEBUG1 regRE_DEBUG1;

__inline void dump_RE_DEBUG1(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_DEBUG1 *reg = (regRE_DEBUG1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_DEBUG2 regRE_DEBUG2;

__inline void dump_RE_DEBUG2(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_DEBUG2 *reg = (regRE_DEBUG2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_DEBUG3 regRE_DEBUG3;

__inline void dump_RE_DEBUG3(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_DEBUG3 *reg = (regRE_DEBUG3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_DEBUG4 regRE_DEBUG4;

__inline void dump_RE_DEBUG4(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_DEBUG4 *reg = (regRE_DEBUG4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_DEBUG5 regRE_DEBUG5;

__inline void dump_RE_DEBUG5(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_DEBUG5 *reg = (regRE_DEBUG5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_DEBUG6 regRE_DEBUG6;

__inline void dump_RE_DEBUG6(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_DEBUG6 *reg = (regRE_DEBUG6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_DEBUG7 regRE_DEBUG7;

__inline void dump_RE_DEBUG7(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_DEBUG7 *reg = (regRE_DEBUG7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HIZ_RAM_RM:%x", buff, reg->bitfields.HIZ_RAM_RM);
  sprintf(buff,"%s ONE_PRIM_PER_PASS:%x", buff, reg->bitfields.ONE_PRIM_PER_PASS);
  sprintf(buff,"%s RE_DBG_DATA:%x", buff, reg->bitfields.RE_DBG_DATA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_TOP_LEFT regRE_TOP_LEFT;

__inline void dump_RE_TOP_LEFT(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_TOP_LEFT *reg = (regRE_TOP_LEFT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s X_LEFT:%x", buff, reg->bitfields.X_LEFT);
  sprintf(buff,"%s Y_TOP:%x", buff, reg->bitfields.Y_TOP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_MISC regRE_MISC;

__inline void dump_RE_MISC(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_MISC *reg = (regRE_MISC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s STIPPLE_X_OFFSET:%x", buff, reg->bitfields.STIPPLE_X_OFFSET);
  sprintf(buff,"%s STIPPLE_Y_OFFSET:%x", buff, reg->bitfields.STIPPLE_Y_OFFSET);
  sprintf(buff,"%s STIPPLE_BIT_ORDER:%x", buff, reg->bitfields.STIPPLE_BIT_ORDER);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_STIPPLE_ADDR regRE_STIPPLE_ADDR;

__inline void dump_RE_STIPPLE_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_STIPPLE_ADDR *reg = (regRE_STIPPLE_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_STIPPLE_DATA regRE_STIPPLE_DATA;

__inline void dump_RE_STIPPLE_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_STIPPLE_DATA *reg = (regRE_STIPPLE_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_LINE_PATTERN regRE_LINE_PATTERN;

__inline void dump_RE_LINE_PATTERN(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_LINE_PATTERN *reg = (regRE_LINE_PATTERN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LINE_PATTERN:%x", buff, reg->bitfields.LINE_PATTERN);
  sprintf(buff,"%s REPEAT_COUNT:%x", buff, reg->bitfields.REPEAT_COUNT);
  sprintf(buff,"%s PATTERN_START:%x", buff, reg->bitfields.PATTERN_START);
  sprintf(buff,"%s PATTERN_BIT_ORDER:%x", buff, reg->bitfields.PATTERN_BIT_ORDER);
  sprintf(buff,"%s AUTO_RESET_ENABLE:%x", buff, reg->bitfields.AUTO_RESET_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_LINE_STATE regRE_LINE_STATE;

__inline void dump_RE_LINE_STATE(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_LINE_STATE *reg = (regRE_LINE_STATE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CURRENT_PTR:%x", buff, reg->bitfields.CURRENT_PTR);
  sprintf(buff,"%s CURRENT_COUNT:%x", buff, reg->bitfields.CURRENT_COUNT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_SCISSOR_TL_0 regRE_SCISSOR_TL_0;

__inline void dump_RE_SCISSOR_TL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_SCISSOR_TL_0 *reg = (regRE_SCISSOR_TL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s X_LEFT:%x", buff, reg->bitfields.X_LEFT);
  sprintf(buff,"%s Y_TOP:%x", buff, reg->bitfields.Y_TOP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_SCISSOR_BR_0 regRE_SCISSOR_BR_0;

__inline void dump_RE_SCISSOR_BR_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_SCISSOR_BR_0 *reg = (regRE_SCISSOR_BR_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s X_RIGHT:%x", buff, reg->bitfields.X_RIGHT);
  sprintf(buff,"%s Y_BOTTOM:%x", buff, reg->bitfields.Y_BOTTOM);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_SCISSOR_TL_1 regRE_SCISSOR_TL_1;

__inline void dump_RE_SCISSOR_TL_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_SCISSOR_TL_1 *reg = (regRE_SCISSOR_TL_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s X_LEFT:%x", buff, reg->bitfields.X_LEFT);
  sprintf(buff,"%s Y_TOP:%x", buff, reg->bitfields.Y_TOP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_SCISSOR_BR_1 regRE_SCISSOR_BR_1;

__inline void dump_RE_SCISSOR_BR_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_SCISSOR_BR_1 *reg = (regRE_SCISSOR_BR_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s X_RIGHT:%x", buff, reg->bitfields.X_RIGHT);
  sprintf(buff,"%s Y_BOTTOM:%x", buff, reg->bitfields.Y_BOTTOM);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_SCISSOR_TL_2 regRE_SCISSOR_TL_2;

__inline void dump_RE_SCISSOR_TL_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_SCISSOR_TL_2 *reg = (regRE_SCISSOR_TL_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s X_LEFT:%x", buff, reg->bitfields.X_LEFT);
  sprintf(buff,"%s Y_TOP:%x", buff, reg->bitfields.Y_TOP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_SCISSOR_BR_2 regRE_SCISSOR_BR_2;

__inline void dump_RE_SCISSOR_BR_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_SCISSOR_BR_2 *reg = (regRE_SCISSOR_BR_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s X_RIGHT:%x", buff, reg->bitfields.X_RIGHT);
  sprintf(buff,"%s Y_BOTTOM:%x", buff, reg->bitfields.Y_BOTTOM);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_AUX_SCISSOR_CNTL regRE_AUX_SCISSOR_CNTL;

__inline void dump_RE_AUX_SCISSOR_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_AUX_SCISSOR_CNTL *reg = (regRE_AUX_SCISSOR_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s EXCLUSIVE_SCISSOR_0:%x", buff, reg->bitfields.EXCLUSIVE_SCISSOR_0);
  sprintf(buff,"%s EXCLUSIVE_SCISSOR_1:%x", buff, reg->bitfields.EXCLUSIVE_SCISSOR_1);
  sprintf(buff,"%s EXCLUSIVE_SCISSOR_2:%x", buff, reg->bitfields.EXCLUSIVE_SCISSOR_2);
  sprintf(buff,"%s SCISSOR_ENABLE_0:%x", buff, reg->bitfields.SCISSOR_ENABLE_0);
  sprintf(buff,"%s SCISSOR_ENABLE_1:%x", buff, reg->bitfields.SCISSOR_ENABLE_1);
  sprintf(buff,"%s SCISSOR_ENABLE_2:%x", buff, reg->bitfields.SCISSOR_ENABLE_2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_JITTER_TABLE0 regRE_JITTER_TABLE0;

__inline void dump_RE_JITTER_TABLE0(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_JITTER_TABLE0 *reg = (regRE_JITTER_TABLE0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SAMPLE_SEL_00:%x", buff, reg->bitfields.SAMPLE_SEL_00);
  sprintf(buff,"%s SAMPLE_SEL_10:%x", buff, reg->bitfields.SAMPLE_SEL_10);
  sprintf(buff,"%s SAMPLE_SEL_20:%x", buff, reg->bitfields.SAMPLE_SEL_20);
  sprintf(buff,"%s SAMPLE_SEL_30:%x", buff, reg->bitfields.SAMPLE_SEL_30);
  sprintf(buff,"%s SAMPLE_SEL_01:%x", buff, reg->bitfields.SAMPLE_SEL_01);
  sprintf(buff,"%s SAMPLE_SEL_11:%x", buff, reg->bitfields.SAMPLE_SEL_11);
  sprintf(buff,"%s SAMPLE_SEL_21:%x", buff, reg->bitfields.SAMPLE_SEL_21);
  sprintf(buff,"%s SAMPLE_SEL_31:%x", buff, reg->bitfields.SAMPLE_SEL_31);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_JITTER_TABLE1 regRE_JITTER_TABLE1;

__inline void dump_RE_JITTER_TABLE1(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_JITTER_TABLE1 *reg = (regRE_JITTER_TABLE1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SAMPLE_SEL_02:%x", buff, reg->bitfields.SAMPLE_SEL_02);
  sprintf(buff,"%s SAMPLE_SEL_12:%x", buff, reg->bitfields.SAMPLE_SEL_12);
  sprintf(buff,"%s SAMPLE_SEL_22:%x", buff, reg->bitfields.SAMPLE_SEL_22);
  sprintf(buff,"%s SAMPLE_SEL_32:%x", buff, reg->bitfields.SAMPLE_SEL_32);
  sprintf(buff,"%s SAMPLE_SEL_03:%x", buff, reg->bitfields.SAMPLE_SEL_03);
  sprintf(buff,"%s SAMPLE_SEL_13:%x", buff, reg->bitfields.SAMPLE_SEL_13);
  sprintf(buff,"%s SAMPLE_SEL_23:%x", buff, reg->bitfields.SAMPLE_SEL_23);
  sprintf(buff,"%s SAMPLE_SEL_33:%x", buff, reg->bitfields.SAMPLE_SEL_33);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_FOG_TABLE_INDEX regPP_FOG_TABLE_INDEX;

__inline void dump_PP_FOG_TABLE_INDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_FOG_TABLE_INDEX *reg = (regPP_FOG_TABLE_INDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_FOG_TABLE_DATA regPP_FOG_TABLE_DATA;

__inline void dump_PP_FOG_TABLE_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_FOG_TABLE_DATA *reg = (regPP_FOG_TABLE_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_ZBIAS_FACTOR regSE_ZBIAS_FACTOR;

__inline void dump_SE_ZBIAS_FACTOR(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_ZBIAS_FACTOR *reg = (regSE_ZBIAS_FACTOR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_ZBIAS_CONSTANT regSE_ZBIAS_CONSTANT;

__inline void dump_SE_ZBIAS_CONSTANT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_ZBIAS_CONSTANT *reg = (regSE_ZBIAS_CONSTANT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_LINE_WIDTH regSE_LINE_WIDTH;

__inline void dump_SE_LINE_WIDTH(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_LINE_WIDTH *reg = (regSE_LINE_WIDTH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LINE_WIDTH:%x", buff, reg->bitfields.LINE_WIDTH);
  sprintf(buff,"%s MINPOINTSIZE:%x", buff, reg->bitfields.MINPOINTSIZE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_W_BIAS regRE_W_BIAS;

__inline void dump_RE_W_BIAS(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_W_BIAS *reg = (regRE_W_BIAS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_MC_SRC2_CNTL regSE_MC_SRC2_CNTL;

__inline void dump_SE_MC_SRC2_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_MC_SRC2_CNTL *reg = (regSE_MC_SRC2_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MC_X2:%x", buff, reg->bitfields.MC_X2);
  sprintf(buff,"%s MC_Y2:%x", buff, reg->bitfields.MC_Y2);
  sprintf(buff,"%s MC_SEC_SRC_PITCH_MUL:%x", buff, reg->bitfields.MC_SEC_SRC_PITCH_MUL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_MC_SRC1_CNTL regSE_MC_SRC1_CNTL;

__inline void dump_SE_MC_SRC1_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_MC_SRC1_CNTL *reg = (regSE_MC_SRC1_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MC_X1:%x", buff, reg->bitfields.MC_X1);
  sprintf(buff,"%s MC_Y1:%x", buff, reg->bitfields.MC_Y1);
  sprintf(buff,"%s MC_IDCT_ENB:%x", buff, reg->bitfields.MC_IDCT_ENB);
  sprintf(buff,"%s MC_SEC_TEX_ENB:%x", buff, reg->bitfields.MC_SEC_TEX_ENB);
  sprintf(buff,"%s MC_SRC_PITCH_MUL:%x", buff, reg->bitfields.MC_SRC_PITCH_MUL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_MC_DST_CNTL regSE_MC_DST_CNTL;

__inline void dump_SE_MC_DST_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_MC_DST_CNTL *reg = (regSE_MC_DST_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MC_DST_Y:%x", buff, reg->bitfields.MC_DST_Y);
  sprintf(buff,"%s MC_DST_X:%x", buff, reg->bitfields.MC_DST_X);
  sprintf(buff,"%s MC_DST_PITCH_MUL:%x", buff, reg->bitfields.MC_DST_PITCH_MUL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_MC_CNTL_START regSE_MC_CNTL_START;

__inline void dump_SE_MC_CNTL_START(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_MC_CNTL_START *reg = (regSE_MC_CNTL_START *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MC_CNTL_SRC_1_INDEX:%x", buff, reg->bitfields.MC_CNTL_SRC_1_INDEX);
  sprintf(buff,"%s MC_CNTL_DST_OFFSET:%x", buff, reg->bitfields.MC_CNTL_DST_OFFSET);
  sprintf(buff,"%s MC_ALPHA_ENB:%x", buff, reg->bitfields.MC_ALPHA_ENB);
  sprintf(buff,"%s MC_CNTL_SRC_2_INDEX:%x", buff, reg->bitfields.MC_CNTL_SRC_2_INDEX);
  sprintf(buff,"%s MC_CNTL_WIDTH_HEIGHT_SEL:%x", buff, reg->bitfields.MC_CNTL_WIDTH_HEIGHT_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_MC_BUF_BASE regSE_MC_BUF_BASE;

__inline void dump_SE_MC_BUF_BASE(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_MC_BUF_BASE *reg = (regSE_MC_BUF_BASE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFILTER_0 regPP_TXFILTER_0;

__inline void dump_PP_TXFILTER_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFILTER_0 *reg = (regPP_TXFILTER_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MAG_FILTER:%x", buff, reg->bitfields.MAG_FILTER);
  sprintf(buff,"%s MIN_FILTER:%x", buff, reg->bitfields.MIN_FILTER);
  sprintf(buff,"%s MAX_ANIS:%x", buff, reg->bitfields.MAX_ANIS);
  sprintf(buff,"%s MAX_MIP_LEVEL:%x", buff, reg->bitfields.MAX_MIP_LEVEL);
  sprintf(buff,"%s YUV_TO_RGB:%x", buff, reg->bitfields.YUV_TO_RGB);
  sprintf(buff,"%s YUV_TEMPERATURE:%x", buff, reg->bitfields.YUV_TEMPERATURE);
  sprintf(buff,"%s WRAPEN_S:%x", buff, reg->bitfields.WRAPEN_S);
  sprintf(buff,"%s CLAMP_S:%x", buff, reg->bitfields.CLAMP_S);
  sprintf(buff,"%s WRAPEN_T:%x", buff, reg->bitfields.WRAPEN_T);
  sprintf(buff,"%s CLAMP_T:%x", buff, reg->bitfields.CLAMP_T);
  sprintf(buff,"%s KILL_LT_0:%x", buff, reg->bitfields.KILL_LT_0);
  sprintf(buff,"%s BORDER_MODE:%x", buff, reg->bitfields.BORDER_MODE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFILTER_1 regPP_TXFILTER_1;

__inline void dump_PP_TXFILTER_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFILTER_1 *reg = (regPP_TXFILTER_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MAG_FILTER:%x", buff, reg->bitfields.MAG_FILTER);
  sprintf(buff,"%s MIN_FILTER:%x", buff, reg->bitfields.MIN_FILTER);
  sprintf(buff,"%s MAX_ANIS:%x", buff, reg->bitfields.MAX_ANIS);
  sprintf(buff,"%s MAX_MIP_LEVEL:%x", buff, reg->bitfields.MAX_MIP_LEVEL);
  sprintf(buff,"%s YUV_TO_RGB:%x", buff, reg->bitfields.YUV_TO_RGB);
  sprintf(buff,"%s YUV_TEMPERATURE:%x", buff, reg->bitfields.YUV_TEMPERATURE);
  sprintf(buff,"%s WRAPEN_S:%x", buff, reg->bitfields.WRAPEN_S);
  sprintf(buff,"%s CLAMP_S:%x", buff, reg->bitfields.CLAMP_S);
  sprintf(buff,"%s WRAPEN_T:%x", buff, reg->bitfields.WRAPEN_T);
  sprintf(buff,"%s CLAMP_T:%x", buff, reg->bitfields.CLAMP_T);
  sprintf(buff,"%s KILL_LT_0:%x", buff, reg->bitfields.KILL_LT_0);
  sprintf(buff,"%s BORDER_MODE:%x", buff, reg->bitfields.BORDER_MODE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFILTER_2 regPP_TXFILTER_2;

__inline void dump_PP_TXFILTER_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFILTER_2 *reg = (regPP_TXFILTER_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MAG_FILTER:%x", buff, reg->bitfields.MAG_FILTER);
  sprintf(buff,"%s MIN_FILTER:%x", buff, reg->bitfields.MIN_FILTER);
  sprintf(buff,"%s MAX_ANIS:%x", buff, reg->bitfields.MAX_ANIS);
  sprintf(buff,"%s MAX_MIP_LEVEL:%x", buff, reg->bitfields.MAX_MIP_LEVEL);
  sprintf(buff,"%s YUV_TO_RGB:%x", buff, reg->bitfields.YUV_TO_RGB);
  sprintf(buff,"%s YUV_TEMPERATURE:%x", buff, reg->bitfields.YUV_TEMPERATURE);
  sprintf(buff,"%s WRAPEN_S:%x", buff, reg->bitfields.WRAPEN_S);
  sprintf(buff,"%s CLAMP_S:%x", buff, reg->bitfields.CLAMP_S);
  sprintf(buff,"%s WRAPEN_T:%x", buff, reg->bitfields.WRAPEN_T);
  sprintf(buff,"%s CLAMP_T:%x", buff, reg->bitfields.CLAMP_T);
  sprintf(buff,"%s KILL_LT_0:%x", buff, reg->bitfields.KILL_LT_0);
  sprintf(buff,"%s BORDER_MODE:%x", buff, reg->bitfields.BORDER_MODE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFILTER_3 regPP_TXFILTER_3;

__inline void dump_PP_TXFILTER_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFILTER_3 *reg = (regPP_TXFILTER_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MAG_FILTER:%x", buff, reg->bitfields.MAG_FILTER);
  sprintf(buff,"%s MIN_FILTER:%x", buff, reg->bitfields.MIN_FILTER);
  sprintf(buff,"%s MAX_ANIS:%x", buff, reg->bitfields.MAX_ANIS);
  sprintf(buff,"%s MAX_MIP_LEVEL:%x", buff, reg->bitfields.MAX_MIP_LEVEL);
  sprintf(buff,"%s YUV_TO_RGB:%x", buff, reg->bitfields.YUV_TO_RGB);
  sprintf(buff,"%s YUV_TEMPERATURE:%x", buff, reg->bitfields.YUV_TEMPERATURE);
  sprintf(buff,"%s WRAPEN_S:%x", buff, reg->bitfields.WRAPEN_S);
  sprintf(buff,"%s CLAMP_S:%x", buff, reg->bitfields.CLAMP_S);
  sprintf(buff,"%s WRAPEN_T:%x", buff, reg->bitfields.WRAPEN_T);
  sprintf(buff,"%s CLAMP_T:%x", buff, reg->bitfields.CLAMP_T);
  sprintf(buff,"%s KILL_LT_0:%x", buff, reg->bitfields.KILL_LT_0);
  sprintf(buff,"%s BORDER_MODE:%x", buff, reg->bitfields.BORDER_MODE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFILTER_4 regPP_TXFILTER_4;

__inline void dump_PP_TXFILTER_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFILTER_4 *reg = (regPP_TXFILTER_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MAG_FILTER:%x", buff, reg->bitfields.MAG_FILTER);
  sprintf(buff,"%s MIN_FILTER:%x", buff, reg->bitfields.MIN_FILTER);
  sprintf(buff,"%s MAX_ANIS:%x", buff, reg->bitfields.MAX_ANIS);
  sprintf(buff,"%s MAX_MIP_LEVEL:%x", buff, reg->bitfields.MAX_MIP_LEVEL);
  sprintf(buff,"%s YUV_TO_RGB:%x", buff, reg->bitfields.YUV_TO_RGB);
  sprintf(buff,"%s YUV_TEMPERATURE:%x", buff, reg->bitfields.YUV_TEMPERATURE);
  sprintf(buff,"%s WRAPEN_S:%x", buff, reg->bitfields.WRAPEN_S);
  sprintf(buff,"%s CLAMP_S:%x", buff, reg->bitfields.CLAMP_S);
  sprintf(buff,"%s WRAPEN_T:%x", buff, reg->bitfields.WRAPEN_T);
  sprintf(buff,"%s CLAMP_T:%x", buff, reg->bitfields.CLAMP_T);
  sprintf(buff,"%s KILL_LT_0:%x", buff, reg->bitfields.KILL_LT_0);
  sprintf(buff,"%s BORDER_MODE:%x", buff, reg->bitfields.BORDER_MODE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFILTER_5 regPP_TXFILTER_5;

__inline void dump_PP_TXFILTER_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFILTER_5 *reg = (regPP_TXFILTER_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MAG_FILTER:%x", buff, reg->bitfields.MAG_FILTER);
  sprintf(buff,"%s MIN_FILTER:%x", buff, reg->bitfields.MIN_FILTER);
  sprintf(buff,"%s MAX_ANIS:%x", buff, reg->bitfields.MAX_ANIS);
  sprintf(buff,"%s MAX_MIP_LEVEL:%x", buff, reg->bitfields.MAX_MIP_LEVEL);
  sprintf(buff,"%s YUV_TO_RGB:%x", buff, reg->bitfields.YUV_TO_RGB);
  sprintf(buff,"%s YUV_TEMPERATURE:%x", buff, reg->bitfields.YUV_TEMPERATURE);
  sprintf(buff,"%s WRAPEN_S:%x", buff, reg->bitfields.WRAPEN_S);
  sprintf(buff,"%s CLAMP_S:%x", buff, reg->bitfields.CLAMP_S);
  sprintf(buff,"%s WRAPEN_T:%x", buff, reg->bitfields.WRAPEN_T);
  sprintf(buff,"%s CLAMP_T:%x", buff, reg->bitfields.CLAMP_T);
  sprintf(buff,"%s KILL_LT_0:%x", buff, reg->bitfields.KILL_LT_0);
  sprintf(buff,"%s BORDER_MODE:%x", buff, reg->bitfields.BORDER_MODE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFORMAT_0 regPP_TXFORMAT_0;

__inline void dump_PP_TXFORMAT_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFORMAT_0 *reg = (regPP_TXFORMAT_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXFORMAT:%x", buff, reg->bitfields.TXFORMAT);
  sprintf(buff,"%s APPLE_YUV:%x", buff, reg->bitfields.APPLE_YUV);
  sprintf(buff,"%s ALPHA_ENABLE:%x", buff, reg->bitfields.ALPHA_ENABLE);
  sprintf(buff,"%s NON_POWER2:%x", buff, reg->bitfields.NON_POWER2);
  sprintf(buff,"%s TXWIDTH:%x", buff, reg->bitfields.TXWIDTH);
  sprintf(buff,"%s TXHEIGHT:%x", buff, reg->bitfields.TXHEIGHT);
  sprintf(buff,"%s FACE_WIDTH_5:%x", buff, reg->bitfields.FACE_WIDTH_5);
  sprintf(buff,"%s FACE_HEIGHT_5:%x", buff, reg->bitfields.FACE_HEIGHT_5);
  sprintf(buff,"%s ST_ROUTE_R2:%x", buff, reg->bitfields.ST_ROUTE_R2);
  sprintf(buff,"%s LOOKUP_DISABLE:%x", buff, reg->bitfields.LOOKUP_DISABLE);
  sprintf(buff,"%s ALPHA_MASK_ENABLE:%x", buff, reg->bitfields.ALPHA_MASK_ENABLE);
  sprintf(buff,"%s CHROMA_KEY_ENABLE:%x", buff, reg->bitfields.CHROMA_KEY_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFORMAT_1 regPP_TXFORMAT_1;

__inline void dump_PP_TXFORMAT_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFORMAT_1 *reg = (regPP_TXFORMAT_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXFORMAT:%x", buff, reg->bitfields.TXFORMAT);
  sprintf(buff,"%s APPLE_YUV:%x", buff, reg->bitfields.APPLE_YUV);
  sprintf(buff,"%s ALPHA_ENABLE:%x", buff, reg->bitfields.ALPHA_ENABLE);
  sprintf(buff,"%s NON_POWER2:%x", buff, reg->bitfields.NON_POWER2);
  sprintf(buff,"%s TXWIDTH:%x", buff, reg->bitfields.TXWIDTH);
  sprintf(buff,"%s TXHEIGHT:%x", buff, reg->bitfields.TXHEIGHT);
  sprintf(buff,"%s FACE_WIDTH_5:%x", buff, reg->bitfields.FACE_WIDTH_5);
  sprintf(buff,"%s FACE_HEIGHT_5:%x", buff, reg->bitfields.FACE_HEIGHT_5);
  sprintf(buff,"%s ST_ROUTE_R2:%x", buff, reg->bitfields.ST_ROUTE_R2);
  sprintf(buff,"%s LOOKUP_DISABLE:%x", buff, reg->bitfields.LOOKUP_DISABLE);
  sprintf(buff,"%s ALPHA_MASK_ENABLE:%x", buff, reg->bitfields.ALPHA_MASK_ENABLE);
  sprintf(buff,"%s CHROMA_KEY_ENABLE:%x", buff, reg->bitfields.CHROMA_KEY_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFORMAT_2 regPP_TXFORMAT_2;

__inline void dump_PP_TXFORMAT_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFORMAT_2 *reg = (regPP_TXFORMAT_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXFORMAT:%x", buff, reg->bitfields.TXFORMAT);
  sprintf(buff,"%s APPLE_YUV:%x", buff, reg->bitfields.APPLE_YUV);
  sprintf(buff,"%s ALPHA_ENABLE:%x", buff, reg->bitfields.ALPHA_ENABLE);
  sprintf(buff,"%s NON_POWER2:%x", buff, reg->bitfields.NON_POWER2);
  sprintf(buff,"%s TXWIDTH:%x", buff, reg->bitfields.TXWIDTH);
  sprintf(buff,"%s TXHEIGHT:%x", buff, reg->bitfields.TXHEIGHT);
  sprintf(buff,"%s FACE_WIDTH_5:%x", buff, reg->bitfields.FACE_WIDTH_5);
  sprintf(buff,"%s FACE_HEIGHT_5:%x", buff, reg->bitfields.FACE_HEIGHT_5);
  sprintf(buff,"%s ST_ROUTE_R2:%x", buff, reg->bitfields.ST_ROUTE_R2);
  sprintf(buff,"%s LOOKUP_DISABLE:%x", buff, reg->bitfields.LOOKUP_DISABLE);
  sprintf(buff,"%s ALPHA_MASK_ENABLE:%x", buff, reg->bitfields.ALPHA_MASK_ENABLE);
  sprintf(buff,"%s CHROMA_KEY_ENABLE:%x", buff, reg->bitfields.CHROMA_KEY_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFORMAT_3 regPP_TXFORMAT_3;

__inline void dump_PP_TXFORMAT_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFORMAT_3 *reg = (regPP_TXFORMAT_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXFORMAT:%x", buff, reg->bitfields.TXFORMAT);
  sprintf(buff,"%s APPLE_YUV:%x", buff, reg->bitfields.APPLE_YUV);
  sprintf(buff,"%s ALPHA_ENABLE:%x", buff, reg->bitfields.ALPHA_ENABLE);
  sprintf(buff,"%s NON_POWER2:%x", buff, reg->bitfields.NON_POWER2);
  sprintf(buff,"%s TXWIDTH:%x", buff, reg->bitfields.TXWIDTH);
  sprintf(buff,"%s TXHEIGHT:%x", buff, reg->bitfields.TXHEIGHT);
  sprintf(buff,"%s FACE_WIDTH_5:%x", buff, reg->bitfields.FACE_WIDTH_5);
  sprintf(buff,"%s FACE_HEIGHT_5:%x", buff, reg->bitfields.FACE_HEIGHT_5);
  sprintf(buff,"%s ST_ROUTE:%x", buff, reg->bitfields.ST_ROUTE);
  sprintf(buff,"%s LOOKUP_DISABLE:%x", buff, reg->bitfields.LOOKUP_DISABLE);
  sprintf(buff,"%s ALPHA_MASK_ENABLE:%x", buff, reg->bitfields.ALPHA_MASK_ENABLE);
  sprintf(buff,"%s CHROMA_KEY_ENABLE:%x", buff, reg->bitfields.CHROMA_KEY_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFORMAT_4 regPP_TXFORMAT_4;

__inline void dump_PP_TXFORMAT_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFORMAT_4 *reg = (regPP_TXFORMAT_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXFORMAT:%x", buff, reg->bitfields.TXFORMAT);
  sprintf(buff,"%s APPLE_YUV:%x", buff, reg->bitfields.APPLE_YUV);
  sprintf(buff,"%s ALPHA_ENABLE:%x", buff, reg->bitfields.ALPHA_ENABLE);
  sprintf(buff,"%s NON_POWER2:%x", buff, reg->bitfields.NON_POWER2);
  sprintf(buff,"%s TXWIDTH:%x", buff, reg->bitfields.TXWIDTH);
  sprintf(buff,"%s TXHEIGHT:%x", buff, reg->bitfields.TXHEIGHT);
  sprintf(buff,"%s FACE_WIDTH_5:%x", buff, reg->bitfields.FACE_WIDTH_5);
  sprintf(buff,"%s FACE_HEIGHT_5:%x", buff, reg->bitfields.FACE_HEIGHT_5);
  sprintf(buff,"%s ST_ROUTE:%x", buff, reg->bitfields.ST_ROUTE);
  sprintf(buff,"%s LOOKUP_DISABLE:%x", buff, reg->bitfields.LOOKUP_DISABLE);
  sprintf(buff,"%s ALPHA_MASK_ENABLE:%x", buff, reg->bitfields.ALPHA_MASK_ENABLE);
  sprintf(buff,"%s CHROMA_KEY_ENABLE:%x", buff, reg->bitfields.CHROMA_KEY_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFORMAT_5 regPP_TXFORMAT_5;

__inline void dump_PP_TXFORMAT_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFORMAT_5 *reg = (regPP_TXFORMAT_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXFORMAT:%x", buff, reg->bitfields.TXFORMAT);
  sprintf(buff,"%s APPLE_YUV:%x", buff, reg->bitfields.APPLE_YUV);
  sprintf(buff,"%s ALPHA_ENABLE:%x", buff, reg->bitfields.ALPHA_ENABLE);
  sprintf(buff,"%s NON_POWER2:%x", buff, reg->bitfields.NON_POWER2);
  sprintf(buff,"%s TXWIDTH:%x", buff, reg->bitfields.TXWIDTH);
  sprintf(buff,"%s TXHEIGHT:%x", buff, reg->bitfields.TXHEIGHT);
  sprintf(buff,"%s FACE_WIDTH_5:%x", buff, reg->bitfields.FACE_WIDTH_5);
  sprintf(buff,"%s FACE_HEIGHT_5:%x", buff, reg->bitfields.FACE_HEIGHT_5);
  sprintf(buff,"%s ST_ROUTE:%x", buff, reg->bitfields.ST_ROUTE);
  sprintf(buff,"%s LOOKUP_DISABLE:%x", buff, reg->bitfields.LOOKUP_DISABLE);
  sprintf(buff,"%s ALPHA_MASK_ENABLE:%x", buff, reg->bitfields.ALPHA_MASK_ENABLE);
  sprintf(buff,"%s CHROMA_KEY_ENABLE:%x", buff, reg->bitfields.CHROMA_KEY_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFORMAT_X_0 regPP_TXFORMAT_X_0;

__inline void dump_PP_TXFORMAT_X_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFORMAT_X_0 *reg = (regPP_TXFORMAT_X_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXDEPTH:%x", buff, reg->bitfields.TXDEPTH);
  sprintf(buff,"%s VOLUME_FILTER:%x", buff, reg->bitfields.VOLUME_FILTER);
  sprintf(buff,"%s CLAMP_MODE:%x", buff, reg->bitfields.CLAMP_MODE);
  sprintf(buff,"%s WRAPEN_Q:%x", buff, reg->bitfields.WRAPEN_Q);
  sprintf(buff,"%s CLAMP_Q:%x", buff, reg->bitfields.CLAMP_Q);
  sprintf(buff,"%s MIN_MIP_LEVEL:%x", buff, reg->bitfields.MIN_MIP_LEVEL);
  sprintf(buff,"%s TEX_COORD_TYPE:%x", buff, reg->bitfields.TEX_COORD_TYPE);
  sprintf(buff,"%s LOD_BIAS:%x", buff, reg->bitfields.LOD_BIAS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFORMAT_X_1 regPP_TXFORMAT_X_1;

__inline void dump_PP_TXFORMAT_X_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFORMAT_X_1 *reg = (regPP_TXFORMAT_X_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXDEPTH:%x", buff, reg->bitfields.TXDEPTH);
  sprintf(buff,"%s VOLUME_FILTER:%x", buff, reg->bitfields.VOLUME_FILTER);
  sprintf(buff,"%s CLAMP_MODE:%x", buff, reg->bitfields.CLAMP_MODE);
  sprintf(buff,"%s WRAPEN_Q:%x", buff, reg->bitfields.WRAPEN_Q);
  sprintf(buff,"%s CLAMP_Q:%x", buff, reg->bitfields.CLAMP_Q);
  sprintf(buff,"%s MIN_MIP_LEVEL:%x", buff, reg->bitfields.MIN_MIP_LEVEL);
  sprintf(buff,"%s TEX_COORD_TYPE:%x", buff, reg->bitfields.TEX_COORD_TYPE);
  sprintf(buff,"%s LOD_BIAS:%x", buff, reg->bitfields.LOD_BIAS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFORMAT_X_2 regPP_TXFORMAT_X_2;

__inline void dump_PP_TXFORMAT_X_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFORMAT_X_2 *reg = (regPP_TXFORMAT_X_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXDEPTH:%x", buff, reg->bitfields.TXDEPTH);
  sprintf(buff,"%s VOLUME_FILTER:%x", buff, reg->bitfields.VOLUME_FILTER);
  sprintf(buff,"%s CLAMP_MODE:%x", buff, reg->bitfields.CLAMP_MODE);
  sprintf(buff,"%s WRAPEN_Q:%x", buff, reg->bitfields.WRAPEN_Q);
  sprintf(buff,"%s CLAMP_Q:%x", buff, reg->bitfields.CLAMP_Q);
  sprintf(buff,"%s MIN_MIP_LEVEL:%x", buff, reg->bitfields.MIN_MIP_LEVEL);
  sprintf(buff,"%s TEX_COORD_TYPE:%x", buff, reg->bitfields.TEX_COORD_TYPE);
  sprintf(buff,"%s LOD_BIAS:%x", buff, reg->bitfields.LOD_BIAS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFORMAT_X_3 regPP_TXFORMAT_X_3;

__inline void dump_PP_TXFORMAT_X_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFORMAT_X_3 *reg = (regPP_TXFORMAT_X_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXDEPTH:%x", buff, reg->bitfields.TXDEPTH);
  sprintf(buff,"%s VOLUME_FILTER:%x", buff, reg->bitfields.VOLUME_FILTER);
  sprintf(buff,"%s CLAMP_MODE:%x", buff, reg->bitfields.CLAMP_MODE);
  sprintf(buff,"%s WRAPEN_Q:%x", buff, reg->bitfields.WRAPEN_Q);
  sprintf(buff,"%s CLAMP_Q:%x", buff, reg->bitfields.CLAMP_Q);
  sprintf(buff,"%s MIN_MIP_LEVEL:%x", buff, reg->bitfields.MIN_MIP_LEVEL);
  sprintf(buff,"%s TEX_COORD_TYPE:%x", buff, reg->bitfields.TEX_COORD_TYPE);
  sprintf(buff,"%s LOD_BIAS:%x", buff, reg->bitfields.LOD_BIAS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFORMAT_X_4 regPP_TXFORMAT_X_4;

__inline void dump_PP_TXFORMAT_X_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFORMAT_X_4 *reg = (regPP_TXFORMAT_X_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXDEPTH:%x", buff, reg->bitfields.TXDEPTH);
  sprintf(buff,"%s VOLUME_FILTER:%x", buff, reg->bitfields.VOLUME_FILTER);
  sprintf(buff,"%s CLAMP_MODE:%x", buff, reg->bitfields.CLAMP_MODE);
  sprintf(buff,"%s WRAPEN_Q:%x", buff, reg->bitfields.WRAPEN_Q);
  sprintf(buff,"%s CLAMP_Q:%x", buff, reg->bitfields.CLAMP_Q);
  sprintf(buff,"%s MIN_MIP_LEVEL:%x", buff, reg->bitfields.MIN_MIP_LEVEL);
  sprintf(buff,"%s TEX_COORD_TYPE:%x", buff, reg->bitfields.TEX_COORD_TYPE);
  sprintf(buff,"%s LOD_BIAS:%x", buff, reg->bitfields.LOD_BIAS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXFORMAT_X_5 regPP_TXFORMAT_X_5;

__inline void dump_PP_TXFORMAT_X_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXFORMAT_X_5 *reg = (regPP_TXFORMAT_X_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXDEPTH:%x", buff, reg->bitfields.TXDEPTH);
  sprintf(buff,"%s VOLUME_FILTER:%x", buff, reg->bitfields.VOLUME_FILTER);
  sprintf(buff,"%s CLAMP_MODE:%x", buff, reg->bitfields.CLAMP_MODE);
  sprintf(buff,"%s WRAPEN_Q:%x", buff, reg->bitfields.WRAPEN_Q);
  sprintf(buff,"%s CLAMP_Q:%x", buff, reg->bitfields.CLAMP_Q);
  sprintf(buff,"%s MIN_MIP_LEVEL:%x", buff, reg->bitfields.MIN_MIP_LEVEL);
  sprintf(buff,"%s TEX_COORD_TYPE:%x", buff, reg->bitfields.TEX_COORD_TYPE);
  sprintf(buff,"%s LOD_BIAS:%x", buff, reg->bitfields.LOD_BIAS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TEX_SIZE_0 regPP_TEX_SIZE_0;

__inline void dump_PP_TEX_SIZE_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TEX_SIZE_0 *reg = (regPP_TEX_SIZE_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_USIZE:%x", buff, reg->bitfields.TEX_USIZE);
  sprintf(buff,"%s TEX_VSIZE:%x", buff, reg->bitfields.TEX_VSIZE);
  sprintf(buff,"%s SIGNED_RGB:%x", buff, reg->bitfields.SIGNED_RGB);
  sprintf(buff,"%s SIGNED_ALPHA:%x", buff, reg->bitfields.SIGNED_ALPHA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TEX_SIZE_1 regPP_TEX_SIZE_1;

__inline void dump_PP_TEX_SIZE_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TEX_SIZE_1 *reg = (regPP_TEX_SIZE_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_USIZE:%x", buff, reg->bitfields.TEX_USIZE);
  sprintf(buff,"%s TEX_VSIZE:%x", buff, reg->bitfields.TEX_VSIZE);
  sprintf(buff,"%s SIGNED_RGB:%x", buff, reg->bitfields.SIGNED_RGB);
  sprintf(buff,"%s SIGNED_ALPHA:%x", buff, reg->bitfields.SIGNED_ALPHA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TEX_SIZE_2 regPP_TEX_SIZE_2;

__inline void dump_PP_TEX_SIZE_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TEX_SIZE_2 *reg = (regPP_TEX_SIZE_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_USIZE:%x", buff, reg->bitfields.TEX_USIZE);
  sprintf(buff,"%s TEX_VSIZE:%x", buff, reg->bitfields.TEX_VSIZE);
  sprintf(buff,"%s SIGNED_RGB:%x", buff, reg->bitfields.SIGNED_RGB);
  sprintf(buff,"%s SIGNED_ALPHA:%x", buff, reg->bitfields.SIGNED_ALPHA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TEX_SIZE_3 regPP_TEX_SIZE_3;

__inline void dump_PP_TEX_SIZE_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TEX_SIZE_3 *reg = (regPP_TEX_SIZE_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_USIZE:%x", buff, reg->bitfields.TEX_USIZE);
  sprintf(buff,"%s TEX_VSIZE:%x", buff, reg->bitfields.TEX_VSIZE);
  sprintf(buff,"%s SIGNED_RGB:%x", buff, reg->bitfields.SIGNED_RGB);
  sprintf(buff,"%s SIGNED_ALPHA:%x", buff, reg->bitfields.SIGNED_ALPHA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TEX_SIZE_4 regPP_TEX_SIZE_4;

__inline void dump_PP_TEX_SIZE_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TEX_SIZE_4 *reg = (regPP_TEX_SIZE_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_USIZE:%x", buff, reg->bitfields.TEX_USIZE);
  sprintf(buff,"%s TEX_VSIZE:%x", buff, reg->bitfields.TEX_VSIZE);
  sprintf(buff,"%s SIGNED_RGB:%x", buff, reg->bitfields.SIGNED_RGB);
  sprintf(buff,"%s SIGNED_ALPHA:%x", buff, reg->bitfields.SIGNED_ALPHA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TEX_SIZE_5 regPP_TEX_SIZE_5;

__inline void dump_PP_TEX_SIZE_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TEX_SIZE_5 *reg = (regPP_TEX_SIZE_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_USIZE:%x", buff, reg->bitfields.TEX_USIZE);
  sprintf(buff,"%s TEX_VSIZE:%x", buff, reg->bitfields.TEX_VSIZE);
  sprintf(buff,"%s SIGNED_RGB:%x", buff, reg->bitfields.SIGNED_RGB);
  sprintf(buff,"%s SIGNED_ALPHA:%x", buff, reg->bitfields.SIGNED_ALPHA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXPITCH_0 regPP_TXPITCH_0;

__inline void dump_PP_TXPITCH_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXPITCH_0 *reg = (regPP_TXPITCH_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXPITCH:%x", buff, reg->bitfields.TXPITCH);
  sprintf(buff,"%s TEX_TAG_CNTL:%x", buff, reg->bitfields.TEX_TAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXPITCH_1 regPP_TXPITCH_1;

__inline void dump_PP_TXPITCH_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXPITCH_1 *reg = (regPP_TXPITCH_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXPITCH:%x", buff, reg->bitfields.TXPITCH);
  sprintf(buff,"%s TEX_TAG_CNTL:%x", buff, reg->bitfields.TEX_TAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXPITCH_2 regPP_TXPITCH_2;

__inline void dump_PP_TXPITCH_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXPITCH_2 *reg = (regPP_TXPITCH_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXPITCH:%x", buff, reg->bitfields.TXPITCH);
  sprintf(buff,"%s TEX_TAG_CNTL:%x", buff, reg->bitfields.TEX_TAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXPITCH_3 regPP_TXPITCH_3;

__inline void dump_PP_TXPITCH_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXPITCH_3 *reg = (regPP_TXPITCH_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXPITCH:%x", buff, reg->bitfields.TXPITCH);
  sprintf(buff,"%s TEX_TAG_CNTL:%x", buff, reg->bitfields.TEX_TAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXPITCH_4 regPP_TXPITCH_4;

__inline void dump_PP_TXPITCH_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXPITCH_4 *reg = (regPP_TXPITCH_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXPITCH:%x", buff, reg->bitfields.TXPITCH);
  sprintf(buff,"%s TEX_TAG_CNTL:%x", buff, reg->bitfields.TEX_TAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXPITCH_5 regPP_TXPITCH_5;

__inline void dump_PP_TXPITCH_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXPITCH_5 *reg = (regPP_TXPITCH_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXPITCH:%x", buff, reg->bitfields.TXPITCH);
  sprintf(buff,"%s TEX_TAG_CNTL:%x", buff, reg->bitfields.TEX_TAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_BORDER_COLOR_0 regPP_BORDER_COLOR_0;

__inline void dump_PP_BORDER_COLOR_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_BORDER_COLOR_0 *reg = (regPP_BORDER_COLOR_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_BORDER_COLOR_1 regPP_BORDER_COLOR_1;

__inline void dump_PP_BORDER_COLOR_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_BORDER_COLOR_1 *reg = (regPP_BORDER_COLOR_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_BORDER_COLOR_2 regPP_BORDER_COLOR_2;

__inline void dump_PP_BORDER_COLOR_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_BORDER_COLOR_2 *reg = (regPP_BORDER_COLOR_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_BORDER_COLOR_3 regPP_BORDER_COLOR_3;

__inline void dump_PP_BORDER_COLOR_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_BORDER_COLOR_3 *reg = (regPP_BORDER_COLOR_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_BORDER_COLOR_4 regPP_BORDER_COLOR_4;

__inline void dump_PP_BORDER_COLOR_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_BORDER_COLOR_4 *reg = (regPP_BORDER_COLOR_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_BORDER_COLOR_5 regPP_BORDER_COLOR_5;

__inline void dump_PP_BORDER_COLOR_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_BORDER_COLOR_5 *reg = (regPP_BORDER_COLOR_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_FACES_0 regPP_CUBIC_FACES_0;

__inline void dump_PP_CUBIC_FACES_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_FACES_0 *reg = (regPP_CUBIC_FACES_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FACE_WIDTH_1:%x", buff, reg->bitfields.FACE_WIDTH_1);
  sprintf(buff,"%s FACE_HEIGHT_1:%x", buff, reg->bitfields.FACE_HEIGHT_1);
  sprintf(buff,"%s FACE_WIDTH_2:%x", buff, reg->bitfields.FACE_WIDTH_2);
  sprintf(buff,"%s FACE_HEIGHT_2:%x", buff, reg->bitfields.FACE_HEIGHT_2);
  sprintf(buff,"%s FACE_WIDTH_3:%x", buff, reg->bitfields.FACE_WIDTH_3);
  sprintf(buff,"%s FACE_HEIGHT_3:%x", buff, reg->bitfields.FACE_HEIGHT_3);
  sprintf(buff,"%s FACE_WIDTH_4:%x", buff, reg->bitfields.FACE_WIDTH_4);
  sprintf(buff,"%s FACE_HEIGHT_4:%x", buff, reg->bitfields.FACE_HEIGHT_4);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_FACES_1 regPP_CUBIC_FACES_1;

__inline void dump_PP_CUBIC_FACES_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_FACES_1 *reg = (regPP_CUBIC_FACES_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FACE_WIDTH_1:%x", buff, reg->bitfields.FACE_WIDTH_1);
  sprintf(buff,"%s FACE_HEIGHT_1:%x", buff, reg->bitfields.FACE_HEIGHT_1);
  sprintf(buff,"%s FACE_WIDTH_2:%x", buff, reg->bitfields.FACE_WIDTH_2);
  sprintf(buff,"%s FACE_HEIGHT_2:%x", buff, reg->bitfields.FACE_HEIGHT_2);
  sprintf(buff,"%s FACE_WIDTH_3:%x", buff, reg->bitfields.FACE_WIDTH_3);
  sprintf(buff,"%s FACE_HEIGHT_3:%x", buff, reg->bitfields.FACE_HEIGHT_3);
  sprintf(buff,"%s FACE_WIDTH_4:%x", buff, reg->bitfields.FACE_WIDTH_4);
  sprintf(buff,"%s FACE_HEIGHT_4:%x", buff, reg->bitfields.FACE_HEIGHT_4);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_FACES_2 regPP_CUBIC_FACES_2;

__inline void dump_PP_CUBIC_FACES_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_FACES_2 *reg = (regPP_CUBIC_FACES_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FACE_WIDTH_1:%x", buff, reg->bitfields.FACE_WIDTH_1);
  sprintf(buff,"%s FACE_HEIGHT_1:%x", buff, reg->bitfields.FACE_HEIGHT_1);
  sprintf(buff,"%s FACE_WIDTH_2:%x", buff, reg->bitfields.FACE_WIDTH_2);
  sprintf(buff,"%s FACE_HEIGHT_2:%x", buff, reg->bitfields.FACE_HEIGHT_2);
  sprintf(buff,"%s FACE_WIDTH_3:%x", buff, reg->bitfields.FACE_WIDTH_3);
  sprintf(buff,"%s FACE_HEIGHT_3:%x", buff, reg->bitfields.FACE_HEIGHT_3);
  sprintf(buff,"%s FACE_WIDTH_4:%x", buff, reg->bitfields.FACE_WIDTH_4);
  sprintf(buff,"%s FACE_HEIGHT_4:%x", buff, reg->bitfields.FACE_HEIGHT_4);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_FACES_3 regPP_CUBIC_FACES_3;

__inline void dump_PP_CUBIC_FACES_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_FACES_3 *reg = (regPP_CUBIC_FACES_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FACE_WIDTH_1:%x", buff, reg->bitfields.FACE_WIDTH_1);
  sprintf(buff,"%s FACE_HEIGHT_1:%x", buff, reg->bitfields.FACE_HEIGHT_1);
  sprintf(buff,"%s FACE_WIDTH_2:%x", buff, reg->bitfields.FACE_WIDTH_2);
  sprintf(buff,"%s FACE_HEIGHT_2:%x", buff, reg->bitfields.FACE_HEIGHT_2);
  sprintf(buff,"%s FACE_WIDTH_3:%x", buff, reg->bitfields.FACE_WIDTH_3);
  sprintf(buff,"%s FACE_HEIGHT_3:%x", buff, reg->bitfields.FACE_HEIGHT_3);
  sprintf(buff,"%s FACE_WIDTH_4:%x", buff, reg->bitfields.FACE_WIDTH_4);
  sprintf(buff,"%s FACE_HEIGHT_4:%x", buff, reg->bitfields.FACE_HEIGHT_4);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_FACES_4 regPP_CUBIC_FACES_4;

__inline void dump_PP_CUBIC_FACES_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_FACES_4 *reg = (regPP_CUBIC_FACES_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FACE_WIDTH_1:%x", buff, reg->bitfields.FACE_WIDTH_1);
  sprintf(buff,"%s FACE_HEIGHT_1:%x", buff, reg->bitfields.FACE_HEIGHT_1);
  sprintf(buff,"%s FACE_WIDTH_2:%x", buff, reg->bitfields.FACE_WIDTH_2);
  sprintf(buff,"%s FACE_HEIGHT_2:%x", buff, reg->bitfields.FACE_HEIGHT_2);
  sprintf(buff,"%s FACE_WIDTH_3:%x", buff, reg->bitfields.FACE_WIDTH_3);
  sprintf(buff,"%s FACE_HEIGHT_3:%x", buff, reg->bitfields.FACE_HEIGHT_3);
  sprintf(buff,"%s FACE_WIDTH_4:%x", buff, reg->bitfields.FACE_WIDTH_4);
  sprintf(buff,"%s FACE_HEIGHT_4:%x", buff, reg->bitfields.FACE_HEIGHT_4);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_FACES_5 regPP_CUBIC_FACES_5;

__inline void dump_PP_CUBIC_FACES_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_FACES_5 *reg = (regPP_CUBIC_FACES_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FACE_WIDTH_1:%x", buff, reg->bitfields.FACE_WIDTH_1);
  sprintf(buff,"%s FACE_HEIGHT_1:%x", buff, reg->bitfields.FACE_HEIGHT_1);
  sprintf(buff,"%s FACE_WIDTH_2:%x", buff, reg->bitfields.FACE_WIDTH_2);
  sprintf(buff,"%s FACE_HEIGHT_2:%x", buff, reg->bitfields.FACE_HEIGHT_2);
  sprintf(buff,"%s FACE_WIDTH_3:%x", buff, reg->bitfields.FACE_WIDTH_3);
  sprintf(buff,"%s FACE_HEIGHT_3:%x", buff, reg->bitfields.FACE_HEIGHT_3);
  sprintf(buff,"%s FACE_WIDTH_4:%x", buff, reg->bitfields.FACE_WIDTH_4);
  sprintf(buff,"%s FACE_HEIGHT_4:%x", buff, reg->bitfields.FACE_HEIGHT_4);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXMULTI_CTL_0 regPP_TXMULTI_CTL_0;

__inline void dump_PP_TXMULTI_CTL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXMULTI_CTL_0 *reg = (regPP_TXMULTI_CTL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LOOKUP_DISABLE_1:%x", buff, reg->bitfields.LOOKUP_DISABLE_1);
  sprintf(buff,"%s TEX_COORD_TYPE_1:%x", buff, reg->bitfields.TEX_COORD_TYPE_1);
  sprintf(buff,"%s ST_ROUTE_1:%x", buff, reg->bitfields.ST_ROUTE_1);
  sprintf(buff,"%s CLAMP_MODE:%x", buff, reg->bitfields.CLAMP_MODE);
  sprintf(buff,"%s ST_ROUTE_2:%x", buff, reg->bitfields.ST_ROUTE_2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXMULTI_CTL_1 regPP_TXMULTI_CTL_1;

__inline void dump_PP_TXMULTI_CTL_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXMULTI_CTL_1 *reg = (regPP_TXMULTI_CTL_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LOOKUP_DISABLE_1:%x", buff, reg->bitfields.LOOKUP_DISABLE_1);
  sprintf(buff,"%s TEX_COORD_TYPE_1:%x", buff, reg->bitfields.TEX_COORD_TYPE_1);
  sprintf(buff,"%s ST_ROUTE_1:%x", buff, reg->bitfields.ST_ROUTE_1);
  sprintf(buff,"%s CLAMP_MODE:%x", buff, reg->bitfields.CLAMP_MODE);
  sprintf(buff,"%s ST_ROUTE_2:%x", buff, reg->bitfields.ST_ROUTE_2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXMULTI_CTL_2 regPP_TXMULTI_CTL_2;

__inline void dump_PP_TXMULTI_CTL_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXMULTI_CTL_2 *reg = (regPP_TXMULTI_CTL_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LOOKUP_DISABLE_1:%x", buff, reg->bitfields.LOOKUP_DISABLE_1);
  sprintf(buff,"%s TEX_COORD_TYPE_1:%x", buff, reg->bitfields.TEX_COORD_TYPE_1);
  sprintf(buff,"%s ST_ROUTE_1:%x", buff, reg->bitfields.ST_ROUTE_1);
  sprintf(buff,"%s CLAMP_MODE:%x", buff, reg->bitfields.CLAMP_MODE);
  sprintf(buff,"%s ST_ROUTE_2:%x", buff, reg->bitfields.ST_ROUTE_2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXMULTI_CTL_3 regPP_TXMULTI_CTL_3;

__inline void dump_PP_TXMULTI_CTL_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXMULTI_CTL_3 *reg = (regPP_TXMULTI_CTL_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LOOKUP_DISABLE_1:%x", buff, reg->bitfields.LOOKUP_DISABLE_1);
  sprintf(buff,"%s TEX_COORD_TYPE_1:%x", buff, reg->bitfields.TEX_COORD_TYPE_1);
  sprintf(buff,"%s ST_ROUTE_1:%x", buff, reg->bitfields.ST_ROUTE_1);
  sprintf(buff,"%s CLAMP_MODE:%x", buff, reg->bitfields.CLAMP_MODE);
  sprintf(buff,"%s ST_ROUTE_2:%x", buff, reg->bitfields.ST_ROUTE_2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXMULTI_CTL_4 regPP_TXMULTI_CTL_4;

__inline void dump_PP_TXMULTI_CTL_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXMULTI_CTL_4 *reg = (regPP_TXMULTI_CTL_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LOOKUP_DISABLE_1:%x", buff, reg->bitfields.LOOKUP_DISABLE_1);
  sprintf(buff,"%s TEX_COORD_TYPE_1:%x", buff, reg->bitfields.TEX_COORD_TYPE_1);
  sprintf(buff,"%s ST_ROUTE_1:%x", buff, reg->bitfields.ST_ROUTE_1);
  sprintf(buff,"%s CLAMP_MODE:%x", buff, reg->bitfields.CLAMP_MODE);
  sprintf(buff,"%s ST_ROUTE_2:%x", buff, reg->bitfields.ST_ROUTE_2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXMULTI_CTL_5 regPP_TXMULTI_CTL_5;

__inline void dump_PP_TXMULTI_CTL_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXMULTI_CTL_5 *reg = (regPP_TXMULTI_CTL_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LOOKUP_DISABLE_1:%x", buff, reg->bitfields.LOOKUP_DISABLE_1);
  sprintf(buff,"%s TEX_COORD_TYPE_1:%x", buff, reg->bitfields.TEX_COORD_TYPE_1);
  sprintf(buff,"%s ST_ROUTE_1:%x", buff, reg->bitfields.ST_ROUTE_1);
  sprintf(buff,"%s CLAMP_MODE:%x", buff, reg->bitfields.CLAMP_MODE);
  sprintf(buff,"%s ST_ROUTE_2:%x", buff, reg->bitfields.ST_ROUTE_2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CNTL regPP_CNTL;

__inline void dump_PP_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CNTL *reg = (regPP_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_0_ENABLE:%x", buff, reg->bitfields.TEX_0_ENABLE);
  sprintf(buff,"%s TEX_1_ENABLE:%x", buff, reg->bitfields.TEX_1_ENABLE);
  sprintf(buff,"%s TEX_2_ENABLE:%x", buff, reg->bitfields.TEX_2_ENABLE);
  sprintf(buff,"%s TEX_3_ENABLE:%x", buff, reg->bitfields.TEX_3_ENABLE);
  sprintf(buff,"%s TEX_4_ENABLE:%x", buff, reg->bitfields.TEX_4_ENABLE);
  sprintf(buff,"%s TEX_5_ENABLE:%x", buff, reg->bitfields.TEX_5_ENABLE);
  sprintf(buff,"%s FILTER_ROUND_MODE:%x", buff, reg->bitfields.FILTER_ROUND_MODE);
  sprintf(buff,"%s TEX_BLEND_7_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_7_ENABLE);
  sprintf(buff,"%s TEX_BLEND_0_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_0_ENABLE);
  sprintf(buff,"%s TEX_BLEND_1_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_1_ENABLE);
  sprintf(buff,"%s TEX_BLEND_2_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_2_ENABLE);
  sprintf(buff,"%s TEX_BLEND_3_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_3_ENABLE);
  sprintf(buff,"%s TEX_BLEND_4_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_4_ENABLE);
  sprintf(buff,"%s TEX_BLEND_5_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_5_ENABLE);
  sprintf(buff,"%s TEX_BLEND_6_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_6_ENABLE);
  sprintf(buff,"%s MULTI_PASS_ENABLE:%x", buff, reg->bitfields.MULTI_PASS_ENABLE);
  sprintf(buff,"%s SPECULAR_ENABLE:%x", buff, reg->bitfields.SPECULAR_ENABLE);
  sprintf(buff,"%s FOG_ENABLE:%x", buff, reg->bitfields.FOG_ENABLE);
  sprintf(buff,"%s ALPHA_TEST_ENABLE:%x", buff, reg->bitfields.ALPHA_TEST_ENABLE);
  sprintf(buff,"%s ANTI_ALIAS_CTL:%x", buff, reg->bitfields.ANTI_ALIAS_CTL);
  sprintf(buff,"%s MC_ENABLE:%x", buff, reg->bitfields.MC_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CNTL_X regPP_CNTL_X;

__inline void dump_PP_CNTL_X(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CNTL_X *reg = (regPP_CNTL_X *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEX_0_ENABLE_PASS_1:%x", buff, reg->bitfields.TEX_0_ENABLE_PASS_1);
  sprintf(buff,"%s TEX_1_ENABLE_PASS_1:%x", buff, reg->bitfields.TEX_1_ENABLE_PASS_1);
  sprintf(buff,"%s TEX_2_ENABLE_PASS_1:%x", buff, reg->bitfields.TEX_2_ENABLE_PASS_1);
  sprintf(buff,"%s TEX_3_ENABLE_PASS_1:%x", buff, reg->bitfields.TEX_3_ENABLE_PASS_1);
  sprintf(buff,"%s TEX_4_ENABLE_PASS_1:%x", buff, reg->bitfields.TEX_4_ENABLE_PASS_1);
  sprintf(buff,"%s TEX_5_ENABLE_PASS_1:%x", buff, reg->bitfields.TEX_5_ENABLE_PASS_1);
  sprintf(buff,"%s INDIRECT_REGS:%x", buff, reg->bitfields.INDIRECT_REGS);
  sprintf(buff,"%s TEX_BLEND_A0_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_A0_ENABLE);
  sprintf(buff,"%s TEX_BLEND_A1_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_A1_ENABLE);
  sprintf(buff,"%s TEX_BLEND_A2_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_A2_ENABLE);
  sprintf(buff,"%s TEX_BLEND_A3_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_A3_ENABLE);
  sprintf(buff,"%s TEX_BLEND_A4_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_A4_ENABLE);
  sprintf(buff,"%s TEX_BLEND_A5_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_A5_ENABLE);
  sprintf(buff,"%s TEX_BLEND_A6_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_A6_ENABLE);
  sprintf(buff,"%s TEX_BLEND_A7_ENABLE:%x", buff, reg->bitfields.TEX_BLEND_A7_ENABLE);
  sprintf(buff,"%s SHADER_OUTPUT_CNTL:%x", buff, reg->bitfields.SHADER_OUTPUT_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_MISC regPP_MISC;

__inline void dump_PP_MISC(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_MISC *reg = (regPP_MISC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s REF_ALPHA:%x", buff, reg->bitfields.REF_ALPHA);
  sprintf(buff,"%s ALPHA_TEST_OP:%x", buff, reg->bitfields.ALPHA_TEST_OP);
  sprintf(buff,"%s CHROMA_FUNC:%x", buff, reg->bitfields.CHROMA_FUNC);
  sprintf(buff,"%s CHROMA_KEY_MODE:%x", buff, reg->bitfields.CHROMA_KEY_MODE);
  sprintf(buff,"%s RIGHT_HAND_CUBE:%x", buff, reg->bitfields.RIGHT_HAND_CUBE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CHROMA_COLOR regPP_CHROMA_COLOR;

__inline void dump_PP_CHROMA_COLOR(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CHROMA_COLOR *reg = (regPP_CHROMA_COLOR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CHROMA_MASK regPP_CHROMA_MASK;

__inline void dump_PP_CHROMA_MASK(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CHROMA_MASK *reg = (regPP_CHROMA_MASK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_FOG_COLOR regPP_FOG_COLOR;

__inline void dump_PP_FOG_COLOR(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_FOG_COLOR *reg = (regPP_FOG_COLOR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FOG_COLOR:%x", buff, reg->bitfields.FOG_COLOR);
  sprintf(buff,"%s FOG_TABLE:%x", buff, reg->bitfields.FOG_TABLE);
  sprintf(buff,"%s FOG_INDEX_SEL_R2:%x", buff, reg->bitfields.FOG_INDEX_SEL_R2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PERF_COUNT0 regPP_PERF_COUNT0;

__inline void dump_PP_PERF_COUNT0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PERF_COUNT0 *reg = (regPP_PERF_COUNT0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PERF_COUNT1 regPP_PERF_COUNT1;

__inline void dump_PP_PERF_COUNT1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PERF_COUNT1 *reg = (regPP_PERF_COUNT1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PERF_COUNT2 regPP_PERF_COUNT2;

__inline void dump_PP_PERF_COUNT2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PERF_COUNT2 *reg = (regPP_PERF_COUNT2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_MC_CONTEXT regPP_MC_CONTEXT;

__inline void dump_PP_MC_CONTEXT(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_MC_CONTEXT *reg = (regPP_MC_CONTEXT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MC_BUF_BASE:%x", buff, reg->bitfields.MC_BUF_BASE);
  sprintf(buff,"%s SRC1_INDEX:%x", buff, reg->bitfields.SRC1_INDEX);
  sprintf(buff,"%s SRC2_INDEX:%x", buff, reg->bitfields.SRC2_INDEX);
  sprintf(buff,"%s MC_FUNC:%x", buff, reg->bitfields.MC_FUNC);
  sprintf(buff,"%s DST_PITCH_MUL:%x", buff, reg->bitfields.DST_PITCH_MUL);
  sprintf(buff,"%s SRC_2_PITCH_MUL:%x", buff, reg->bitfields.SRC_2_PITCH_MUL);
  sprintf(buff,"%s SRC_1_PITCH_MUL:%x", buff, reg->bitfields.SRC_1_PITCH_MUL);
  sprintf(buff,"%s MC_CNTL_WIDTH_HEIGHT_SEL:%x", buff, reg->bitfields.MC_CNTL_WIDTH_HEIGHT_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_LUMI_MATRIX regPP_LUMI_MATRIX;

__inline void dump_PP_LUMI_MATRIX(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_LUMI_MATRIX *reg = (regPP_LUMI_MATRIX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LSCALE:%x", buff, reg->bitfields.LSCALE);
  sprintf(buff,"%s LOFFSET:%x", buff, reg->bitfields.LOFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ROT_MATRIX0 regPP_ROT_MATRIX0;

__inline void dump_PP_ROT_MATRIX0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ROT_MATRIX0 *reg = (regPP_ROT_MATRIX0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s M00:%x", buff, reg->bitfields.M00);
  sprintf(buff,"%s M10:%x", buff, reg->bitfields.M10);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ROT_MATRIX1 regPP_ROT_MATRIX1;

__inline void dump_PP_ROT_MATRIX1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ROT_MATRIX1 *reg = (regPP_ROT_MATRIX1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s M01:%x", buff, reg->bitfields.M01);
  sprintf(buff,"%s M11:%x", buff, reg->bitfields.M11);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TRI_PERF regPP_TRI_PERF;

__inline void dump_PP_TRI_PERF(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TRI_PERF *reg = (regPP_TRI_PERF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PERF_CNTL regPP_PERF_CNTL;

__inline void dump_PP_PERF_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PERF_CNTL *reg = (regPP_PERF_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s RR_FIFO_SCALE:%x", buff, reg->bitfields.RR_FIFO_SCALE);
  sprintf(buff,"%s REQUEST_SCALE:%x", buff, reg->bitfields.REQUEST_SCALE);
  sprintf(buff,"%s PP_COUNT_CTL:%x", buff, reg->bitfields.PP_COUNT_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXOFFSET_0 regPP_TXOFFSET_0;

__inline void dump_PP_TXOFFSET_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXOFFSET_0 *reg = (regPP_TXOFFSET_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s TXOFFSET:%x", buff, reg->bitfields.TXOFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXOFFSET_1 regPP_TXOFFSET_1;

__inline void dump_PP_TXOFFSET_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXOFFSET_1 *reg = (regPP_TXOFFSET_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s TXOFFSET:%x", buff, reg->bitfields.TXOFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXOFFSET_2 regPP_TXOFFSET_2;

__inline void dump_PP_TXOFFSET_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXOFFSET_2 *reg = (regPP_TXOFFSET_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s TXOFFSET:%x", buff, reg->bitfields.TXOFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXOFFSET_3 regPP_TXOFFSET_3;

__inline void dump_PP_TXOFFSET_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXOFFSET_3 *reg = (regPP_TXOFFSET_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s TXOFFSET:%x", buff, reg->bitfields.TXOFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXOFFSET_4 regPP_TXOFFSET_4;

__inline void dump_PP_TXOFFSET_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXOFFSET_4 *reg = (regPP_TXOFFSET_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s TXOFFSET:%x", buff, reg->bitfields.TXOFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TXOFFSET_5 regPP_TXOFFSET_5;

__inline void dump_PP_TXOFFSET_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TXOFFSET_5 *reg = (regPP_TXOFFSET_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s TXOFFSET:%x", buff, reg->bitfields.TXOFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F1_0 regPP_CUBIC_OFFSET_F1_0;

__inline void dump_PP_CUBIC_OFFSET_F1_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F1_0 *reg = (regPP_CUBIC_OFFSET_F1_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F1_1 regPP_CUBIC_OFFSET_F1_1;

__inline void dump_PP_CUBIC_OFFSET_F1_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F1_1 *reg = (regPP_CUBIC_OFFSET_F1_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F1_2 regPP_CUBIC_OFFSET_F1_2;

__inline void dump_PP_CUBIC_OFFSET_F1_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F1_2 *reg = (regPP_CUBIC_OFFSET_F1_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F1_3 regPP_CUBIC_OFFSET_F1_3;

__inline void dump_PP_CUBIC_OFFSET_F1_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F1_3 *reg = (regPP_CUBIC_OFFSET_F1_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F1_4 regPP_CUBIC_OFFSET_F1_4;

__inline void dump_PP_CUBIC_OFFSET_F1_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F1_4 *reg = (regPP_CUBIC_OFFSET_F1_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F1_5 regPP_CUBIC_OFFSET_F1_5;

__inline void dump_PP_CUBIC_OFFSET_F1_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F1_5 *reg = (regPP_CUBIC_OFFSET_F1_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F2_0 regPP_CUBIC_OFFSET_F2_0;

__inline void dump_PP_CUBIC_OFFSET_F2_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F2_0 *reg = (regPP_CUBIC_OFFSET_F2_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F2_1 regPP_CUBIC_OFFSET_F2_1;

__inline void dump_PP_CUBIC_OFFSET_F2_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F2_1 *reg = (regPP_CUBIC_OFFSET_F2_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F2_2 regPP_CUBIC_OFFSET_F2_2;

__inline void dump_PP_CUBIC_OFFSET_F2_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F2_2 *reg = (regPP_CUBIC_OFFSET_F2_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F2_3 regPP_CUBIC_OFFSET_F2_3;

__inline void dump_PP_CUBIC_OFFSET_F2_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F2_3 *reg = (regPP_CUBIC_OFFSET_F2_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F2_4 regPP_CUBIC_OFFSET_F2_4;

__inline void dump_PP_CUBIC_OFFSET_F2_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F2_4 *reg = (regPP_CUBIC_OFFSET_F2_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F2_5 regPP_CUBIC_OFFSET_F2_5;

__inline void dump_PP_CUBIC_OFFSET_F2_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F2_5 *reg = (regPP_CUBIC_OFFSET_F2_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F3_0 regPP_CUBIC_OFFSET_F3_0;

__inline void dump_PP_CUBIC_OFFSET_F3_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F3_0 *reg = (regPP_CUBIC_OFFSET_F3_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F3_1 regPP_CUBIC_OFFSET_F3_1;

__inline void dump_PP_CUBIC_OFFSET_F3_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F3_1 *reg = (regPP_CUBIC_OFFSET_F3_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F3_2 regPP_CUBIC_OFFSET_F3_2;

__inline void dump_PP_CUBIC_OFFSET_F3_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F3_2 *reg = (regPP_CUBIC_OFFSET_F3_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F3_3 regPP_CUBIC_OFFSET_F3_3;

__inline void dump_PP_CUBIC_OFFSET_F3_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F3_3 *reg = (regPP_CUBIC_OFFSET_F3_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F3_4 regPP_CUBIC_OFFSET_F3_4;

__inline void dump_PP_CUBIC_OFFSET_F3_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F3_4 *reg = (regPP_CUBIC_OFFSET_F3_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F3_5 regPP_CUBIC_OFFSET_F3_5;

__inline void dump_PP_CUBIC_OFFSET_F3_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F3_5 *reg = (regPP_CUBIC_OFFSET_F3_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F4_0 regPP_CUBIC_OFFSET_F4_0;

__inline void dump_PP_CUBIC_OFFSET_F4_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F4_0 *reg = (regPP_CUBIC_OFFSET_F4_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F4_1 regPP_CUBIC_OFFSET_F4_1;

__inline void dump_PP_CUBIC_OFFSET_F4_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F4_1 *reg = (regPP_CUBIC_OFFSET_F4_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F4_2 regPP_CUBIC_OFFSET_F4_2;

__inline void dump_PP_CUBIC_OFFSET_F4_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F4_2 *reg = (regPP_CUBIC_OFFSET_F4_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F4_3 regPP_CUBIC_OFFSET_F4_3;

__inline void dump_PP_CUBIC_OFFSET_F4_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F4_3 *reg = (regPP_CUBIC_OFFSET_F4_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F4_4 regPP_CUBIC_OFFSET_F4_4;

__inline void dump_PP_CUBIC_OFFSET_F4_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F4_4 *reg = (regPP_CUBIC_OFFSET_F4_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F4_5 regPP_CUBIC_OFFSET_F4_5;

__inline void dump_PP_CUBIC_OFFSET_F4_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F4_5 *reg = (regPP_CUBIC_OFFSET_F4_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F5_0 regPP_CUBIC_OFFSET_F5_0;

__inline void dump_PP_CUBIC_OFFSET_F5_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F5_0 *reg = (regPP_CUBIC_OFFSET_F5_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F5_1 regPP_CUBIC_OFFSET_F5_1;

__inline void dump_PP_CUBIC_OFFSET_F5_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F5_1 *reg = (regPP_CUBIC_OFFSET_F5_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F5_2 regPP_CUBIC_OFFSET_F5_2;

__inline void dump_PP_CUBIC_OFFSET_F5_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F5_2 *reg = (regPP_CUBIC_OFFSET_F5_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F5_3 regPP_CUBIC_OFFSET_F5_3;

__inline void dump_PP_CUBIC_OFFSET_F5_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F5_3 *reg = (regPP_CUBIC_OFFSET_F5_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F5_4 regPP_CUBIC_OFFSET_F5_4;

__inline void dump_PP_CUBIC_OFFSET_F5_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F5_4 *reg = (regPP_CUBIC_OFFSET_F5_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_CUBIC_OFFSET_F5_5 regPP_CUBIC_OFFSET_F5_5;

__inline void dump_PP_CUBIC_OFFSET_F5_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_CUBIC_OFFSET_F5_5 *reg = (regPP_CUBIC_OFFSET_F5_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ENDIAN_SWAP:%x", buff, reg->bitfields.ENDIAN_SWAP);
  sprintf(buff,"%s MACRO_TILE:%x", buff, reg->bitfields.MACRO_TILE);
  sprintf(buff,"%s MICRO_TILE:%x", buff, reg->bitfields.MICRO_TILE);
  sprintf(buff,"%s FACE_OFFSET:%x", buff, reg->bitfields.FACE_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TAM_DEBUG0 regPP_TAM_DEBUG0;

__inline void dump_PP_TAM_DEBUG0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TAM_DEBUG0 *reg = (regPP_TAM_DEBUG0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TAM_DEBUG1 regPP_TAM_DEBUG1;

__inline void dump_PP_TAM_DEBUG1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TAM_DEBUG1 *reg = (regPP_TAM_DEBUG1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TAM_DEBUG2 regPP_TAM_DEBUG2;

__inline void dump_PP_TAM_DEBUG2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TAM_DEBUG2 *reg = (regPP_TAM_DEBUG2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TDM_DEBUG0 regPP_TDM_DEBUG0;

__inline void dump_PP_TDM_DEBUG0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TDM_DEBUG0 *reg = (regPP_TDM_DEBUG0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TDM_DEBUG1 regPP_TDM_DEBUG1;

__inline void dump_PP_TDM_DEBUG1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TDM_DEBUG1 *reg = (regPP_TDM_DEBUG1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TDM_DEBUG2 regPP_TDM_DEBUG2;

__inline void dump_PP_TDM_DEBUG2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TDM_DEBUG2 *reg = (regPP_TDM_DEBUG2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PB_DEBUG0 regPP_PB_DEBUG0;

__inline void dump_PP_PB_DEBUG0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PB_DEBUG0 *reg = (regPP_PB_DEBUG0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PB_DEBUG1 regPP_PB_DEBUG1;

__inline void dump_PP_PB_DEBUG1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PB_DEBUG1 *reg = (regPP_PB_DEBUG1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PB_DEBUG2 regPP_PB_DEBUG2;

__inline void dump_PP_PB_DEBUG2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PB_DEBUG2 *reg = (regPP_PB_DEBUG2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TAM_DEBUG3 regPP_TAM_DEBUG3;

__inline void dump_PP_TAM_DEBUG3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TAM_DEBUG3 *reg = (regPP_TAM_DEBUG3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TDM_DEBUG3 regPP_TDM_DEBUG3;

__inline void dump_PP_TDM_DEBUG3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TDM_DEBUG3 *reg = (regPP_TDM_DEBUG3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PB_DEBUG3 regPP_PB_DEBUG3;

__inline void dump_PP_PB_DEBUG3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PB_DEBUG3 *reg = (regPP_PB_DEBUG3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_0 regPP_SRC_OFFSET_0;

__inline void dump_PP_SRC_OFFSET_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_0 *reg = (regPP_SRC_OFFSET_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_1 regPP_SRC_OFFSET_1;

__inline void dump_PP_SRC_OFFSET_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_1 *reg = (regPP_SRC_OFFSET_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_2 regPP_SRC_OFFSET_2;

__inline void dump_PP_SRC_OFFSET_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_2 *reg = (regPP_SRC_OFFSET_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_3 regPP_SRC_OFFSET_3;

__inline void dump_PP_SRC_OFFSET_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_3 *reg = (regPP_SRC_OFFSET_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_4 regPP_SRC_OFFSET_4;

__inline void dump_PP_SRC_OFFSET_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_4 *reg = (regPP_SRC_OFFSET_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_5 regPP_SRC_OFFSET_5;

__inline void dump_PP_SRC_OFFSET_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_5 *reg = (regPP_SRC_OFFSET_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_6 regPP_SRC_OFFSET_6;

__inline void dump_PP_SRC_OFFSET_6(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_6 *reg = (regPP_SRC_OFFSET_6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_7 regPP_SRC_OFFSET_7;

__inline void dump_PP_SRC_OFFSET_7(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_7 *reg = (regPP_SRC_OFFSET_7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_8 regPP_SRC_OFFSET_8;

__inline void dump_PP_SRC_OFFSET_8(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_8 *reg = (regPP_SRC_OFFSET_8 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_9 regPP_SRC_OFFSET_9;

__inline void dump_PP_SRC_OFFSET_9(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_9 *reg = (regPP_SRC_OFFSET_9 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_10 regPP_SRC_OFFSET_10;

__inline void dump_PP_SRC_OFFSET_10(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_10 *reg = (regPP_SRC_OFFSET_10 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_11 regPP_SRC_OFFSET_11;

__inline void dump_PP_SRC_OFFSET_11(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_11 *reg = (regPP_SRC_OFFSET_11 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_12 regPP_SRC_OFFSET_12;

__inline void dump_PP_SRC_OFFSET_12(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_12 *reg = (regPP_SRC_OFFSET_12 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_13 regPP_SRC_OFFSET_13;

__inline void dump_PP_SRC_OFFSET_13(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_13 *reg = (regPP_SRC_OFFSET_13 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_14 regPP_SRC_OFFSET_14;

__inline void dump_PP_SRC_OFFSET_14(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_14 *reg = (regPP_SRC_OFFSET_14 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_15 regPP_SRC_OFFSET_15;

__inline void dump_PP_SRC_OFFSET_15(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_15 *reg = (regPP_SRC_OFFSET_15 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_16 regPP_SRC_OFFSET_16;

__inline void dump_PP_SRC_OFFSET_16(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_16 *reg = (regPP_SRC_OFFSET_16 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_SRC_OFFSET_17 regPP_SRC_OFFSET_17;

__inline void dump_PP_SRC_OFFSET_17(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_SRC_OFFSET_17 *reg = (regPP_SRC_OFFSET_17 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TFACTOR_SIGN regPP_TFACTOR_SIGN;

__inline void dump_PP_TFACTOR_SIGN(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TFACTOR_SIGN *reg = (regPP_TFACTOR_SIGN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SGN_TF0_B:%x", buff, reg->bitfields.SGN_TF0_B);
  sprintf(buff,"%s SGN_TF0_G:%x", buff, reg->bitfields.SGN_TF0_G);
  sprintf(buff,"%s SGN_TF0_R:%x", buff, reg->bitfields.SGN_TF0_R);
  sprintf(buff,"%s SGN_TF0_A:%x", buff, reg->bitfields.SGN_TF0_A);
  sprintf(buff,"%s SGN_TF1_B:%x", buff, reg->bitfields.SGN_TF1_B);
  sprintf(buff,"%s SGN_TF1_G:%x", buff, reg->bitfields.SGN_TF1_G);
  sprintf(buff,"%s SGN_TF1_R:%x", buff, reg->bitfields.SGN_TF1_R);
  sprintf(buff,"%s SGN_TF1_A:%x", buff, reg->bitfields.SGN_TF1_A);
  sprintf(buff,"%s SGN_TF2_B:%x", buff, reg->bitfields.SGN_TF2_B);
  sprintf(buff,"%s SGN_TF2_G:%x", buff, reg->bitfields.SGN_TF2_G);
  sprintf(buff,"%s SGN_TF2_R:%x", buff, reg->bitfields.SGN_TF2_R);
  sprintf(buff,"%s SGN_TF2_A:%x", buff, reg->bitfields.SGN_TF2_A);
  sprintf(buff,"%s SGN_TF3_B:%x", buff, reg->bitfields.SGN_TF3_B);
  sprintf(buff,"%s SGN_TF3_G:%x", buff, reg->bitfields.SGN_TF3_G);
  sprintf(buff,"%s SGN_TF3_R:%x", buff, reg->bitfields.SGN_TF3_R);
  sprintf(buff,"%s SGN_TF3_A:%x", buff, reg->bitfields.SGN_TF3_A);
  sprintf(buff,"%s SGN_TF4_B:%x", buff, reg->bitfields.SGN_TF4_B);
  sprintf(buff,"%s SGN_TF4_G:%x", buff, reg->bitfields.SGN_TF4_G);
  sprintf(buff,"%s SGN_TF4_R:%x", buff, reg->bitfields.SGN_TF4_R);
  sprintf(buff,"%s SGN_TF4_A:%x", buff, reg->bitfields.SGN_TF4_A);
  sprintf(buff,"%s SGN_TF5_B:%x", buff, reg->bitfields.SGN_TF5_B);
  sprintf(buff,"%s SGN_TF5_G:%x", buff, reg->bitfields.SGN_TF5_G);
  sprintf(buff,"%s SGN_TF5_R:%x", buff, reg->bitfields.SGN_TF5_R);
  sprintf(buff,"%s SGN_TF5_A:%x", buff, reg->bitfields.SGN_TF5_A);
  sprintf(buff,"%s SGN_TF6_B:%x", buff, reg->bitfields.SGN_TF6_B);
  sprintf(buff,"%s SGN_TF6_G:%x", buff, reg->bitfields.SGN_TF6_G);
  sprintf(buff,"%s SGN_TF6_R:%x", buff, reg->bitfields.SGN_TF6_R);
  sprintf(buff,"%s SGN_TF6_A:%x", buff, reg->bitfields.SGN_TF6_A);
  sprintf(buff,"%s SGN_TF7_B:%x", buff, reg->bitfields.SGN_TF7_B);
  sprintf(buff,"%s SGN_TF7_G:%x", buff, reg->bitfields.SGN_TF7_G);
  sprintf(buff,"%s SGN_TF7_R:%x", buff, reg->bitfields.SGN_TF7_R);
  sprintf(buff,"%s SGN_TF7_A:%x", buff, reg->bitfields.SGN_TF7_A);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TFACTOR_0 regPP_TFACTOR_0;

__inline void dump_PP_TFACTOR_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TFACTOR_0 *reg = (regPP_TFACTOR_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TFACTOR_1 regPP_TFACTOR_1;

__inline void dump_PP_TFACTOR_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TFACTOR_1 *reg = (regPP_TFACTOR_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TFACTOR_2 regPP_TFACTOR_2;

__inline void dump_PP_TFACTOR_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TFACTOR_2 *reg = (regPP_TFACTOR_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TFACTOR_3 regPP_TFACTOR_3;

__inline void dump_PP_TFACTOR_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TFACTOR_3 *reg = (regPP_TFACTOR_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TFACTOR_4 regPP_TFACTOR_4;

__inline void dump_PP_TFACTOR_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TFACTOR_4 *reg = (regPP_TFACTOR_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TFACTOR_5 regPP_TFACTOR_5;

__inline void dump_PP_TFACTOR_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TFACTOR_5 *reg = (regPP_TFACTOR_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TFACTOR_6 regPP_TFACTOR_6;

__inline void dump_PP_TFACTOR_6(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TFACTOR_6 *reg = (regPP_TFACTOR_6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_TFACTOR_7 regPP_TFACTOR_7;

__inline void dump_PP_TFACTOR_7(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_TFACTOR_7 *reg = (regPP_TFACTOR_7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I0_C0 regPP_PIXSHADER_I0_C0;

__inline void dump_PP_PIXSHADER_I0_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I0_C0 *reg = (regPP_PIXSHADER_I0_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I1_C0 regPP_PIXSHADER_I1_C0;

__inline void dump_PP_PIXSHADER_I1_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I1_C0 *reg = (regPP_PIXSHADER_I1_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I2_C0 regPP_PIXSHADER_I2_C0;

__inline void dump_PP_PIXSHADER_I2_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I2_C0 *reg = (regPP_PIXSHADER_I2_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I3_C0 regPP_PIXSHADER_I3_C0;

__inline void dump_PP_PIXSHADER_I3_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I3_C0 *reg = (regPP_PIXSHADER_I3_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I4_C0 regPP_PIXSHADER_I4_C0;

__inline void dump_PP_PIXSHADER_I4_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I4_C0 *reg = (regPP_PIXSHADER_I4_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I5_C0 regPP_PIXSHADER_I5_C0;

__inline void dump_PP_PIXSHADER_I5_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I5_C0 *reg = (regPP_PIXSHADER_I5_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I6_C0 regPP_PIXSHADER_I6_C0;

__inline void dump_PP_PIXSHADER_I6_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I6_C0 *reg = (regPP_PIXSHADER_I6_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I7_C0 regPP_PIXSHADER_I7_C0;

__inline void dump_PP_PIXSHADER_I7_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I7_C0 *reg = (regPP_PIXSHADER_I7_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I0_C1 regPP_PIXSHADER_I0_C1;

__inline void dump_PP_PIXSHADER_I0_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I0_C1 *reg = (regPP_PIXSHADER_I0_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I1_C1 regPP_PIXSHADER_I1_C1;

__inline void dump_PP_PIXSHADER_I1_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I1_C1 *reg = (regPP_PIXSHADER_I1_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I2_C1 regPP_PIXSHADER_I2_C1;

__inline void dump_PP_PIXSHADER_I2_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I2_C1 *reg = (regPP_PIXSHADER_I2_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I3_C1 regPP_PIXSHADER_I3_C1;

__inline void dump_PP_PIXSHADER_I3_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I3_C1 *reg = (regPP_PIXSHADER_I3_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I4_C1 regPP_PIXSHADER_I4_C1;

__inline void dump_PP_PIXSHADER_I4_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I4_C1 *reg = (regPP_PIXSHADER_I4_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I5_C1 regPP_PIXSHADER_I5_C1;

__inline void dump_PP_PIXSHADER_I5_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I5_C1 *reg = (regPP_PIXSHADER_I5_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I6_C1 regPP_PIXSHADER_I6_C1;

__inline void dump_PP_PIXSHADER_I6_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I6_C1 *reg = (regPP_PIXSHADER_I6_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I7_C1 regPP_PIXSHADER_I7_C1;

__inline void dump_PP_PIXSHADER_I7_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I7_C1 *reg = (regPP_PIXSHADER_I7_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I0_A0 regPP_PIXSHADER_I0_A0;

__inline void dump_PP_PIXSHADER_I0_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I0_A0 *reg = (regPP_PIXSHADER_I0_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I1_A0 regPP_PIXSHADER_I1_A0;

__inline void dump_PP_PIXSHADER_I1_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I1_A0 *reg = (regPP_PIXSHADER_I1_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I2_A0 regPP_PIXSHADER_I2_A0;

__inline void dump_PP_PIXSHADER_I2_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I2_A0 *reg = (regPP_PIXSHADER_I2_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I3_A0 regPP_PIXSHADER_I3_A0;

__inline void dump_PP_PIXSHADER_I3_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I3_A0 *reg = (regPP_PIXSHADER_I3_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I4_A0 regPP_PIXSHADER_I4_A0;

__inline void dump_PP_PIXSHADER_I4_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I4_A0 *reg = (regPP_PIXSHADER_I4_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I5_A0 regPP_PIXSHADER_I5_A0;

__inline void dump_PP_PIXSHADER_I5_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I5_A0 *reg = (regPP_PIXSHADER_I5_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I6_A0 regPP_PIXSHADER_I6_A0;

__inline void dump_PP_PIXSHADER_I6_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I6_A0 *reg = (regPP_PIXSHADER_I6_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I7_A0 regPP_PIXSHADER_I7_A0;

__inline void dump_PP_PIXSHADER_I7_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I7_A0 *reg = (regPP_PIXSHADER_I7_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I0_A1 regPP_PIXSHADER_I0_A1;

__inline void dump_PP_PIXSHADER_I0_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I0_A1 *reg = (regPP_PIXSHADER_I0_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I1_A1 regPP_PIXSHADER_I1_A1;

__inline void dump_PP_PIXSHADER_I1_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I1_A1 *reg = (regPP_PIXSHADER_I1_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I2_A1 regPP_PIXSHADER_I2_A1;

__inline void dump_PP_PIXSHADER_I2_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I2_A1 *reg = (regPP_PIXSHADER_I2_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I3_A1 regPP_PIXSHADER_I3_A1;

__inline void dump_PP_PIXSHADER_I3_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I3_A1 *reg = (regPP_PIXSHADER_I3_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I4_A1 regPP_PIXSHADER_I4_A1;

__inline void dump_PP_PIXSHADER_I4_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I4_A1 *reg = (regPP_PIXSHADER_I4_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I5_A1 regPP_PIXSHADER_I5_A1;

__inline void dump_PP_PIXSHADER_I5_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I5_A1 *reg = (regPP_PIXSHADER_I5_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I6_A1 regPP_PIXSHADER_I6_A1;

__inline void dump_PP_PIXSHADER_I6_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I6_A1 *reg = (regPP_PIXSHADER_I6_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_PIXSHADER_I7_A1 regPP_PIXSHADER_I7_A1;

__inline void dump_PP_PIXSHADER_I7_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_PIXSHADER_I7_A1 *reg = (regPP_PIXSHADER_I7_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I0_C0 regPP_ADRSHADER_I0_C0;

__inline void dump_PP_ADRSHADER_I0_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I0_C0 *reg = (regPP_ADRSHADER_I0_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I1_C0 regPP_ADRSHADER_I1_C0;

__inline void dump_PP_ADRSHADER_I1_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I1_C0 *reg = (regPP_ADRSHADER_I1_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I2_C0 regPP_ADRSHADER_I2_C0;

__inline void dump_PP_ADRSHADER_I2_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I2_C0 *reg = (regPP_ADRSHADER_I2_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I3_C0 regPP_ADRSHADER_I3_C0;

__inline void dump_PP_ADRSHADER_I3_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I3_C0 *reg = (regPP_ADRSHADER_I3_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I4_C0 regPP_ADRSHADER_I4_C0;

__inline void dump_PP_ADRSHADER_I4_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I4_C0 *reg = (regPP_ADRSHADER_I4_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I5_C0 regPP_ADRSHADER_I5_C0;

__inline void dump_PP_ADRSHADER_I5_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I5_C0 *reg = (regPP_ADRSHADER_I5_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I6_C0 regPP_ADRSHADER_I6_C0;

__inline void dump_PP_ADRSHADER_I6_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I6_C0 *reg = (regPP_ADRSHADER_I6_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I7_C0 regPP_ADRSHADER_I7_C0;

__inline void dump_PP_ADRSHADER_I7_C0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I7_C0 *reg = (regPP_ADRSHADER_I7_C0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLOR_ARG_A:%x", buff, reg->bitfields.COLOR_ARG_A);
  sprintf(buff,"%s COLOR_ARG_B:%x", buff, reg->bitfields.COLOR_ARG_B);
  sprintf(buff,"%s COLOR_ARG_C:%x", buff, reg->bitfields.COLOR_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I0_C1 regPP_ADRSHADER_I0_C1;

__inline void dump_PP_ADRSHADER_I0_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I0_C1 *reg = (regPP_ADRSHADER_I0_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I1_C1 regPP_ADRSHADER_I1_C1;

__inline void dump_PP_ADRSHADER_I1_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I1_C1 *reg = (regPP_ADRSHADER_I1_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I2_C1 regPP_ADRSHADER_I2_C1;

__inline void dump_PP_ADRSHADER_I2_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I2_C1 *reg = (regPP_ADRSHADER_I2_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I3_C1 regPP_ADRSHADER_I3_C1;

__inline void dump_PP_ADRSHADER_I3_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I3_C1 *reg = (regPP_ADRSHADER_I3_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I4_C1 regPP_ADRSHADER_I4_C1;

__inline void dump_PP_ADRSHADER_I4_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I4_C1 *reg = (regPP_ADRSHADER_I4_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I5_C1 regPP_ADRSHADER_I5_C1;

__inline void dump_PP_ADRSHADER_I5_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I5_C1 *reg = (regPP_ADRSHADER_I5_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I6_C1 regPP_ADRSHADER_I6_C1;

__inline void dump_PP_ADRSHADER_I6_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I6_C1 *reg = (regPP_ADRSHADER_I6_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I7_C1 regPP_ADRSHADER_I7_C1;

__inline void dump_PP_ADRSHADER_I7_C1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I7_C1 *reg = (regPP_ADRSHADER_I7_C1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s OUTPUT_MASK:%x", buff, reg->bitfields.OUTPUT_MASK);
  sprintf(buff,"%s OUTPUT_ROTATE:%x", buff, reg->bitfields.OUTPUT_ROTATE);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I0_A0 regPP_ADRSHADER_I0_A0;

__inline void dump_PP_ADRSHADER_I0_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I0_A0 *reg = (regPP_ADRSHADER_I0_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I1_A0 regPP_ADRSHADER_I1_A0;

__inline void dump_PP_ADRSHADER_I1_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I1_A0 *reg = (regPP_ADRSHADER_I1_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I2_A0 regPP_ADRSHADER_I2_A0;

__inline void dump_PP_ADRSHADER_I2_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I2_A0 *reg = (regPP_ADRSHADER_I2_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I3_A0 regPP_ADRSHADER_I3_A0;

__inline void dump_PP_ADRSHADER_I3_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I3_A0 *reg = (regPP_ADRSHADER_I3_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I4_A0 regPP_ADRSHADER_I4_A0;

__inline void dump_PP_ADRSHADER_I4_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I4_A0 *reg = (regPP_ADRSHADER_I4_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I5_A0 regPP_ADRSHADER_I5_A0;

__inline void dump_PP_ADRSHADER_I5_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I5_A0 *reg = (regPP_ADRSHADER_I5_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I6_A0 regPP_ADRSHADER_I6_A0;

__inline void dump_PP_ADRSHADER_I6_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I6_A0 *reg = (regPP_ADRSHADER_I6_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I7_A0 regPP_ADRSHADER_I7_A0;

__inline void dump_PP_ADRSHADER_I7_A0(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I7_A0 *reg = (regPP_ADRSHADER_I7_A0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_ARG_A:%x", buff, reg->bitfields.ALPHA_ARG_A);
  sprintf(buff,"%s ALPHA_ARG_B:%x", buff, reg->bitfields.ALPHA_ARG_B);
  sprintf(buff,"%s ALPHA_ARG_C:%x", buff, reg->bitfields.ALPHA_ARG_C);
  sprintf(buff,"%s COMP_ARG_A:%x", buff, reg->bitfields.COMP_ARG_A);
  sprintf(buff,"%s BIAS_ARG_A:%x", buff, reg->bitfields.BIAS_ARG_A);
  sprintf(buff,"%s SCALE_ARG_A:%x", buff, reg->bitfields.SCALE_ARG_A);
  sprintf(buff,"%s NEG_ARG_A:%x", buff, reg->bitfields.NEG_ARG_A);
  sprintf(buff,"%s COMP_ARG_B:%x", buff, reg->bitfields.COMP_ARG_B);
  sprintf(buff,"%s BIAS_ARG_B:%x", buff, reg->bitfields.BIAS_ARG_B);
  sprintf(buff,"%s SCALE_ARG_B:%x", buff, reg->bitfields.SCALE_ARG_B);
  sprintf(buff,"%s NEG_ARG_B:%x", buff, reg->bitfields.NEG_ARG_B);
  sprintf(buff,"%s COMP_ARG_C:%x", buff, reg->bitfields.COMP_ARG_C);
  sprintf(buff,"%s BIAS_ARG_C:%x", buff, reg->bitfields.BIAS_ARG_C);
  sprintf(buff,"%s SCALE_ARG_C:%x", buff, reg->bitfields.SCALE_ARG_C);
  sprintf(buff,"%s NEG_ARG_C:%x", buff, reg->bitfields.NEG_ARG_C);
  sprintf(buff,"%s BLEND_CTL:%x", buff, reg->bitfields.BLEND_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I0_A1 regPP_ADRSHADER_I0_A1;

__inline void dump_PP_ADRSHADER_I0_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I0_A1 *reg = (regPP_ADRSHADER_I0_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I1_A1 regPP_ADRSHADER_I1_A1;

__inline void dump_PP_ADRSHADER_I1_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I1_A1 *reg = (regPP_ADRSHADER_I1_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I2_A1 regPP_ADRSHADER_I2_A1;

__inline void dump_PP_ADRSHADER_I2_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I2_A1 *reg = (regPP_ADRSHADER_I2_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I3_A1 regPP_ADRSHADER_I3_A1;

__inline void dump_PP_ADRSHADER_I3_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I3_A1 *reg = (regPP_ADRSHADER_I3_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I4_A1 regPP_ADRSHADER_I4_A1;

__inline void dump_PP_ADRSHADER_I4_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I4_A1 *reg = (regPP_ADRSHADER_I4_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I5_A1 regPP_ADRSHADER_I5_A1;

__inline void dump_PP_ADRSHADER_I5_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I5_A1 *reg = (regPP_ADRSHADER_I5_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I6_A1 regPP_ADRSHADER_I6_A1;

__inline void dump_PP_ADRSHADER_I6_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I6_A1 *reg = (regPP_ADRSHADER_I6_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PP_ADRSHADER_I7_A1 regPP_ADRSHADER_I7_A1;

__inline void dump_PP_ADRSHADER_I7_A1(__in  unsigned int *dwreg, __in  char *buff)
{
  regPP_ADRSHADER_I7_A1 *reg = (regPP_ADRSHADER_I7_A1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s F0_SEL:%x", buff, reg->bitfields.F0_SEL);
  sprintf(buff,"%s F1_SEL:%x", buff, reg->bitfields.F1_SEL);
  sprintf(buff,"%s OUTPUT_SCALE:%x", buff, reg->bitfields.OUTPUT_SCALE);
  sprintf(buff,"%s OUTPUT_CLAMP:%x", buff, reg->bitfields.OUTPUT_CLAMP);
  sprintf(buff,"%s OUTPUT_SELECT:%x", buff, reg->bitfields.OUTPUT_SELECT);
  sprintf(buff,"%s DOT_ALPHA:%x", buff, reg->bitfields.DOT_ALPHA);
  sprintf(buff,"%s REPLICATE_ARG_A:%x", buff, reg->bitfields.REPLICATE_ARG_A);
  sprintf(buff,"%s REPLICATE_ARG_B:%x", buff, reg->bitfields.REPLICATE_ARG_B);
  sprintf(buff,"%s REPLICATE_ARG_C:%x", buff, reg->bitfields.REPLICATE_ARG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_ROP regRB2D_ROP;

__inline void dump_RB2D_ROP(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_ROP *reg = (regRB2D_ROP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_CLRCMP_SRC regRB2D_CLRCMP_SRC;

__inline void dump_RB2D_CLRCMP_SRC(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_CLRCMP_SRC *reg = (regRB2D_CLRCMP_SRC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_CLRCMP_DST regRB2D_CLRCMP_DST;

__inline void dump_RB2D_CLRCMP_DST(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_CLRCMP_DST *reg = (regRB2D_CLRCMP_DST *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_CLRCMP_FLIPE regRB2D_CLRCMP_FLIPE;

__inline void dump_RB2D_CLRCMP_FLIPE(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_CLRCMP_FLIPE *reg = (regRB2D_CLRCMP_FLIPE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_CLRCMP_CNTL regRB2D_CLRCMP_CNTL;

__inline void dump_RB2D_CLRCMP_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_CLRCMP_CNTL *reg = (regRB2D_CLRCMP_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FCN_SRC:%x", buff, reg->bitfields.FCN_SRC);
  sprintf(buff,"%s FCN_DST:%x", buff, reg->bitfields.FCN_DST);
  sprintf(buff,"%s SRC:%x", buff, reg->bitfields.SRC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_CLRCMP_MSK regRB2D_CLRCMP_MSK;

__inline void dump_RB2D_CLRCMP_MSK(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_CLRCMP_MSK *reg = (regRB2D_CLRCMP_MSK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_WRITEMASK regRB2D_WRITEMASK;

__inline void dump_RB2D_WRITEMASK(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_WRITEMASK *reg = (regRB2D_WRITEMASK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_DATATYPE regRB2D_DATATYPE;

__inline void dump_RB2D_DATATYPE(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_DATATYPE *reg = (regRB2D_DATATYPE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DP_DST_DATATYPE:%x", buff, reg->bitfields.DP_DST_DATATYPE);
  sprintf(buff,"%s DP_BRUSH_DATATYPE:%x", buff, reg->bitfields.DP_BRUSH_DATATYPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_GUI_MASTER_CNTL regRB2D_GUI_MASTER_CNTL;

__inline void dump_RB2D_GUI_MASTER_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_GUI_MASTER_CNTL *reg = (regRB2D_GUI_MASTER_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GMC_BRUSH_DATATYPE:%x", buff, reg->bitfields.GMC_BRUSH_DATATYPE);
  sprintf(buff,"%s GMC_DST_DATATYPE:%x", buff, reg->bitfields.GMC_DST_DATATYPE);
  sprintf(buff,"%s GMC_ROP:%x", buff, reg->bitfields.GMC_ROP);
  sprintf(buff,"%s GMC_CLR_CMP_FCN_DIS:%x", buff, reg->bitfields.GMC_CLR_CMP_FCN_DIS);
  sprintf(buff,"%s GMC_WR_MSK_DIS:%x", buff, reg->bitfields.GMC_WR_MSK_DIS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_0 regRB2D_BRUSHDATA_0;

__inline void dump_RB2D_BRUSHDATA_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_0 *reg = (regRB2D_BRUSHDATA_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_1 regRB2D_BRUSHDATA_1;

__inline void dump_RB2D_BRUSHDATA_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_1 *reg = (regRB2D_BRUSHDATA_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_2 regRB2D_BRUSHDATA_2;

__inline void dump_RB2D_BRUSHDATA_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_2 *reg = (regRB2D_BRUSHDATA_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_3 regRB2D_BRUSHDATA_3;

__inline void dump_RB2D_BRUSHDATA_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_3 *reg = (regRB2D_BRUSHDATA_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_4 regRB2D_BRUSHDATA_4;

__inline void dump_RB2D_BRUSHDATA_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_4 *reg = (regRB2D_BRUSHDATA_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_5 regRB2D_BRUSHDATA_5;

__inline void dump_RB2D_BRUSHDATA_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_5 *reg = (regRB2D_BRUSHDATA_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_6 regRB2D_BRUSHDATA_6;

__inline void dump_RB2D_BRUSHDATA_6(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_6 *reg = (regRB2D_BRUSHDATA_6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_7 regRB2D_BRUSHDATA_7;

__inline void dump_RB2D_BRUSHDATA_7(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_7 *reg = (regRB2D_BRUSHDATA_7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_8 regRB2D_BRUSHDATA_8;

__inline void dump_RB2D_BRUSHDATA_8(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_8 *reg = (regRB2D_BRUSHDATA_8 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_9 regRB2D_BRUSHDATA_9;

__inline void dump_RB2D_BRUSHDATA_9(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_9 *reg = (regRB2D_BRUSHDATA_9 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_10 regRB2D_BRUSHDATA_10;

__inline void dump_RB2D_BRUSHDATA_10(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_10 *reg = (regRB2D_BRUSHDATA_10 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_11 regRB2D_BRUSHDATA_11;

__inline void dump_RB2D_BRUSHDATA_11(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_11 *reg = (regRB2D_BRUSHDATA_11 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_12 regRB2D_BRUSHDATA_12;

__inline void dump_RB2D_BRUSHDATA_12(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_12 *reg = (regRB2D_BRUSHDATA_12 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_13 regRB2D_BRUSHDATA_13;

__inline void dump_RB2D_BRUSHDATA_13(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_13 *reg = (regRB2D_BRUSHDATA_13 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_14 regRB2D_BRUSHDATA_14;

__inline void dump_RB2D_BRUSHDATA_14(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_14 *reg = (regRB2D_BRUSHDATA_14 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_15 regRB2D_BRUSHDATA_15;

__inline void dump_RB2D_BRUSHDATA_15(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_15 *reg = (regRB2D_BRUSHDATA_15 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_16 regRB2D_BRUSHDATA_16;

__inline void dump_RB2D_BRUSHDATA_16(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_16 *reg = (regRB2D_BRUSHDATA_16 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_17 regRB2D_BRUSHDATA_17;

__inline void dump_RB2D_BRUSHDATA_17(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_17 *reg = (regRB2D_BRUSHDATA_17 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_18 regRB2D_BRUSHDATA_18;

__inline void dump_RB2D_BRUSHDATA_18(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_18 *reg = (regRB2D_BRUSHDATA_18 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_19 regRB2D_BRUSHDATA_19;

__inline void dump_RB2D_BRUSHDATA_19(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_19 *reg = (regRB2D_BRUSHDATA_19 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_20 regRB2D_BRUSHDATA_20;

__inline void dump_RB2D_BRUSHDATA_20(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_20 *reg = (regRB2D_BRUSHDATA_20 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_21 regRB2D_BRUSHDATA_21;

__inline void dump_RB2D_BRUSHDATA_21(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_21 *reg = (regRB2D_BRUSHDATA_21 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_22 regRB2D_BRUSHDATA_22;

__inline void dump_RB2D_BRUSHDATA_22(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_22 *reg = (regRB2D_BRUSHDATA_22 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_23 regRB2D_BRUSHDATA_23;

__inline void dump_RB2D_BRUSHDATA_23(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_23 *reg = (regRB2D_BRUSHDATA_23 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_24 regRB2D_BRUSHDATA_24;

__inline void dump_RB2D_BRUSHDATA_24(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_24 *reg = (regRB2D_BRUSHDATA_24 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_25 regRB2D_BRUSHDATA_25;

__inline void dump_RB2D_BRUSHDATA_25(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_25 *reg = (regRB2D_BRUSHDATA_25 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_26 regRB2D_BRUSHDATA_26;

__inline void dump_RB2D_BRUSHDATA_26(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_26 *reg = (regRB2D_BRUSHDATA_26 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_27 regRB2D_BRUSHDATA_27;

__inline void dump_RB2D_BRUSHDATA_27(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_27 *reg = (regRB2D_BRUSHDATA_27 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_28 regRB2D_BRUSHDATA_28;

__inline void dump_RB2D_BRUSHDATA_28(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_28 *reg = (regRB2D_BRUSHDATA_28 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_29 regRB2D_BRUSHDATA_29;

__inline void dump_RB2D_BRUSHDATA_29(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_29 *reg = (regRB2D_BRUSHDATA_29 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_30 regRB2D_BRUSHDATA_30;

__inline void dump_RB2D_BRUSHDATA_30(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_30 *reg = (regRB2D_BRUSHDATA_30 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_31 regRB2D_BRUSHDATA_31;

__inline void dump_RB2D_BRUSHDATA_31(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_31 *reg = (regRB2D_BRUSHDATA_31 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_32 regRB2D_BRUSHDATA_32;

__inline void dump_RB2D_BRUSHDATA_32(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_32 *reg = (regRB2D_BRUSHDATA_32 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_33 regRB2D_BRUSHDATA_33;

__inline void dump_RB2D_BRUSHDATA_33(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_33 *reg = (regRB2D_BRUSHDATA_33 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_34 regRB2D_BRUSHDATA_34;

__inline void dump_RB2D_BRUSHDATA_34(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_34 *reg = (regRB2D_BRUSHDATA_34 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_35 regRB2D_BRUSHDATA_35;

__inline void dump_RB2D_BRUSHDATA_35(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_35 *reg = (regRB2D_BRUSHDATA_35 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_36 regRB2D_BRUSHDATA_36;

__inline void dump_RB2D_BRUSHDATA_36(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_36 *reg = (regRB2D_BRUSHDATA_36 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_37 regRB2D_BRUSHDATA_37;

__inline void dump_RB2D_BRUSHDATA_37(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_37 *reg = (regRB2D_BRUSHDATA_37 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_38 regRB2D_BRUSHDATA_38;

__inline void dump_RB2D_BRUSHDATA_38(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_38 *reg = (regRB2D_BRUSHDATA_38 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_39 regRB2D_BRUSHDATA_39;

__inline void dump_RB2D_BRUSHDATA_39(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_39 *reg = (regRB2D_BRUSHDATA_39 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_40 regRB2D_BRUSHDATA_40;

__inline void dump_RB2D_BRUSHDATA_40(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_40 *reg = (regRB2D_BRUSHDATA_40 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_41 regRB2D_BRUSHDATA_41;

__inline void dump_RB2D_BRUSHDATA_41(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_41 *reg = (regRB2D_BRUSHDATA_41 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_42 regRB2D_BRUSHDATA_42;

__inline void dump_RB2D_BRUSHDATA_42(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_42 *reg = (regRB2D_BRUSHDATA_42 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_43 regRB2D_BRUSHDATA_43;

__inline void dump_RB2D_BRUSHDATA_43(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_43 *reg = (regRB2D_BRUSHDATA_43 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_44 regRB2D_BRUSHDATA_44;

__inline void dump_RB2D_BRUSHDATA_44(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_44 *reg = (regRB2D_BRUSHDATA_44 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_45 regRB2D_BRUSHDATA_45;

__inline void dump_RB2D_BRUSHDATA_45(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_45 *reg = (regRB2D_BRUSHDATA_45 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_46 regRB2D_BRUSHDATA_46;

__inline void dump_RB2D_BRUSHDATA_46(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_46 *reg = (regRB2D_BRUSHDATA_46 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_47 regRB2D_BRUSHDATA_47;

__inline void dump_RB2D_BRUSHDATA_47(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_47 *reg = (regRB2D_BRUSHDATA_47 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_48 regRB2D_BRUSHDATA_48;

__inline void dump_RB2D_BRUSHDATA_48(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_48 *reg = (regRB2D_BRUSHDATA_48 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_49 regRB2D_BRUSHDATA_49;

__inline void dump_RB2D_BRUSHDATA_49(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_49 *reg = (regRB2D_BRUSHDATA_49 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_50 regRB2D_BRUSHDATA_50;

__inline void dump_RB2D_BRUSHDATA_50(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_50 *reg = (regRB2D_BRUSHDATA_50 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_51 regRB2D_BRUSHDATA_51;

__inline void dump_RB2D_BRUSHDATA_51(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_51 *reg = (regRB2D_BRUSHDATA_51 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_52 regRB2D_BRUSHDATA_52;

__inline void dump_RB2D_BRUSHDATA_52(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_52 *reg = (regRB2D_BRUSHDATA_52 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_53 regRB2D_BRUSHDATA_53;

__inline void dump_RB2D_BRUSHDATA_53(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_53 *reg = (regRB2D_BRUSHDATA_53 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_54 regRB2D_BRUSHDATA_54;

__inline void dump_RB2D_BRUSHDATA_54(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_54 *reg = (regRB2D_BRUSHDATA_54 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_55 regRB2D_BRUSHDATA_55;

__inline void dump_RB2D_BRUSHDATA_55(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_55 *reg = (regRB2D_BRUSHDATA_55 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_56 regRB2D_BRUSHDATA_56;

__inline void dump_RB2D_BRUSHDATA_56(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_56 *reg = (regRB2D_BRUSHDATA_56 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_57 regRB2D_BRUSHDATA_57;

__inline void dump_RB2D_BRUSHDATA_57(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_57 *reg = (regRB2D_BRUSHDATA_57 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_58 regRB2D_BRUSHDATA_58;

__inline void dump_RB2D_BRUSHDATA_58(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_58 *reg = (regRB2D_BRUSHDATA_58 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_59 regRB2D_BRUSHDATA_59;

__inline void dump_RB2D_BRUSHDATA_59(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_59 *reg = (regRB2D_BRUSHDATA_59 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_60 regRB2D_BRUSHDATA_60;

__inline void dump_RB2D_BRUSHDATA_60(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_60 *reg = (regRB2D_BRUSHDATA_60 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_61 regRB2D_BRUSHDATA_61;

__inline void dump_RB2D_BRUSHDATA_61(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_61 *reg = (regRB2D_BRUSHDATA_61 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_62 regRB2D_BRUSHDATA_62;

__inline void dump_RB2D_BRUSHDATA_62(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_62 *reg = (regRB2D_BRUSHDATA_62 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_BRUSHDATA_63 regRB2D_BRUSHDATA_63;

__inline void dump_RB2D_BRUSHDATA_63(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_BRUSHDATA_63 *reg = (regRB2D_BRUSHDATA_63 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_DSTCACHE_MODE regRB2D_DSTCACHE_MODE;

__inline void dump_RB2D_DSTCACHE_MODE(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_DSTCACHE_MODE *reg = (regRB2D_DSTCACHE_MODE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DC_BYPASS:%x", buff, reg->bitfields.DC_BYPASS);
  sprintf(buff,"%s DC_LINE_SIZE:%x", buff, reg->bitfields.DC_LINE_SIZE);
  sprintf(buff,"%s DC_AUTOFLUSH_ENABLE:%x", buff, reg->bitfields.DC_AUTOFLUSH_ENABLE);
  sprintf(buff,"%s DC_AUTOFREE_ENABLE:%x", buff, reg->bitfields.DC_AUTOFREE_ENABLE);
  sprintf(buff,"%s DC_FORCE_RMW:%x", buff, reg->bitfields.DC_FORCE_RMW);
  sprintf(buff,"%s DC_DISABLE_RI_FILL:%x", buff, reg->bitfields.DC_DISABLE_RI_FILL);
  sprintf(buff,"%s DC_DISABLE_RI_READ:%x", buff, reg->bitfields.DC_DISABLE_RI_READ);
  sprintf(buff,"%s DC_DISABLE_MASK_CHK:%x", buff, reg->bitfields.DC_DISABLE_MASK_CHK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_DSTCACHE_CTLSTAT regRB2D_DSTCACHE_CTLSTAT;

__inline void dump_RB2D_DSTCACHE_CTLSTAT(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_DSTCACHE_CTLSTAT *reg = (regRB2D_DSTCACHE_CTLSTAT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DC_FLUSH:%x", buff, reg->bitfields.DC_FLUSH);
  sprintf(buff,"%s DC_FREE:%x", buff, reg->bitfields.DC_FREE);
  sprintf(buff,"%s DC_BUSY:%x", buff, reg->bitfields.DC_BUSY);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_SRC_ENDIAN regRB2D_SRC_ENDIAN;

__inline void dump_RB2D_SRC_ENDIAN(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_SRC_ENDIAN *reg = (regRB2D_SRC_ENDIAN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_DST_ENDIAN regRB2D_DST_ENDIAN;

__inline void dump_RB2D_DST_ENDIAN(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_DST_ENDIAN *reg = (regRB2D_DST_ENDIAN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_PD1_DATA regRB2D_PD1_DATA;

__inline void dump_RB2D_PD1_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_PD1_DATA *reg = (regRB2D_PD1_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_PD2_DATA regRB2D_PD2_DATA;

__inline void dump_RB2D_PD2_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_PD2_DATA *reg = (regRB2D_PD2_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_WRITEBACK_DATA_LO regRB2D_WRITEBACK_DATA_LO;

__inline void dump_RB2D_WRITEBACK_DATA_LO(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_WRITEBACK_DATA_LO *reg = (regRB2D_WRITEBACK_DATA_LO *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_WRITEBACK_DATA_HI regRB2D_WRITEBACK_DATA_HI;

__inline void dump_RB2D_WRITEBACK_DATA_HI(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_WRITEBACK_DATA_HI *reg = (regRB2D_WRITEBACK_DATA_HI *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB2D_WRITEBACK_ADDR regRB2D_WRITEBACK_ADDR;

__inline void dump_RB2D_WRITEBACK_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB2D_WRITEBACK_ADDR *reg = (regRB2D_WRITEBACK_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_BLENDCOLOR regRB3D_BLENDCOLOR;

__inline void dump_RB3D_BLENDCOLOR(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_BLENDCOLOR *reg = (regRB3D_BLENDCOLOR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ABLENDCNTL regRB3D_ABLENDCNTL;

__inline void dump_RB3D_ABLENDCNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ABLENDCNTL *reg = (regRB3D_ABLENDCNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COMB_FCN:%x", buff, reg->bitfields.COMB_FCN);
  sprintf(buff,"%s SRCBLEND:%x", buff, reg->bitfields.SRCBLEND);
  sprintf(buff,"%s DESTBLEND:%x", buff, reg->bitfields.DESTBLEND);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_BLENDCNTL regRB3D_BLENDCNTL;

__inline void dump_RB3D_BLENDCNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_BLENDCNTL *reg = (regRB3D_BLENDCNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COMB_FCN_R2:%x", buff, reg->bitfields.COMB_FCN_R2);
  sprintf(buff,"%s SRCBLEND:%x", buff, reg->bitfields.SRCBLEND);
  sprintf(buff,"%s DESTBLEND:%x", buff, reg->bitfields.DESTBLEND);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_DEPTHOFFSET regRB3D_DEPTHOFFSET;

__inline void dump_RB3D_DEPTHOFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_DEPTHOFFSET *reg = (regRB3D_DEPTHOFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_DEPTHPITCH regRB3D_DEPTHPITCH;

__inline void dump_RB3D_DEPTHPITCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_DEPTHPITCH *reg = (regRB3D_DEPTHPITCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DEPTHPITCH_R2:%x", buff, reg->bitfields.DEPTHPITCH_R2);
  sprintf(buff,"%s DEPTHENDIAN:%x", buff, reg->bitfields.DEPTHENDIAN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_DEPTHCLEARVALUE regRB3D_DEPTHCLEARVALUE;

__inline void dump_RB3D_DEPTHCLEARVALUE(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_DEPTHCLEARVALUE *reg = (regRB3D_DEPTHCLEARVALUE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ZMASKOFFSET regRB3D_ZMASKOFFSET;

__inline void dump_RB3D_ZMASKOFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ZMASKOFFSET *reg = (regRB3D_ZMASKOFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_CNTL regRB3D_CNTL;

__inline void dump_RB3D_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_CNTL *reg = (regRB3D_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ALPHA_BLEND_ENABLE:%x", buff, reg->bitfields.ALPHA_BLEND_ENABLE);
  sprintf(buff,"%s PLANE_MASK_ENABLE:%x", buff, reg->bitfields.PLANE_MASK_ENABLE);
  sprintf(buff,"%s DITHER_ENABLE:%x", buff, reg->bitfields.DITHER_ENABLE);
  sprintf(buff,"%s ROUND_ENABLE:%x", buff, reg->bitfields.ROUND_ENABLE);
  sprintf(buff,"%s SCALE_DITHER:%x", buff, reg->bitfields.SCALE_DITHER);
  sprintf(buff,"%s DITHER_INIT:%x", buff, reg->bitfields.DITHER_INIT);
  sprintf(buff,"%s ROP_ENABLE:%x", buff, reg->bitfields.ROP_ENABLE);
  sprintf(buff,"%s STENCIL_ENABLE:%x", buff, reg->bitfields.STENCIL_ENABLE);
  sprintf(buff,"%s Z_ENABLE:%x", buff, reg->bitfields.Z_ENABLE);
  sprintf(buff,"%s DEPTHXY_OFFSET_ENABLE:%x", buff, reg->bitfields.DEPTHXY_OFFSET_ENABLE);
  sprintf(buff,"%s COLORFORMAT:%x", buff, reg->bitfields.COLORFORMAT);
  sprintf(buff,"%s CLRCMP_FLIPE_ENABLE:%x", buff, reg->bitfields.CLRCMP_FLIPE_ENABLE);
  sprintf(buff,"%s SEPARATE_ALPHA_ENABLE:%x", buff, reg->bitfields.SEPARATE_ALPHA_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_COLOROFFSET regRB3D_COLOROFFSET;

__inline void dump_RB3D_COLOROFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_COLOROFFSET *reg = (regRB3D_COLOROFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_COLORPITCH regRB3D_COLORPITCH;

__inline void dump_RB3D_COLORPITCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_COLORPITCH *reg = (regRB3D_COLORPITCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s COLORPITCH:%x", buff, reg->bitfields.COLORPITCH);
  sprintf(buff,"%s COLORTILE:%x", buff, reg->bitfields.COLORTILE);
  sprintf(buff,"%s COLORMICROTILE:%x", buff, reg->bitfields.COLORMICROTILE);
  sprintf(buff,"%s COLORENDIAN:%x", buff, reg->bitfields.COLORENDIAN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_DEPTHXY_OFFSET regRB3D_DEPTHXY_OFFSET;

__inline void dump_RB3D_DEPTHXY_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_DEPTHXY_OFFSET *reg = (regRB3D_DEPTHXY_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DEPTHX_OFFSET:%x", buff, reg->bitfields.DEPTHX_OFFSET);
  sprintf(buff,"%s DEPTHY_OFFSET:%x", buff, reg->bitfields.DEPTHY_OFFSET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_CLRCMP_FLIPE regRB3D_CLRCMP_FLIPE;

__inline void dump_RB3D_CLRCMP_FLIPE(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_CLRCMP_FLIPE *reg = (regRB3D_CLRCMP_FLIPE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_CLRCMP_CLR regRB3D_CLRCMP_CLR;

__inline void dump_RB3D_CLRCMP_CLR(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_CLRCMP_CLR *reg = (regRB3D_CLRCMP_CLR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_CLRCMP_MSK regRB3D_CLRCMP_MSK;

__inline void dump_RB3D_CLRCMP_MSK(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_CLRCMP_MSK *reg = (regRB3D_CLRCMP_MSK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ZMASK_WRINDEX regRB3D_ZMASK_WRINDEX;

__inline void dump_RB3D_ZMASK_WRINDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ZMASK_WRINDEX *reg = (regRB3D_ZMASK_WRINDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ZMASK_DWORD regRB3D_ZMASK_DWORD;

__inline void dump_RB3D_ZMASK_DWORD(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ZMASK_DWORD *reg = (regRB3D_ZMASK_DWORD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ZMASK_RDINDEX regRB3D_ZMASK_RDINDEX;

__inline void dump_RB3D_ZMASK_RDINDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ZMASK_RDINDEX *reg = (regRB3D_ZMASK_RDINDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_STENCILREFMASK regRB3D_STENCILREFMASK;

__inline void dump_RB3D_STENCILREFMASK(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_STENCILREFMASK *reg = (regRB3D_STENCILREFMASK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s STENCILREF:%x", buff, reg->bitfields.STENCILREF);
  sprintf(buff,"%s STENCILMASK:%x", buff, reg->bitfields.STENCILMASK);
  sprintf(buff,"%s STENCILWRITEMASK:%x", buff, reg->bitfields.STENCILWRITEMASK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ROPCNTL regRB3D_ROPCNTL;

__inline void dump_RB3D_ROPCNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ROPCNTL *reg = (regRB3D_ROPCNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_PLANEMASK regRB3D_PLANEMASK;

__inline void dump_RB3D_PLANEMASK(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_PLANEMASK *reg = (regRB3D_PLANEMASK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ZCACHE_MODE regRB3D_ZCACHE_MODE;

__inline void dump_RB3D_ZCACHE_MODE(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ZCACHE_MODE *reg = (regRB3D_ZCACHE_MODE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ZMASK_RAM_RM:%x", buff, reg->bitfields.ZMASK_RAM_RM);
  sprintf(buff,"%s ZC_DISABLE_RI_FILL:%x", buff, reg->bitfields.ZC_DISABLE_RI_FILL);
  sprintf(buff,"%s ZC_DISABLE_RI_READ:%x", buff, reg->bitfields.ZC_DISABLE_RI_READ);
  sprintf(buff,"%s ZC_DISABLE_RI_FLUSH:%x", buff, reg->bitfields.ZC_DISABLE_RI_FLUSH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ZCACHE_CTLSTAT regRB3D_ZCACHE_CTLSTAT;

__inline void dump_RB3D_ZCACHE_CTLSTAT(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ZCACHE_CTLSTAT *reg = (regRB3D_ZCACHE_CTLSTAT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ZC_FLUSH:%x", buff, reg->bitfields.ZC_FLUSH);
  sprintf(buff,"%s ZC_FREE:%x", buff, reg->bitfields.ZC_FREE);
  sprintf(buff,"%s ZC_BUSY:%x", buff, reg->bitfields.ZC_BUSY);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_DSTCACHE_MODE regRB3D_DSTCACHE_MODE;

__inline void dump_RB3D_DSTCACHE_MODE(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_DSTCACHE_MODE *reg = (regRB3D_DSTCACHE_MODE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DC_BYPASS:%x", buff, reg->bitfields.DC_BYPASS);
  sprintf(buff,"%s DC_LINE_SIZE:%x", buff, reg->bitfields.DC_LINE_SIZE);
  sprintf(buff,"%s DC_AUTOFLUSH_ENABLE:%x", buff, reg->bitfields.DC_AUTOFLUSH_ENABLE);
  sprintf(buff,"%s DC_AUTOFREE_ENABLE:%x", buff, reg->bitfields.DC_AUTOFREE_ENABLE);
  sprintf(buff,"%s DC_FORCE_RMW:%x", buff, reg->bitfields.DC_FORCE_RMW);
  sprintf(buff,"%s DC_DISABLE_RI_FILL:%x", buff, reg->bitfields.DC_DISABLE_RI_FILL);
  sprintf(buff,"%s DC_DISABLE_RI_READ:%x", buff, reg->bitfields.DC_DISABLE_RI_READ);
  sprintf(buff,"%s DC_DISABLE_MASK_CHK:%x", buff, reg->bitfields.DC_DISABLE_MASK_CHK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_DSTCACHE_CTLSTAT regRB3D_DSTCACHE_CTLSTAT;

__inline void dump_RB3D_DSTCACHE_CTLSTAT(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_DSTCACHE_CTLSTAT *reg = (regRB3D_DSTCACHE_CTLSTAT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DC_FLUSH:%x", buff, reg->bitfields.DC_FLUSH);
  sprintf(buff,"%s DC_FREE:%x", buff, reg->bitfields.DC_FREE);
  sprintf(buff,"%s DC_BUSY:%x", buff, reg->bitfields.DC_BUSY);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_PD0_DATA regRB3D_PD0_DATA;

__inline void dump_RB3D_PD0_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_PD0_DATA *reg = (regRB3D_PD0_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_DSTPERF_CNTL regRB3D_DSTPERF_CNTL;

__inline void dump_RB3D_DSTPERF_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_DSTPERF_CNTL *reg = (regRB3D_DSTPERF_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PERFSEL0:%x", buff, reg->bitfields.PERFSEL0);
  sprintf(buff,"%s CLR_PERF0:%x", buff, reg->bitfields.CLR_PERF0);
  sprintf(buff,"%s EN_PERF0:%x", buff, reg->bitfields.EN_PERF0);
  sprintf(buff,"%s PERFSEL1:%x", buff, reg->bitfields.PERFSEL1);
  sprintf(buff,"%s CLR_PERF1:%x", buff, reg->bitfields.CLR_PERF1);
  sprintf(buff,"%s EN_PERF1:%x", buff, reg->bitfields.EN_PERF1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_PD1_DATA regRB3D_PD1_DATA;

__inline void dump_RB3D_PD1_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_PD1_DATA *reg = (regRB3D_PD1_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s RB3D_DBG_DISABLE_ZMASK_L0:%x", buff, reg->bitfields.RB3D_DBG_DISABLE_ZMASK_L0);
  sprintf(buff,"%s PD1_DATA:%x", buff, reg->bitfields.PD1_DATA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_PD1_ADDR regRB3D_PD1_ADDR;

__inline void dump_RB3D_PD1_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_PD1_ADDR *reg = (regRB3D_PD1_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_PD2_DATA regRB3D_PD2_DATA;

__inline void dump_RB3D_PD2_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_PD2_DATA *reg = (regRB3D_PD2_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_PD3_DATA regRB3D_PD3_DATA;

__inline void dump_RB3D_PD3_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_PD3_DATA *reg = (regRB3D_PD3_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_WRITEBACK_DATA_LO regRB3D_WRITEBACK_DATA_LO;

__inline void dump_RB3D_WRITEBACK_DATA_LO(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_WRITEBACK_DATA_LO *reg = (regRB3D_WRITEBACK_DATA_LO *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_WRITEBACK_DATA_HI regRB3D_WRITEBACK_DATA_HI;

__inline void dump_RB3D_WRITEBACK_DATA_HI(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_WRITEBACK_DATA_HI *reg = (regRB3D_WRITEBACK_DATA_HI *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_WRITEBACK_ADDR regRB3D_WRITEBACK_ADDR;

__inline void dump_RB3D_WRITEBACK_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_WRITEBACK_ADDR *reg = (regRB3D_WRITEBACK_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ZPERF_CNTL regRB3D_ZPERF_CNTL;

__inline void dump_RB3D_ZPERF_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ZPERF_CNTL *reg = (regRB3D_ZPERF_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PERFSEL0:%x", buff, reg->bitfields.PERFSEL0);
  sprintf(buff,"%s CLR_PERF0:%x", buff, reg->bitfields.CLR_PERF0);
  sprintf(buff,"%s EN_PERF0:%x", buff, reg->bitfields.EN_PERF0);
  sprintf(buff,"%s PERFSEL1:%x", buff, reg->bitfields.PERFSEL1);
  sprintf(buff,"%s CLR_PERF1:%x", buff, reg->bitfields.CLR_PERF1);
  sprintf(buff,"%s EN_PERF1:%x", buff, reg->bitfields.EN_PERF1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ZPASS_DATA regRB3D_ZPASS_DATA;

__inline void dump_RB3D_ZPASS_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ZPASS_DATA *reg = (regRB3D_ZPASS_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ZPASS_ADDR regRB3D_ZPASS_ADDR;

__inline void dump_RB3D_ZPASS_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ZPASS_ADDR *reg = (regRB3D_ZPASS_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ZPERF_COUNT_0 regRB3D_ZPERF_COUNT_0;

__inline void dump_RB3D_ZPERF_COUNT_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ZPERF_COUNT_0 *reg = (regRB3D_ZPERF_COUNT_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ZPERF_COUNT_1 regRB3D_ZPERF_COUNT_1;

__inline void dump_RB3D_ZPERF_COUNT_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ZPERF_COUNT_1 *reg = (regRB3D_ZPERF_COUNT_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_OFFSET regDST_OFFSET;

__inline void dump_DST_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_OFFSET *reg = (regDST_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_PITCH regDST_PITCH;

__inline void dump_DST_PITCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_PITCH *reg = (regDST_PITCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_TILE regDST_TILE;

__inline void dump_DST_TILE(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_TILE *reg = (regDST_TILE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_PITCH_OFFSET regDST_PITCH_OFFSET;

__inline void dump_DST_PITCH_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_PITCH_OFFSET *reg = (regDST_PITCH_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_OFFSET:%x", buff, reg->bitfields.DST_OFFSET);
  sprintf(buff,"%s DST_PITCH:%x", buff, reg->bitfields.DST_PITCH);
  sprintf(buff,"%s DST_TILE:%x", buff, reg->bitfields.DST_TILE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_X regDST_X;

__inline void dump_DST_X(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_X *reg = (regDST_X *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_Y regDST_Y;

__inline void dump_DST_Y(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_Y *reg = (regDST_Y *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_X_Y regDST_X_Y;

__inline void dump_DST_X_Y(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_X_Y *reg = (regDST_X_Y *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_Y:%x", buff, reg->bitfields.DST_Y);
  sprintf(buff,"%s DST_X:%x", buff, reg->bitfields.DST_X);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_Y_X regDST_Y_X;

__inline void dump_DST_Y_X(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_Y_X *reg = (regDST_Y_X *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_X:%x", buff, reg->bitfields.DST_X);
  sprintf(buff,"%s DST_Y:%x", buff, reg->bitfields.DST_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_WIDTH regDST_WIDTH;

__inline void dump_DST_WIDTH(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_WIDTH *reg = (regDST_WIDTH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_HEIGHT regDST_HEIGHT;

__inline void dump_DST_HEIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_HEIGHT *reg = (regDST_HEIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_WIDTH_HEIGHT regDST_WIDTH_HEIGHT;

__inline void dump_DST_WIDTH_HEIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_WIDTH_HEIGHT *reg = (regDST_WIDTH_HEIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_HEIGHT:%x", buff, reg->bitfields.DST_HEIGHT);
  sprintf(buff,"%s DST_WIDTH:%x", buff, reg->bitfields.DST_WIDTH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_HEIGHT_WIDTH regDST_HEIGHT_WIDTH;

__inline void dump_DST_HEIGHT_WIDTH(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_HEIGHT_WIDTH *reg = (regDST_HEIGHT_WIDTH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_WIDTH:%x", buff, reg->bitfields.DST_WIDTH);
  sprintf(buff,"%s DST_HEIGHT:%x", buff, reg->bitfields.DST_HEIGHT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_HEIGHT_WIDTH_8 regDST_HEIGHT_WIDTH_8;

__inline void dump_DST_HEIGHT_WIDTH_8(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_HEIGHT_WIDTH_8 *reg = (regDST_HEIGHT_WIDTH_8 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_WIDTH:%x", buff, reg->bitfields.DST_WIDTH);
  sprintf(buff,"%s DST_HEIGHT:%x", buff, reg->bitfields.DST_HEIGHT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_HEIGHT_Y regDST_HEIGHT_Y;

__inline void dump_DST_HEIGHT_Y(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_HEIGHT_Y *reg = (regDST_HEIGHT_Y *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_Y:%x", buff, reg->bitfields.DST_Y);
  sprintf(buff,"%s DST_HEIGHT:%x", buff, reg->bitfields.DST_HEIGHT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_WIDTH_X regDST_WIDTH_X;

__inline void dump_DST_WIDTH_X(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_WIDTH_X *reg = (regDST_WIDTH_X *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_X:%x", buff, reg->bitfields.DST_X);
  sprintf(buff,"%s DST_WIDTH:%x", buff, reg->bitfields.DST_WIDTH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_WIDTH_X_INCY regDST_WIDTH_X_INCY;

__inline void dump_DST_WIDTH_X_INCY(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_WIDTH_X_INCY *reg = (regDST_WIDTH_X_INCY *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_X:%x", buff, reg->bitfields.DST_X);
  sprintf(buff,"%s DST_WIDTH:%x", buff, reg->bitfields.DST_WIDTH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_LINE_START regDST_LINE_START;

__inline void dump_DST_LINE_START(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_LINE_START *reg = (regDST_LINE_START *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_START_X:%x", buff, reg->bitfields.DST_START_X);
  sprintf(buff,"%s DST_START_Y:%x", buff, reg->bitfields.DST_START_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_LINE_END regDST_LINE_END;

__inline void dump_DST_LINE_END(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_LINE_END *reg = (regDST_LINE_END *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_END_X:%x", buff, reg->bitfields.DST_END_X);
  sprintf(buff,"%s DST_END_Y:%x", buff, reg->bitfields.DST_END_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DST_LINE_PATCOUNT regDST_LINE_PATCOUNT;

__inline void dump_DST_LINE_PATCOUNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regDST_LINE_PATCOUNT *reg = (regDST_LINE_PATCOUNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s LINE_PATCOUNT:%x", buff, reg->bitfields.LINE_PATCOUNT);
  sprintf(buff,"%s BRES_CNTL:%x", buff, reg->bitfields.BRES_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_DST_ENDIAN regDP_DST_ENDIAN;

__inline void dump_DP_DST_ENDIAN(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_DST_ENDIAN *reg = (regDP_DST_ENDIAN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_Y_X regBRUSH_Y_X;

__inline void dump_BRUSH_Y_X(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_Y_X *reg = (regBRUSH_Y_X *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BRUSH_X:%x", buff, reg->bitfields.BRUSH_X);
  sprintf(buff,"%s BRUSH_Y:%x", buff, reg->bitfields.BRUSH_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA0 regBRUSH_DATA0;

__inline void dump_BRUSH_DATA0(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA0 *reg = (regBRUSH_DATA0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA1 regBRUSH_DATA1;

__inline void dump_BRUSH_DATA1(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA1 *reg = (regBRUSH_DATA1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA2 regBRUSH_DATA2;

__inline void dump_BRUSH_DATA2(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA2 *reg = (regBRUSH_DATA2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA3 regBRUSH_DATA3;

__inline void dump_BRUSH_DATA3(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA3 *reg = (regBRUSH_DATA3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA4 regBRUSH_DATA4;

__inline void dump_BRUSH_DATA4(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA4 *reg = (regBRUSH_DATA4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA5 regBRUSH_DATA5;

__inline void dump_BRUSH_DATA5(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA5 *reg = (regBRUSH_DATA5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA6 regBRUSH_DATA6;

__inline void dump_BRUSH_DATA6(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA6 *reg = (regBRUSH_DATA6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA7 regBRUSH_DATA7;

__inline void dump_BRUSH_DATA7(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA7 *reg = (regBRUSH_DATA7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA8 regBRUSH_DATA8;

__inline void dump_BRUSH_DATA8(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA8 *reg = (regBRUSH_DATA8 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA9 regBRUSH_DATA9;

__inline void dump_BRUSH_DATA9(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA9 *reg = (regBRUSH_DATA9 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA10 regBRUSH_DATA10;

__inline void dump_BRUSH_DATA10(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA10 *reg = (regBRUSH_DATA10 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA11 regBRUSH_DATA11;

__inline void dump_BRUSH_DATA11(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA11 *reg = (regBRUSH_DATA11 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA12 regBRUSH_DATA12;

__inline void dump_BRUSH_DATA12(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA12 *reg = (regBRUSH_DATA12 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA13 regBRUSH_DATA13;

__inline void dump_BRUSH_DATA13(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA13 *reg = (regBRUSH_DATA13 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA14 regBRUSH_DATA14;

__inline void dump_BRUSH_DATA14(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA14 *reg = (regBRUSH_DATA14 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA15 regBRUSH_DATA15;

__inline void dump_BRUSH_DATA15(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA15 *reg = (regBRUSH_DATA15 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA16 regBRUSH_DATA16;

__inline void dump_BRUSH_DATA16(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA16 *reg = (regBRUSH_DATA16 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA17 regBRUSH_DATA17;

__inline void dump_BRUSH_DATA17(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA17 *reg = (regBRUSH_DATA17 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA18 regBRUSH_DATA18;

__inline void dump_BRUSH_DATA18(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA18 *reg = (regBRUSH_DATA18 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA19 regBRUSH_DATA19;

__inline void dump_BRUSH_DATA19(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA19 *reg = (regBRUSH_DATA19 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA20 regBRUSH_DATA20;

__inline void dump_BRUSH_DATA20(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA20 *reg = (regBRUSH_DATA20 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA21 regBRUSH_DATA21;

__inline void dump_BRUSH_DATA21(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA21 *reg = (regBRUSH_DATA21 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA22 regBRUSH_DATA22;

__inline void dump_BRUSH_DATA22(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA22 *reg = (regBRUSH_DATA22 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA23 regBRUSH_DATA23;

__inline void dump_BRUSH_DATA23(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA23 *reg = (regBRUSH_DATA23 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA24 regBRUSH_DATA24;

__inline void dump_BRUSH_DATA24(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA24 *reg = (regBRUSH_DATA24 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA25 regBRUSH_DATA25;

__inline void dump_BRUSH_DATA25(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA25 *reg = (regBRUSH_DATA25 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA26 regBRUSH_DATA26;

__inline void dump_BRUSH_DATA26(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA26 *reg = (regBRUSH_DATA26 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA27 regBRUSH_DATA27;

__inline void dump_BRUSH_DATA27(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA27 *reg = (regBRUSH_DATA27 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA28 regBRUSH_DATA28;

__inline void dump_BRUSH_DATA28(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA28 *reg = (regBRUSH_DATA28 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA29 regBRUSH_DATA29;

__inline void dump_BRUSH_DATA29(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA29 *reg = (regBRUSH_DATA29 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA30 regBRUSH_DATA30;

__inline void dump_BRUSH_DATA30(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA30 *reg = (regBRUSH_DATA30 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA31 regBRUSH_DATA31;

__inline void dump_BRUSH_DATA31(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA31 *reg = (regBRUSH_DATA31 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA32 regBRUSH_DATA32;

__inline void dump_BRUSH_DATA32(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA32 *reg = (regBRUSH_DATA32 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA33 regBRUSH_DATA33;

__inline void dump_BRUSH_DATA33(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA33 *reg = (regBRUSH_DATA33 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA34 regBRUSH_DATA34;

__inline void dump_BRUSH_DATA34(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA34 *reg = (regBRUSH_DATA34 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA35 regBRUSH_DATA35;

__inline void dump_BRUSH_DATA35(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA35 *reg = (regBRUSH_DATA35 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA36 regBRUSH_DATA36;

__inline void dump_BRUSH_DATA36(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA36 *reg = (regBRUSH_DATA36 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA37 regBRUSH_DATA37;

__inline void dump_BRUSH_DATA37(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA37 *reg = (regBRUSH_DATA37 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA38 regBRUSH_DATA38;

__inline void dump_BRUSH_DATA38(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA38 *reg = (regBRUSH_DATA38 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA39 regBRUSH_DATA39;

__inline void dump_BRUSH_DATA39(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA39 *reg = (regBRUSH_DATA39 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA40 regBRUSH_DATA40;

__inline void dump_BRUSH_DATA40(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA40 *reg = (regBRUSH_DATA40 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA41 regBRUSH_DATA41;

__inline void dump_BRUSH_DATA41(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA41 *reg = (regBRUSH_DATA41 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA42 regBRUSH_DATA42;

__inline void dump_BRUSH_DATA42(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA42 *reg = (regBRUSH_DATA42 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA43 regBRUSH_DATA43;

__inline void dump_BRUSH_DATA43(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA43 *reg = (regBRUSH_DATA43 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA44 regBRUSH_DATA44;

__inline void dump_BRUSH_DATA44(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA44 *reg = (regBRUSH_DATA44 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA45 regBRUSH_DATA45;

__inline void dump_BRUSH_DATA45(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA45 *reg = (regBRUSH_DATA45 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA46 regBRUSH_DATA46;

__inline void dump_BRUSH_DATA46(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA46 *reg = (regBRUSH_DATA46 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA47 regBRUSH_DATA47;

__inline void dump_BRUSH_DATA47(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA47 *reg = (regBRUSH_DATA47 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA48 regBRUSH_DATA48;

__inline void dump_BRUSH_DATA48(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA48 *reg = (regBRUSH_DATA48 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA49 regBRUSH_DATA49;

__inline void dump_BRUSH_DATA49(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA49 *reg = (regBRUSH_DATA49 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA50 regBRUSH_DATA50;

__inline void dump_BRUSH_DATA50(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA50 *reg = (regBRUSH_DATA50 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA51 regBRUSH_DATA51;

__inline void dump_BRUSH_DATA51(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA51 *reg = (regBRUSH_DATA51 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA52 regBRUSH_DATA52;

__inline void dump_BRUSH_DATA52(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA52 *reg = (regBRUSH_DATA52 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA53 regBRUSH_DATA53;

__inline void dump_BRUSH_DATA53(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA53 *reg = (regBRUSH_DATA53 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA54 regBRUSH_DATA54;

__inline void dump_BRUSH_DATA54(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA54 *reg = (regBRUSH_DATA54 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA55 regBRUSH_DATA55;

__inline void dump_BRUSH_DATA55(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA55 *reg = (regBRUSH_DATA55 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA56 regBRUSH_DATA56;

__inline void dump_BRUSH_DATA56(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA56 *reg = (regBRUSH_DATA56 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA57 regBRUSH_DATA57;

__inline void dump_BRUSH_DATA57(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA57 *reg = (regBRUSH_DATA57 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA58 regBRUSH_DATA58;

__inline void dump_BRUSH_DATA58(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA58 *reg = (regBRUSH_DATA58 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA59 regBRUSH_DATA59;

__inline void dump_BRUSH_DATA59(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA59 *reg = (regBRUSH_DATA59 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA60 regBRUSH_DATA60;

__inline void dump_BRUSH_DATA60(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA60 *reg = (regBRUSH_DATA60 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA61 regBRUSH_DATA61;

__inline void dump_BRUSH_DATA61(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA61 *reg = (regBRUSH_DATA61 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA62 regBRUSH_DATA62;

__inline void dump_BRUSH_DATA62(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA62 *reg = (regBRUSH_DATA62 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BRUSH_DATA63 regBRUSH_DATA63;

__inline void dump_BRUSH_DATA63(__in  unsigned int *dwreg, __in  char *buff)
{
  regBRUSH_DATA63 *reg = (regBRUSH_DATA63 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_BRUSH_FRGD_CLR regDP_BRUSH_FRGD_CLR;

__inline void dump_DP_BRUSH_FRGD_CLR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_BRUSH_FRGD_CLR *reg = (regDP_BRUSH_FRGD_CLR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_BRUSH_BKGD_CLR regDP_BRUSH_BKGD_CLR;

__inline void dump_DP_BRUSH_BKGD_CLR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_BRUSH_BKGD_CLR *reg = (regDP_BRUSH_BKGD_CLR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_OFFSET regSRC_OFFSET;

__inline void dump_SRC_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_OFFSET *reg = (regSRC_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_PITCH regSRC_PITCH;

__inline void dump_SRC_PITCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_PITCH *reg = (regSRC_PITCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_TILE regSRC_TILE;

__inline void dump_SRC_TILE(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_TILE *reg = (regSRC_TILE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_PITCH_OFFSET regSRC_PITCH_OFFSET;

__inline void dump_SRC_PITCH_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_PITCH_OFFSET *reg = (regSRC_PITCH_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SRC_OFFSET:%x", buff, reg->bitfields.SRC_OFFSET);
  sprintf(buff,"%s SRC_PITCH:%x", buff, reg->bitfields.SRC_PITCH);
  sprintf(buff,"%s SRC_TILE:%x", buff, reg->bitfields.SRC_TILE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_X regSRC_X;

__inline void dump_SRC_X(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_X *reg = (regSRC_X *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_Y regSRC_Y;

__inline void dump_SRC_Y(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_Y *reg = (regSRC_Y *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_X_Y regSRC_X_Y;

__inline void dump_SRC_X_Y(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_X_Y *reg = (regSRC_X_Y *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SRC_Y:%x", buff, reg->bitfields.SRC_Y);
  sprintf(buff,"%s SRC_X:%x", buff, reg->bitfields.SRC_X);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_Y_X regSRC_Y_X;

__inline void dump_SRC_Y_X(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_Y_X *reg = (regSRC_Y_X *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SRC_X:%x", buff, reg->bitfields.SRC_X);
  sprintf(buff,"%s SRC_Y:%x", buff, reg->bitfields.SRC_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_CLUT_ADDRESS regSRC_CLUT_ADDRESS;

__inline void dump_SRC_CLUT_ADDRESS(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_CLUT_ADDRESS *reg = (regSRC_CLUT_ADDRESS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_CLUT_DATA regSRC_CLUT_DATA;

__inline void dump_SRC_CLUT_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_CLUT_DATA *reg = (regSRC_CLUT_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_CLUT_DATA_RD regSRC_CLUT_DATA_RD;

__inline void dump_SRC_CLUT_DATA_RD(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_CLUT_DATA_RD *reg = (regSRC_CLUT_DATA_RD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HOST_DATA0 regHOST_DATA0;

__inline void dump_HOST_DATA0(__in  unsigned int *dwreg, __in  char *buff)
{
  regHOST_DATA0 *reg = (regHOST_DATA0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HOST_DATA1 regHOST_DATA1;

__inline void dump_HOST_DATA1(__in  unsigned int *dwreg, __in  char *buff)
{
  regHOST_DATA1 *reg = (regHOST_DATA1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HOST_DATA2 regHOST_DATA2;

__inline void dump_HOST_DATA2(__in  unsigned int *dwreg, __in  char *buff)
{
  regHOST_DATA2 *reg = (regHOST_DATA2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HOST_DATA3 regHOST_DATA3;

__inline void dump_HOST_DATA3(__in  unsigned int *dwreg, __in  char *buff)
{
  regHOST_DATA3 *reg = (regHOST_DATA3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HOST_DATA4 regHOST_DATA4;

__inline void dump_HOST_DATA4(__in  unsigned int *dwreg, __in  char *buff)
{
  regHOST_DATA4 *reg = (regHOST_DATA4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HOST_DATA5 regHOST_DATA5;

__inline void dump_HOST_DATA5(__in  unsigned int *dwreg, __in  char *buff)
{
  regHOST_DATA5 *reg = (regHOST_DATA5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HOST_DATA6 regHOST_DATA6;

__inline void dump_HOST_DATA6(__in  unsigned int *dwreg, __in  char *buff)
{
  regHOST_DATA6 *reg = (regHOST_DATA6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HOST_DATA7 regHOST_DATA7;

__inline void dump_HOST_DATA7(__in  unsigned int *dwreg, __in  char *buff)
{
  regHOST_DATA7 *reg = (regHOST_DATA7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HOST_DATA_LAST regHOST_DATA_LAST;

__inline void dump_HOST_DATA_LAST(__in  unsigned int *dwreg, __in  char *buff)
{
  regHOST_DATA_LAST *reg = (regHOST_DATA_LAST *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_SRC_ENDIAN regDP_SRC_ENDIAN;

__inline void dump_DP_SRC_ENDIAN(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_SRC_ENDIAN *reg = (regDP_SRC_ENDIAN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_SRC_FRGD_CLR regDP_SRC_FRGD_CLR;

__inline void dump_DP_SRC_FRGD_CLR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_SRC_FRGD_CLR *reg = (regDP_SRC_FRGD_CLR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_SRC_BKGD_CLR regDP_SRC_BKGD_CLR;

__inline void dump_DP_SRC_BKGD_CLR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_SRC_BKGD_CLR *reg = (regDP_SRC_BKGD_CLR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SC_LEFT regSC_LEFT;

__inline void dump_SC_LEFT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSC_LEFT *reg = (regSC_LEFT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SC_RIGHT regSC_RIGHT;

__inline void dump_SC_RIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSC_RIGHT *reg = (regSC_RIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SC_TOP regSC_TOP;

__inline void dump_SC_TOP(__in  unsigned int *dwreg, __in  char *buff)
{
  regSC_TOP *reg = (regSC_TOP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SC_BOTTOM regSC_BOTTOM;

__inline void dump_SC_BOTTOM(__in  unsigned int *dwreg, __in  char *buff)
{
  regSC_BOTTOM *reg = (regSC_BOTTOM *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_SC_RIGHT regSRC_SC_RIGHT;

__inline void dump_SRC_SC_RIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_SC_RIGHT *reg = (regSRC_SC_RIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_SC_BOTTOM regSRC_SC_BOTTOM;

__inline void dump_SRC_SC_BOTTOM(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_SC_BOTTOM *reg = (regSRC_SC_BOTTOM *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_CNTL regDP_CNTL;

__inline void dump_DP_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_CNTL *reg = (regDP_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_X_DIR:%x", buff, reg->bitfields.DST_X_DIR);
  sprintf(buff,"%s DST_Y_DIR:%x", buff, reg->bitfields.DST_Y_DIR);
  sprintf(buff,"%s DST_TILE:%x", buff, reg->bitfields.DST_TILE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_CNTL_XDIR_YDIR_YMAJOR regDP_CNTL_XDIR_YDIR_YMAJOR;

__inline void dump_DP_CNTL_XDIR_YDIR_YMAJOR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_CNTL_XDIR_YDIR_YMAJOR *reg = (regDP_CNTL_XDIR_YDIR_YMAJOR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DST_Y_DIR:%x", buff, reg->bitfields.DST_Y_DIR);
  sprintf(buff,"%s DST_X_DIR:%x", buff, reg->bitfields.DST_X_DIR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_DATATYPE regDP_DATATYPE;

__inline void dump_DP_DATATYPE(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_DATATYPE *reg = (regDP_DATATYPE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DP_DST_DATATYPE:%x", buff, reg->bitfields.DP_DST_DATATYPE);
  sprintf(buff,"%s DP_BRUSH_DATATYPE:%x", buff, reg->bitfields.DP_BRUSH_DATATYPE);
  sprintf(buff,"%s DP_SRC_DATATYPE:%x", buff, reg->bitfields.DP_SRC_DATATYPE);
  sprintf(buff,"%s DP_BYTE_PIX_ORDER:%x", buff, reg->bitfields.DP_BYTE_PIX_ORDER);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_MIX regDP_MIX;

__inline void dump_DP_MIX(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_MIX *reg = (regDP_MIX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DP_SRC_SOURCE:%x", buff, reg->bitfields.DP_SRC_SOURCE);
  sprintf(buff,"%s DP_ROP3:%x", buff, reg->bitfields.DP_ROP3);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_WRITE_MSK regDP_WRITE_MSK;

__inline void dump_DP_WRITE_MSK(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_WRITE_MSK *reg = (regDP_WRITE_MSK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_XOP regDP_XOP;

__inline void dump_DP_XOP(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_XOP *reg = (regDP_XOP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s XOP_A:%x", buff, reg->bitfields.XOP_A);
  sprintf(buff,"%s XOP_B:%x", buff, reg->bitfields.XOP_B);
  sprintf(buff,"%s XOP_C:%x", buff, reg->bitfields.XOP_C);
  sprintf(buff,"%s XOP_OP:%x", buff, reg->bitfields.XOP_OP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CLR_CMP_CLR_SRC regCLR_CMP_CLR_SRC;

__inline void dump_CLR_CMP_CLR_SRC(__in  unsigned int *dwreg, __in  char *buff)
{
  regCLR_CMP_CLR_SRC *reg = (regCLR_CMP_CLR_SRC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CLR_CMP_CLR_DST regCLR_CMP_CLR_DST;

__inline void dump_CLR_CMP_CLR_DST(__in  unsigned int *dwreg, __in  char *buff)
{
  regCLR_CMP_CLR_DST *reg = (regCLR_CMP_CLR_DST *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CLR_CMP_CNTL regCLR_CMP_CNTL;

__inline void dump_CLR_CMP_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCLR_CMP_CNTL *reg = (regCLR_CMP_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CLR_CMP_FCN_SRC:%x", buff, reg->bitfields.CLR_CMP_FCN_SRC);
  sprintf(buff,"%s CLR_CMP_FCN_DST:%x", buff, reg->bitfields.CLR_CMP_FCN_DST);
  sprintf(buff,"%s CLR_CMP_SRC:%x", buff, reg->bitfields.CLR_CMP_SRC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CLR_CMP_MSK regCLR_CMP_MSK;

__inline void dump_CLR_CMP_MSK(__in  unsigned int *dwreg, __in  char *buff)
{
  regCLR_CMP_MSK *reg = (regCLR_CMP_MSK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DSTCACHE_MODE regDSTCACHE_MODE;

__inline void dump_DSTCACHE_MODE(__in  unsigned int *dwreg, __in  char *buff)
{
  regDSTCACHE_MODE *reg = (regDSTCACHE_MODE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DSTCACHE_CTLSTAT regDSTCACHE_CTLSTAT;

__inline void dump_DSTCACHE_CTLSTAT(__in  unsigned int *dwreg, __in  char *buff)
{
  regDSTCACHE_CTLSTAT *reg = (regDSTCACHE_CTLSTAT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PD2_DATA regPD2_DATA;

__inline void dump_PD2_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regPD2_DATA *reg = (regPD2_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEFAULT_PITCH_OFFSET regDEFAULT_PITCH_OFFSET;

__inline void dump_DEFAULT_PITCH_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEFAULT_PITCH_OFFSET *reg = (regDEFAULT_PITCH_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DEFAULT_OFFSET:%x", buff, reg->bitfields.DEFAULT_OFFSET);
  sprintf(buff,"%s DEFAULT_PITCH:%x", buff, reg->bitfields.DEFAULT_PITCH);
  sprintf(buff,"%s DEFAULT_TILE:%x", buff, reg->bitfields.DEFAULT_TILE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEFAULT_SC_BOTTOM_RIGHT regDEFAULT_SC_BOTTOM_RIGHT;

__inline void dump_DEFAULT_SC_BOTTOM_RIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEFAULT_SC_BOTTOM_RIGHT *reg = (regDEFAULT_SC_BOTTOM_RIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DEFAULT_SC_RIGHT:%x", buff, reg->bitfields.DEFAULT_SC_RIGHT);
  sprintf(buff,"%s DEFAULT_SC_BOTTOM:%x", buff, reg->bitfields.DEFAULT_SC_BOTTOM);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEFAULT2_PITCH_OFFSET regDEFAULT2_PITCH_OFFSET;

__inline void dump_DEFAULT2_PITCH_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEFAULT2_PITCH_OFFSET *reg = (regDEFAULT2_PITCH_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DEFAULT_OFFSET:%x", buff, reg->bitfields.DEFAULT_OFFSET);
  sprintf(buff,"%s DEFAULT_PITCH:%x", buff, reg->bitfields.DEFAULT_PITCH);
  sprintf(buff,"%s DEFAULT_TILE:%x", buff, reg->bitfields.DEFAULT_TILE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEFAULT2_SC_BOTTOM_RIGHT regDEFAULT2_SC_BOTTOM_RIGHT;

__inline void dump_DEFAULT2_SC_BOTTOM_RIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEFAULT2_SC_BOTTOM_RIGHT *reg = (regDEFAULT2_SC_BOTTOM_RIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DEFAULT_SC_RIGHT:%x", buff, reg->bitfields.DEFAULT_SC_RIGHT);
  sprintf(buff,"%s DEFAULT_SC_BOTTOM:%x", buff, reg->bitfields.DEFAULT_SC_BOTTOM);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DP_GUI_MASTER_CNTL regDP_GUI_MASTER_CNTL;

__inline void dump_DP_GUI_MASTER_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDP_GUI_MASTER_CNTL *reg = (regDP_GUI_MASTER_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GMC_SRC_PITCH_OFFSET_CNTL:%x", buff, reg->bitfields.GMC_SRC_PITCH_OFFSET_CNTL);
  sprintf(buff,"%s GMC_DST_PITCH_OFFSET_CNTL:%x", buff, reg->bitfields.GMC_DST_PITCH_OFFSET_CNTL);
  sprintf(buff,"%s GMC_SRC_CLIPPING:%x", buff, reg->bitfields.GMC_SRC_CLIPPING);
  sprintf(buff,"%s GMC_DST_CLIPPING:%x", buff, reg->bitfields.GMC_DST_CLIPPING);
  sprintf(buff,"%s GMC_BRUSH_DATATYPE:%x", buff, reg->bitfields.GMC_BRUSH_DATATYPE);
  sprintf(buff,"%s GMC_DST_DATATYPE:%x", buff, reg->bitfields.GMC_DST_DATATYPE);
  sprintf(buff,"%s GMC_SRC_DATATYPE:%x", buff, reg->bitfields.GMC_SRC_DATATYPE);
  sprintf(buff,"%s GMC_BYTE_PIX_ORDER:%x", buff, reg->bitfields.GMC_BYTE_PIX_ORDER);
  sprintf(buff,"%s GMC_DEFAULT_SEL:%x", buff, reg->bitfields.GMC_DEFAULT_SEL);
  sprintf(buff,"%s GMC_ROP3:%x", buff, reg->bitfields.GMC_ROP3);
  sprintf(buff,"%s GMC_DP_SRC_SOURCE:%x", buff, reg->bitfields.GMC_DP_SRC_SOURCE);
  sprintf(buff,"%s GMC_SRC_DATATYPE2:%x", buff, reg->bitfields.GMC_SRC_DATATYPE2);
  sprintf(buff,"%s GMC_CLR_CMP_FCN_DIS:%x", buff, reg->bitfields.GMC_CLR_CMP_FCN_DIS);
  sprintf(buff,"%s GMC_WR_MSK_DIS:%x", buff, reg->bitfields.GMC_WR_MSK_DIS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SC_TOP_LEFT regSC_TOP_LEFT;

__inline void dump_SC_TOP_LEFT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSC_TOP_LEFT *reg = (regSC_TOP_LEFT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SC_LEFT:%x", buff, reg->bitfields.SC_LEFT);
  sprintf(buff,"%s SC_TOP:%x", buff, reg->bitfields.SC_TOP);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SC_BOTTOM_RIGHT regSC_BOTTOM_RIGHT;

__inline void dump_SC_BOTTOM_RIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSC_BOTTOM_RIGHT *reg = (regSC_BOTTOM_RIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SC_RIGHT:%x", buff, reg->bitfields.SC_RIGHT);
  sprintf(buff,"%s SC_BOTTOM:%x", buff, reg->bitfields.SC_BOTTOM);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SRC_SC_BOTTOM_RIGHT regSRC_SC_BOTTOM_RIGHT;

__inline void dump_SRC_SC_BOTTOM_RIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regSRC_SC_BOTTOM_RIGHT *reg = (regSRC_SC_BOTTOM_RIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SC_RIGHT:%x", buff, reg->bitfields.SC_RIGHT);
  sprintf(buff,"%s SC_BOTTOM:%x", buff, reg->bitfields.SC_BOTTOM);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG0 regDEBUG0;

__inline void dump_DEBUG0(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG0 *reg = (regDEBUG0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG1 regDEBUG1;

__inline void dump_DEBUG1(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG1 *reg = (regDEBUG1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG2 regDEBUG2;

__inline void dump_DEBUG2(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG2 *reg = (regDEBUG2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG3 regDEBUG3;

__inline void dump_DEBUG3(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG3 *reg = (regDEBUG3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG4 regDEBUG4;

__inline void dump_DEBUG4(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG4 *reg = (regDEBUG4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG5 regDEBUG5;

__inline void dump_DEBUG5(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG5 *reg = (regDEBUG5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG6 regDEBUG6;

__inline void dump_DEBUG6(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG6 *reg = (regDEBUG6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG7 regDEBUG7;

__inline void dump_DEBUG7(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG7 *reg = (regDEBUG7 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG8 regDEBUG8;

__inline void dump_DEBUG8(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG8 *reg = (regDEBUG8 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG9 regDEBUG9;

__inline void dump_DEBUG9(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG9 *reg = (regDEBUG9 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG10 regDEBUG10;

__inline void dump_DEBUG10(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG10 *reg = (regDEBUG10 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG11 regDEBUG11;

__inline void dump_DEBUG11(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG11 *reg = (regDEBUG11 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG12 regDEBUG12;

__inline void dump_DEBUG12(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG12 *reg = (regDEBUG12 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG13 regDEBUG13;

__inline void dump_DEBUG13(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG13 *reg = (regDEBUG13 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG14 regDEBUG14;

__inline void dump_DEBUG14(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG14 *reg = (regDEBUG14 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DEBUG15 regDEBUG15;

__inline void dump_DEBUG15(__in  unsigned int *dwreg, __in  char *buff)
{
  regDEBUG15 *reg = (regDEBUG15 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BIOS_0_SCRATCH regBIOS_0_SCRATCH;

__inline void dump_BIOS_0_SCRATCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regBIOS_0_SCRATCH *reg = (regBIOS_0_SCRATCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BIOS_1_SCRATCH regBIOS_1_SCRATCH;

__inline void dump_BIOS_1_SCRATCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regBIOS_1_SCRATCH *reg = (regBIOS_1_SCRATCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BIOS_2_SCRATCH regBIOS_2_SCRATCH;

__inline void dump_BIOS_2_SCRATCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regBIOS_2_SCRATCH *reg = (regBIOS_2_SCRATCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BIOS_3_SCRATCH regBIOS_3_SCRATCH;

__inline void dump_BIOS_3_SCRATCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regBIOS_3_SCRATCH *reg = (regBIOS_3_SCRATCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BIOS_4_SCRATCH regBIOS_4_SCRATCH;

__inline void dump_BIOS_4_SCRATCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regBIOS_4_SCRATCH *reg = (regBIOS_4_SCRATCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BIOS_5_SCRATCH regBIOS_5_SCRATCH;

__inline void dump_BIOS_5_SCRATCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regBIOS_5_SCRATCH *reg = (regBIOS_5_SCRATCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BIOS_6_SCRATCH regBIOS_6_SCRATCH;

__inline void dump_BIOS_6_SCRATCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regBIOS_6_SCRATCH *reg = (regBIOS_6_SCRATCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BIOS_7_SCRATCH regBIOS_7_SCRATCH;

__inline void dump_BIOS_7_SCRATCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regBIOS_7_SCRATCH *reg = (regBIOS_7_SCRATCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union I2C_CNTL_0 regI2C_CNTL_0;

__inline void dump_I2C_CNTL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regI2C_CNTL_0 *reg = (regI2C_CNTL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s I2C_DONE:%x", buff, reg->bitfields.I2C_DONE);
  sprintf(buff,"%s I2C_NACK:%x", buff, reg->bitfields.I2C_NACK);
  sprintf(buff,"%s I2C_HALT:%x", buff, reg->bitfields.I2C_HALT);
  sprintf(buff,"%s I2C_SOFT_RST:%x", buff, reg->bitfields.I2C_SOFT_RST);
  sprintf(buff,"%s I2C_DRIVE_EN:%x", buff, reg->bitfields.I2C_DRIVE_EN);
  sprintf(buff,"%s I2C_DRIVE_SEL:%x", buff, reg->bitfields.I2C_DRIVE_SEL);
  sprintf(buff,"%s I2C_START:%x", buff, reg->bitfields.I2C_START);
  sprintf(buff,"%s I2C_STOP:%x", buff, reg->bitfields.I2C_STOP);
  sprintf(buff,"%s I2C_RECEIVE:%x", buff, reg->bitfields.I2C_RECEIVE);
  sprintf(buff,"%s I2C_ABORT:%x", buff, reg->bitfields.I2C_ABORT);
  sprintf(buff,"%s I2C_GO:%x", buff, reg->bitfields.I2C_GO);
  sprintf(buff,"%s I2C_PRESCALE:%x", buff, reg->bitfields.I2C_PRESCALE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union I2C_CNTL_1 regI2C_CNTL_1;

__inline void dump_I2C_CNTL_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regI2C_CNTL_1 *reg = (regI2C_CNTL_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s I2C_DATA_COUNT:%x", buff, reg->bitfields.I2C_DATA_COUNT);
  sprintf(buff,"%s I2C_ADDR_COUNT:%x", buff, reg->bitfields.I2C_ADDR_COUNT);
  sprintf(buff,"%s I2C_INTRA_BYTE_DELAY:%x", buff, reg->bitfields.I2C_INTRA_BYTE_DELAY);
  sprintf(buff,"%s I2C_SEL:%x", buff, reg->bitfields.I2C_SEL);
  sprintf(buff,"%s I2C_EN:%x", buff, reg->bitfields.I2C_EN);
  sprintf(buff,"%s I2C_TIME_LIMIT:%x", buff, reg->bitfields.I2C_TIME_LIMIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union I2C_DATA regI2C_DATA;

__inline void dump_I2C_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regI2C_DATA *reg = (regI2C_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250CONFIG_XSTRAP regrv250CONFIG_XSTRAP;

__inline void dump_rv250CONFIG_XSTRAP(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250CONFIG_XSTRAP *reg = (regrv250CONFIG_XSTRAP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VGA_DISABLE:%x", buff, reg->bitfields.VGA_DISABLE);
  sprintf(buff,"%s BLANK_ROM:%x", buff, reg->bitfields.BLANK_ROM);
  sprintf(buff,"%s ENINTB:%x", buff, reg->bitfields.ENINTB);
  sprintf(buff,"%s MULTI_FUNC:%x", buff, reg->bitfields.MULTI_FUNC);
  sprintf(buff,"%s AGPSKEW:%x", buff, reg->bitfields.AGPSKEW);
  sprintf(buff,"%s X1CLK_SKEW:%x", buff, reg->bitfields.X1CLK_SKEW);
  sprintf(buff,"%s VIP_DEVICE:%x", buff, reg->bitfields.VIP_DEVICE);
  sprintf(buff,"%s ID_DISABLE:%x", buff, reg->bitfields.ID_DISABLE);
  sprintf(buff,"%s AP_SIZE:%x", buff, reg->bitfields.AP_SIZE);
  sprintf(buff,"%s ROMIDCFG:%x", buff, reg->bitfields.ROMIDCFG);
  sprintf(buff,"%s BUSCFG:%x", buff, reg->bitfields.BUSCFG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TEST_DEBUG_CNTL regTEST_DEBUG_CNTL;

__inline void dump_TEST_DEBUG_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTEST_DEBUG_CNTL *reg = (regTEST_DEBUG_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEST_DEBUG_OUT_EN:%x", buff, reg->bitfields.TEST_DEBUG_OUT_EN);
  sprintf(buff,"%s TEST_DEBUG_IN_EN:%x", buff, reg->bitfields.TEST_DEBUG_IN_EN);
  sprintf(buff,"%s TEST_IDDQ_EN:%x", buff, reg->bitfields.TEST_IDDQ_EN);
  sprintf(buff,"%s TEST_BLOCK_SEL:%x", buff, reg->bitfields.TEST_BLOCK_SEL);
  sprintf(buff,"%s TEST_ENABLE:%x", buff, reg->bitfields.TEST_ENABLE);
  sprintf(buff,"%s TEST_DELAY_IN:%x", buff, reg->bitfields.TEST_DELAY_IN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TEST_DEBUG_MUX regTEST_DEBUG_MUX;

__inline void dump_TEST_DEBUG_MUX(__in  unsigned int *dwreg, __in  char *buff)
{
  regTEST_DEBUG_MUX *reg = (regTEST_DEBUG_MUX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEST_DEBUG_SEL:%x", buff, reg->bitfields.TEST_DEBUG_SEL);
  sprintf(buff,"%s TEST_CLK0:%x", buff, reg->bitfields.TEST_CLK0);
  sprintf(buff,"%s TEST_CLK0_INV:%x", buff, reg->bitfields.TEST_CLK0_INV);
  sprintf(buff,"%s TEST_CLK1:%x", buff, reg->bitfields.TEST_CLK1);
  sprintf(buff,"%s TEST_CLK1_INV:%x", buff, reg->bitfields.TEST_CLK1_INV);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TEST_DEBUG_OUT regTEST_DEBUG_OUT;

__inline void dump_TEST_DEBUG_OUT(__in  unsigned int *dwreg, __in  char *buff)
{
  regTEST_DEBUG_OUT *reg = (regTEST_DEBUG_OUT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIDEOMUX_CNTL regVIDEOMUX_CNTL;

__inline void dump_VIDEOMUX_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIDEOMUX_CNTL *reg = (regVIDEOMUX_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPH_INT_SEL:%x", buff, reg->bitfields.VIPH_INT_SEL);
  sprintf(buff,"%s ROM_CLK_DIVIDE:%x", buff, reg->bitfields.ROM_CLK_DIVIDE);
  sprintf(buff,"%s STR_ROMCLK:%x", buff, reg->bitfields.STR_ROMCLK);
  sprintf(buff,"%s VIP_INTERNAL_DEBUG_SEL:%x", buff, reg->bitfields.VIP_INTERNAL_DEBUG_SEL);
  sprintf(buff,"%s GEYSERVILLE_SENSE:%x", buff, reg->bitfields.GEYSERVILLE_SENSE);
  sprintf(buff,"%s GEYSERVILLE_INT_POL:%x", buff, reg->bitfields.GEYSERVILLE_INT_POL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPPAD_STRENGTH_M6 regVIPPAD_STRENGTH_M6;

__inline void dump_VIPPAD_STRENGTH_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPPAD_STRENGTH_M6 *reg = (regVIPPAD_STRENGTH_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ZV_LCDDATA_STRENGTH:%x", buff, reg->bitfields.ZV_LCDDATA_STRENGTH);
  sprintf(buff,"%s ZV_LCDCNTL_STRENGTH:%x", buff, reg->bitfields.ZV_LCDCNTL_STRENGTH);
  sprintf(buff,"%s GPIO_STRENGTH:%x", buff, reg->bitfields.GPIO_STRENGTH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GPIOPAD_MASK regGPIOPAD_MASK;

__inline void dump_GPIOPAD_MASK(__in  unsigned int *dwreg, __in  char *buff)
{
  regGPIOPAD_MASK *reg = (regGPIOPAD_MASK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GPIOPAD_A regGPIOPAD_A;

__inline void dump_GPIOPAD_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regGPIOPAD_A *reg = (regGPIOPAD_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GPIOPAD_EN regGPIOPAD_EN;

__inline void dump_GPIOPAD_EN(__in  unsigned int *dwreg, __in  char *buff)
{
  regGPIOPAD_EN *reg = (regGPIOPAD_EN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GPIOPAD_Y regGPIOPAD_Y;

__inline void dump_GPIOPAD_Y(__in  unsigned int *dwreg, __in  char *buff)
{
  regGPIOPAD_Y *reg = (regGPIOPAD_Y *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ZV_LCDPAD_MASK regZV_LCDPAD_MASK;

__inline void dump_ZV_LCDPAD_MASK(__in  unsigned int *dwreg, __in  char *buff)
{
  regZV_LCDPAD_MASK *reg = (regZV_LCDPAD_MASK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ZV_LCDDATA_MASK:%x", buff, reg->bitfields.ZV_LCDDATA_MASK);
  sprintf(buff,"%s ZV_LCDCNTL_MASK:%x", buff, reg->bitfields.ZV_LCDCNTL_MASK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ZV_LCDPAD_A regZV_LCDPAD_A;

__inline void dump_ZV_LCDPAD_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regZV_LCDPAD_A *reg = (regZV_LCDPAD_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ZV_LCDDATA_A:%x", buff, reg->bitfields.ZV_LCDDATA_A);
  sprintf(buff,"%s ZV_LCDCNTL_A:%x", buff, reg->bitfields.ZV_LCDCNTL_A);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ZV_LCDPAD_EN regZV_LCDPAD_EN;

__inline void dump_ZV_LCDPAD_EN(__in  unsigned int *dwreg, __in  char *buff)
{
  regZV_LCDPAD_EN *reg = (regZV_LCDPAD_EN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ZV_LCDDATA_EN:%x", buff, reg->bitfields.ZV_LCDDATA_EN);
  sprintf(buff,"%s ZV_LCDCNTL_EN:%x", buff, reg->bitfields.ZV_LCDCNTL_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ZV_LCDPAD_Y regZV_LCDPAD_Y;

__inline void dump_ZV_LCDPAD_Y(__in  unsigned int *dwreg, __in  char *buff)
{
  regZV_LCDPAD_Y *reg = (regZV_LCDPAD_Y *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s ZV_LCDDATA_Y:%x", buff, reg->bitfields.ZV_LCDDATA_Y);
  sprintf(buff,"%s ZV_LCDCNTL_Y:%x", buff, reg->bitfields.ZV_LCDCNTL_Y);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union EXTERN_TRIG_CNTL regEXTERN_TRIG_CNTL;

__inline void dump_EXTERN_TRIG_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regEXTERN_TRIG_CNTL *reg = (regEXTERN_TRIG_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s EXTERN_TRIG_CLR:%x", buff, reg->bitfields.EXTERN_TRIG_CLR);
  sprintf(buff,"%s EXTERN_TRIG_READ:%x", buff, reg->bitfields.EXTERN_TRIG_READ);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ROM_INDEX regROM_INDEX;

__inline void dump_ROM_INDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regROM_INDEX *reg = (regROM_INDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union ROM_DATA regROM_DATA;

__inline void dump_ROM_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regROM_DATA *reg = (regROM_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SEPROM_CNTL1 regSEPROM_CNTL1;

__inline void dump_SEPROM_CNTL1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSEPROM_CNTL1 *reg = (regSEPROM_CNTL1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s WRITE_ENABLE:%x", buff, reg->bitfields.WRITE_ENABLE);
  sprintf(buff,"%s WRITE_DISABLE:%x", buff, reg->bitfields.WRITE_DISABLE);
  sprintf(buff,"%s READ_CONFIG:%x", buff, reg->bitfields.READ_CONFIG);
  sprintf(buff,"%s WRITE_CONFIG:%x", buff, reg->bitfields.WRITE_CONFIG);
  sprintf(buff,"%s READ_STATUS:%x", buff, reg->bitfields.READ_STATUS);
  sprintf(buff,"%s SECT_TO_SRAM:%x", buff, reg->bitfields.SECT_TO_SRAM);
  sprintf(buff,"%s READY_BUSY:%x", buff, reg->bitfields.READY_BUSY);
  sprintf(buff,"%s SEPROM_BUSY:%x", buff, reg->bitfields.SEPROM_BUSY);
  sprintf(buff,"%s BCNT_OVER_WTE_EN:%x", buff, reg->bitfields.BCNT_OVER_WTE_EN);
  sprintf(buff,"%s RB_MASKB:%x", buff, reg->bitfields.RB_MASKB);
  sprintf(buff,"%s SOFT_RESET:%x", buff, reg->bitfields.SOFT_RESET);
  sprintf(buff,"%s STATE_IDLEb:%x", buff, reg->bitfields.STATE_IDLEb);
  sprintf(buff,"%s BYTE_CNT:%x", buff, reg->bitfields.BYTE_CNT);
  sprintf(buff,"%s SCK_PRESCALE:%x", buff, reg->bitfields.SCK_PRESCALE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SEPROM_CNTL2 regSEPROM_CNTL2;

__inline void dump_SEPROM_CNTL2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSEPROM_CNTL2 *reg = (regSEPROM_CNTL2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s WAIT_CYCLE:%x", buff, reg->bitfields.WAIT_CYCLE);
  sprintf(buff,"%s AUTO_ADDR_SAMPLE:%x", buff, reg->bitfields.AUTO_ADDR_SAMPLE);
  sprintf(buff,"%s SEC_COMMAND:%x", buff, reg->bitfields.SEC_COMMAND);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIP_HW_DEBUG regVIP_HW_DEBUG;

__inline void dump_VIP_HW_DEBUG(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIP_HW_DEBUG *reg = (regVIP_HW_DEBUG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIP_HW_0_DEBUG:%x", buff, reg->bitfields.VIP_HW_0_DEBUG);
  sprintf(buff,"%s VIP_HW_1_DEBUG:%x", buff, reg->bitfields.VIP_HW_1_DEBUG);
  sprintf(buff,"%s VIP_HW_2_DEBUG:%x", buff, reg->bitfields.VIP_HW_2_DEBUG);
  sprintf(buff,"%s VIP_HW_3_DEBUG:%x", buff, reg->bitfields.VIP_HW_3_DEBUG);
  sprintf(buff,"%s VIP_HW_4_DEBUG:%x", buff, reg->bitfields.VIP_HW_4_DEBUG);
  sprintf(buff,"%s VIP_HW_5_DEBUG:%x", buff, reg->bitfields.VIP_HW_5_DEBUG);
  sprintf(buff,"%s VIP_HW_6_DEBUG:%x", buff, reg->bitfields.VIP_HW_6_DEBUG);
  sprintf(buff,"%s VIP_HW_7_DEBUG:%x", buff, reg->bitfields.VIP_HW_7_DEBUG);
  sprintf(buff,"%s VIP_HW_8_DEBUG:%x", buff, reg->bitfields.VIP_HW_8_DEBUG);
  sprintf(buff,"%s VIP_HW_9_DEBUG:%x", buff, reg->bitfields.VIP_HW_9_DEBUG);
  sprintf(buff,"%s VIP_HW_A_DEBUG:%x", buff, reg->bitfields.VIP_HW_A_DEBUG);
  sprintf(buff,"%s VIP_HW_B_DEBUG:%x", buff, reg->bitfields.VIP_HW_B_DEBUG);
  sprintf(buff,"%s VIP_HW_C_DEBUG:%x", buff, reg->bitfields.VIP_HW_C_DEBUG);
  sprintf(buff,"%s VIP_HW_D_DEBUG:%x", buff, reg->bitfields.VIP_HW_D_DEBUG);
  sprintf(buff,"%s VIP_HW_E_DEBUG:%x", buff, reg->bitfields.VIP_HW_E_DEBUG);
  sprintf(buff,"%s VIP_HW_F_DEBUG:%x", buff, reg->bitfields.VIP_HW_F_DEBUG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MEDIA_0_SCRATCH regMEDIA_0_SCRATCH;

__inline void dump_MEDIA_0_SCRATCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regMEDIA_0_SCRATCH *reg = (regMEDIA_0_SCRATCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MEDIA_1_SCRATCH regMEDIA_1_SCRATCH;

__inline void dump_MEDIA_1_SCRATCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regMEDIA_1_SCRATCH *reg = (regMEDIA_1_SCRATCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VID_BUFFER_CONTROL_M6 regVID_BUFFER_CONTROL_M6;

__inline void dump_VID_BUFFER_CONTROL_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regVID_BUFFER_CONTROL_M6 *reg = (regVID_BUFFER_CONTROL_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP0_BUFFER_WATER_MARK:%x", buff, reg->bitfields.CAP0_BUFFER_WATER_MARK);
  sprintf(buff,"%s FULL_BUFFER_EN:%x", buff, reg->bitfields.FULL_BUFFER_EN);
  sprintf(buff,"%s CAP0_ANC_VBI_QUAD_BUF:%x", buff, reg->bitfields.CAP0_ANC_VBI_QUAD_BUF);
  sprintf(buff,"%s VID_BUFFER_RESET:%x", buff, reg->bitfields.VID_BUFFER_RESET);
  sprintf(buff,"%s CAP_SWAP:%x", buff, reg->bitfields.CAP_SWAP);
  sprintf(buff,"%s CAP0_BUFFER_EMPTY:%x", buff, reg->bitfields.CAP0_BUFFER_EMPTY);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP_INT_CNTL regCAP_INT_CNTL;

__inline void dump_CAP_INT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP_INT_CNTL *reg = (regCAP_INT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP0_BUF0_INT_EN:%x", buff, reg->bitfields.CAP0_BUF0_INT_EN);
  sprintf(buff,"%s CAP0_BUF0_EVEN_INT_EN:%x", buff, reg->bitfields.CAP0_BUF0_EVEN_INT_EN);
  sprintf(buff,"%s CAP0_BUF1_INT_EN:%x", buff, reg->bitfields.CAP0_BUF1_INT_EN);
  sprintf(buff,"%s CAP0_BUF1_EVEN_INT_EN:%x", buff, reg->bitfields.CAP0_BUF1_EVEN_INT_EN);
  sprintf(buff,"%s CAP0_VBI0_INT_EN:%x", buff, reg->bitfields.CAP0_VBI0_INT_EN);
  sprintf(buff,"%s CAP0_VBI1_INT_EN:%x", buff, reg->bitfields.CAP0_VBI1_INT_EN);
  sprintf(buff,"%s CAP0_ONESHOT_INT_EN:%x", buff, reg->bitfields.CAP0_ONESHOT_INT_EN);
  sprintf(buff,"%s CAP0_ANC0_INT_EN:%x", buff, reg->bitfields.CAP0_ANC0_INT_EN);
  sprintf(buff,"%s CAP0_ANC1_INT_EN:%x", buff, reg->bitfields.CAP0_ANC1_INT_EN);
  sprintf(buff,"%s CAP0_VBI2_INT_EN:%x", buff, reg->bitfields.CAP0_VBI2_INT_EN);
  sprintf(buff,"%s CAP0_VBI3_INT_EN:%x", buff, reg->bitfields.CAP0_VBI3_INT_EN);
  sprintf(buff,"%s CAP0_ANC2_INT_EN:%x", buff, reg->bitfields.CAP0_ANC2_INT_EN);
  sprintf(buff,"%s CAP0_ANC3_INT_EN:%x", buff, reg->bitfields.CAP0_ANC3_INT_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP_INT_STATUS regCAP_INT_STATUS;

__inline void dump_CAP_INT_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP_INT_STATUS *reg = (regCAP_INT_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP0_BUF0_INT:%x", buff, reg->bitfields.CAP0_BUF0_INT);
  sprintf(buff,"%s CAP0_BUF0_EVEN_INT:%x", buff, reg->bitfields.CAP0_BUF0_EVEN_INT);
  sprintf(buff,"%s CAP0_BUF1_INT:%x", buff, reg->bitfields.CAP0_BUF1_INT);
  sprintf(buff,"%s CAP0_BUF1_EVEN_INT:%x", buff, reg->bitfields.CAP0_BUF1_EVEN_INT);
  sprintf(buff,"%s CAP0_VBI0_INT:%x", buff, reg->bitfields.CAP0_VBI0_INT);
  sprintf(buff,"%s CAP0_VBI1_INT:%x", buff, reg->bitfields.CAP0_VBI1_INT);
  sprintf(buff,"%s CAP0_ONESHOT_INT:%x", buff, reg->bitfields.CAP0_ONESHOT_INT);
  sprintf(buff,"%s CAP0_ANC0_INT:%x", buff, reg->bitfields.CAP0_ANC0_INT);
  sprintf(buff,"%s CAP0_ANC1_INT:%x", buff, reg->bitfields.CAP0_ANC1_INT);
  sprintf(buff,"%s CAP0_VBI2_INT:%x", buff, reg->bitfields.CAP0_VBI2_INT);
  sprintf(buff,"%s CAP0_VBI3_INT:%x", buff, reg->bitfields.CAP0_VBI3_INT);
  sprintf(buff,"%s CAP0_ANC2_INT:%x", buff, reg->bitfields.CAP0_ANC2_INT);
  sprintf(buff,"%s CAP0_ANC3_INT:%x", buff, reg->bitfields.CAP0_ANC3_INT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FCP_CNTL regFCP_CNTL;

__inline void dump_FCP_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regFCP_CNTL *reg = (regFCP_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_BUF0_OFFSET regCAP0_BUF0_OFFSET;

__inline void dump_CAP0_BUF0_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_BUF0_OFFSET *reg = (regCAP0_BUF0_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_BUF1_OFFSET regCAP0_BUF1_OFFSET;

__inline void dump_CAP0_BUF1_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_BUF1_OFFSET *reg = (regCAP0_BUF1_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_BUF0_EVEN_OFFSET regCAP0_BUF0_EVEN_OFFSET;

__inline void dump_CAP0_BUF0_EVEN_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_BUF0_EVEN_OFFSET *reg = (regCAP0_BUF0_EVEN_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_BUF1_EVEN_OFFSET regCAP0_BUF1_EVEN_OFFSET;

__inline void dump_CAP0_BUF1_EVEN_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_BUF1_EVEN_OFFSET *reg = (regCAP0_BUF1_EVEN_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_BUF_PITCH regCAP0_BUF_PITCH;

__inline void dump_CAP0_BUF_PITCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_BUF_PITCH *reg = (regCAP0_BUF_PITCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_V_WINDOW regCAP0_V_WINDOW;

__inline void dump_CAP0_V_WINDOW(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_V_WINDOW *reg = (regCAP0_V_WINDOW *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_V_START:%x", buff, reg->bitfields.CAP_V_START);
  sprintf(buff,"%s CAP_V_END:%x", buff, reg->bitfields.CAP_V_END);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_H_WINDOW regCAP0_H_WINDOW;

__inline void dump_CAP0_H_WINDOW(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_H_WINDOW *reg = (regCAP0_H_WINDOW *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_H_START:%x", buff, reg->bitfields.CAP_H_START);
  sprintf(buff,"%s CAP_H_WIDTH:%x", buff, reg->bitfields.CAP_H_WIDTH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_VBI0_OFFSET regCAP0_VBI0_OFFSET;

__inline void dump_CAP0_VBI0_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_VBI0_OFFSET *reg = (regCAP0_VBI0_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_VBI1_OFFSET regCAP0_VBI1_OFFSET;

__inline void dump_CAP0_VBI1_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_VBI1_OFFSET *reg = (regCAP0_VBI1_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_VBI_V_WINDOW regCAP0_VBI_V_WINDOW;

__inline void dump_CAP0_VBI_V_WINDOW(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_VBI_V_WINDOW *reg = (regCAP0_VBI_V_WINDOW *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_VBI_V_START:%x", buff, reg->bitfields.CAP_VBI_V_START);
  sprintf(buff,"%s CAP_VBI_V_END:%x", buff, reg->bitfields.CAP_VBI_V_END);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_VBI_H_WINDOW regCAP0_VBI_H_WINDOW;

__inline void dump_CAP0_VBI_H_WINDOW(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_VBI_H_WINDOW *reg = (regCAP0_VBI_H_WINDOW *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_VBI_H_START:%x", buff, reg->bitfields.CAP_VBI_H_START);
  sprintf(buff,"%s CAP_VBI_H_WIDTH:%x", buff, reg->bitfields.CAP_VBI_H_WIDTH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_PORT_MODE_CNTL regCAP0_PORT_MODE_CNTL;

__inline void dump_CAP0_PORT_MODE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_PORT_MODE_CNTL *reg = (regCAP0_PORT_MODE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_PORT_WIDTH:%x", buff, reg->bitfields.CAP_PORT_WIDTH);
  sprintf(buff,"%s CAP_PORT_BYTE_USED:%x", buff, reg->bitfields.CAP_PORT_BYTE_USED);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_TRIG_CNTL regCAP0_TRIG_CNTL;

__inline void dump_CAP0_TRIG_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_TRIG_CNTL *reg = (regCAP0_TRIG_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_TRIGGER_R:%x", buff, reg->bitfields.CAP_TRIGGER_R);
  sprintf(buff,"%s CAP_EN:%x", buff, reg->bitfields.CAP_EN);
  sprintf(buff,"%s CAP_VSYNC_CNT:%x", buff, reg->bitfields.CAP_VSYNC_CNT);
  sprintf(buff,"%s CAP_VSYNC_CLR:%x", buff, reg->bitfields.CAP_VSYNC_CLR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_DEBUG regCAP0_DEBUG;

__inline void dump_CAP0_DEBUG(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_DEBUG *reg = (regCAP0_DEBUG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_H_STATUS:%x", buff, reg->bitfields.CAP_H_STATUS);
  sprintf(buff,"%s CAP_V_STATUS:%x", buff, reg->bitfields.CAP_V_STATUS);
  sprintf(buff,"%s CAP_V_SYNC:%x", buff, reg->bitfields.CAP_V_SYNC);
  sprintf(buff,"%s CAP_BUF_OVERFLOW_STATUS:%x", buff, reg->bitfields.CAP_BUF_OVERFLOW_STATUS);
  sprintf(buff,"%s CAP_BUF_OVERFLOW_CLR:%x", buff, reg->bitfields.CAP_BUF_OVERFLOW_CLR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250CAP0_CONFIG regrv250CAP0_CONFIG;

__inline void dump_rv250CAP0_CONFIG(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250CAP0_CONFIG *reg = (regrv250CAP0_CONFIG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_INPUT_MODE:%x", buff, reg->bitfields.CAP_INPUT_MODE);
  sprintf(buff,"%s CAP_START_FIELD:%x", buff, reg->bitfields.CAP_START_FIELD);
  sprintf(buff,"%s CAP_START_BUF_R:%x", buff, reg->bitfields.CAP_START_BUF_R);
  sprintf(buff,"%s CAP_START_BUF_W:%x", buff, reg->bitfields.CAP_START_BUF_W);
  sprintf(buff,"%s CAP_BUF_TYPE:%x", buff, reg->bitfields.CAP_BUF_TYPE);
  sprintf(buff,"%s CAP_ONESHOT_MODE:%x", buff, reg->bitfields.CAP_ONESHOT_MODE);
  sprintf(buff,"%s CAP_BUF_MODE:%x", buff, reg->bitfields.CAP_BUF_MODE);
  sprintf(buff,"%s CAP_MIRROR_EN:%x", buff, reg->bitfields.CAP_MIRROR_EN);
  sprintf(buff,"%s CAP_ONESHOT_MIRROR_EN:%x", buff, reg->bitfields.CAP_ONESHOT_MIRROR_EN);
  sprintf(buff,"%s CAP_VIDEO_SIGNED_UV:%x", buff, reg->bitfields.CAP_VIDEO_SIGNED_UV);
  sprintf(buff,"%s CAP_ANC_DECODE_EN:%x", buff, reg->bitfields.CAP_ANC_DECODE_EN);
  sprintf(buff,"%s CAP_VBI_EN:%x", buff, reg->bitfields.CAP_VBI_EN);
  sprintf(buff,"%s CAP_SOFT_PULL_DOWN_EN:%x", buff, reg->bitfields.CAP_SOFT_PULL_DOWN_EN);
  sprintf(buff,"%s CAP_VIP_EXTEND_FLAG_EN:%x", buff, reg->bitfields.CAP_VIP_EXTEND_FLAG_EN);
  sprintf(buff,"%s CAP_FAKE_FIELD_EN:%x", buff, reg->bitfields.CAP_FAKE_FIELD_EN);
  sprintf(buff,"%s CAP_FIELD_START_LINE_DIFF:%x", buff, reg->bitfields.CAP_FIELD_START_LINE_DIFF);
  sprintf(buff,"%s CAP_HORZ_DOWN:%x", buff, reg->bitfields.CAP_HORZ_DOWN);
  sprintf(buff,"%s CAP_VERT_DOWN:%x", buff, reg->bitfields.CAP_VERT_DOWN);
  sprintf(buff,"%s CAP_STREAM_FORMAT:%x", buff, reg->bitfields.CAP_STREAM_FORMAT);
  sprintf(buff,"%s CAP_HDWNS_DEC:%x", buff, reg->bitfields.CAP_HDWNS_DEC);
  sprintf(buff,"%s CAP_IMAGE_FLIP_EN:%x", buff, reg->bitfields.CAP_IMAGE_FLIP_EN);
  sprintf(buff,"%s CAP_ONESHOT_IMAGE_FLIP_EN:%x", buff, reg->bitfields.CAP_ONESHOT_IMAGE_FLIP_EN);
  sprintf(buff,"%s CAP_VIDEO_IN_FORMAT:%x", buff, reg->bitfields.CAP_VIDEO_IN_FORMAT);
  sprintf(buff,"%s VBI_HORZ_DOWN:%x", buff, reg->bitfields.VBI_HORZ_DOWN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_ANC0_OFFSET regCAP0_ANC0_OFFSET;

__inline void dump_CAP0_ANC0_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_ANC0_OFFSET *reg = (regCAP0_ANC0_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_ANC1_OFFSET regCAP0_ANC1_OFFSET;

__inline void dump_CAP0_ANC1_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_ANC1_OFFSET *reg = (regCAP0_ANC1_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_ANC_H_WINDOW regCAP0_ANC_H_WINDOW;

__inline void dump_CAP0_ANC_H_WINDOW(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_ANC_H_WINDOW *reg = (regCAP0_ANC_H_WINDOW *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_VIDEO_SYNC_TEST regCAP0_VIDEO_SYNC_TEST;

__inline void dump_CAP0_VIDEO_SYNC_TEST(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_VIDEO_SYNC_TEST *reg = (regCAP0_VIDEO_SYNC_TEST *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_TEST_VID_SOF:%x", buff, reg->bitfields.CAP_TEST_VID_SOF);
  sprintf(buff,"%s CAP_TEST_VID_EOF:%x", buff, reg->bitfields.CAP_TEST_VID_EOF);
  sprintf(buff,"%s CAP_TEST_VID_EOL:%x", buff, reg->bitfields.CAP_TEST_VID_EOL);
  sprintf(buff,"%s CAP_TEST_VID_FIELD:%x", buff, reg->bitfields.CAP_TEST_VID_FIELD);
  sprintf(buff,"%s CAP_TEST_SYNC_EN:%x", buff, reg->bitfields.CAP_TEST_SYNC_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_ONESHOT_BUF_OFFSET regCAP0_ONESHOT_BUF_OFFSET;

__inline void dump_CAP0_ONESHOT_BUF_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_ONESHOT_BUF_OFFSET *reg = (regCAP0_ONESHOT_BUF_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_BUF_STATUS regCAP0_BUF_STATUS;

__inline void dump_CAP0_BUF_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_BUF_STATUS *reg = (regCAP0_BUF_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_PRE_VID_BUF:%x", buff, reg->bitfields.CAP_PRE_VID_BUF);
  sprintf(buff,"%s CAP_CUR_VID_BUF:%x", buff, reg->bitfields.CAP_CUR_VID_BUF);
  sprintf(buff,"%s CAP_PRE_FIELD:%x", buff, reg->bitfields.CAP_PRE_FIELD);
  sprintf(buff,"%s CAP_CUR_FIELD:%x", buff, reg->bitfields.CAP_CUR_FIELD);
  sprintf(buff,"%s CAP_PRE_VBI_BUF:%x", buff, reg->bitfields.CAP_PRE_VBI_BUF);
  sprintf(buff,"%s CAP_CUR_VBI_BUF:%x", buff, reg->bitfields.CAP_CUR_VBI_BUF);
  sprintf(buff,"%s CAP_VBI_BUF_STATUS:%x", buff, reg->bitfields.CAP_VBI_BUF_STATUS);
  sprintf(buff,"%s CAP_PRE_ANC_BUF:%x", buff, reg->bitfields.CAP_PRE_ANC_BUF);
  sprintf(buff,"%s CAP_CUR_ANC_BUF:%x", buff, reg->bitfields.CAP_CUR_ANC_BUF);
  sprintf(buff,"%s CAP_ANC_BUF_STATUS:%x", buff, reg->bitfields.CAP_ANC_BUF_STATUS);
  sprintf(buff,"%s CAP_ANC_PRE_BUF_CNT:%x", buff, reg->bitfields.CAP_ANC_PRE_BUF_CNT);
  sprintf(buff,"%s CAP_VIP_INC:%x", buff, reg->bitfields.CAP_VIP_INC);
  sprintf(buff,"%s CAP_VIP_PRE_REPEAT_FIELD:%x", buff, reg->bitfields.CAP_VIP_PRE_REPEAT_FIELD);
  sprintf(buff,"%s CAP_CAP_BUF_STATUS:%x", buff, reg->bitfields.CAP_CAP_BUF_STATUS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_ANC_BUF01_BLOCK_CNT regCAP0_ANC_BUF01_BLOCK_CNT;

__inline void dump_CAP0_ANC_BUF01_BLOCK_CNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_ANC_BUF01_BLOCK_CNT *reg = (regCAP0_ANC_BUF01_BLOCK_CNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP0_ANC_BUF0_BLOCK_CNT:%x", buff, reg->bitfields.CAP0_ANC_BUF0_BLOCK_CNT);
  sprintf(buff,"%s CAP0_ANC_BUF1_BLOCK_CNT:%x", buff, reg->bitfields.CAP0_ANC_BUF1_BLOCK_CNT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_ANC_BUF23_BLOCK_CNT regCAP0_ANC_BUF23_BLOCK_CNT;

__inline void dump_CAP0_ANC_BUF23_BLOCK_CNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_ANC_BUF23_BLOCK_CNT *reg = (regCAP0_ANC_BUF23_BLOCK_CNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP0_ANC_BUF2_BLOCK_CNT:%x", buff, reg->bitfields.CAP0_ANC_BUF2_BLOCK_CNT);
  sprintf(buff,"%s CAP0_ANC_BUF3_BLOCK_CNT:%x", buff, reg->bitfields.CAP0_ANC_BUF3_BLOCK_CNT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_VBI2_OFFSET regCAP0_VBI2_OFFSET;

__inline void dump_CAP0_VBI2_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_VBI2_OFFSET *reg = (regCAP0_VBI2_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_VBI3_OFFSET regCAP0_VBI3_OFFSET;

__inline void dump_CAP0_VBI3_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_VBI3_OFFSET *reg = (regCAP0_VBI3_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_ANC2_OFFSET regCAP0_ANC2_OFFSET;

__inline void dump_CAP0_ANC2_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_ANC2_OFFSET *reg = (regCAP0_ANC2_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_ANC3_OFFSET regCAP0_ANC3_OFFSET;

__inline void dump_CAP0_ANC3_OFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_ANC3_OFFSET *reg = (regCAP0_ANC3_OFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIPH0_COMMAND regDMA_VIPH0_COMMAND;

__inline void dump_DMA_VIPH0_COMMAND(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIPH0_COMMAND *reg = (regDMA_VIPH0_COMMAND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BYTE_COUNT:%x", buff, reg->bitfields.BYTE_COUNT);
  sprintf(buff,"%s SWAP_CONTROL:%x", buff, reg->bitfields.SWAP_CONTROL);
  sprintf(buff,"%s TRANSFER_SOURCE:%x", buff, reg->bitfields.TRANSFER_SOURCE);
  sprintf(buff,"%s TRANSFER_DEST:%x", buff, reg->bitfields.TRANSFER_DEST);
  sprintf(buff,"%s SOURCE_OFFSET_HOLD:%x", buff, reg->bitfields.SOURCE_OFFSET_HOLD);
  sprintf(buff,"%s DEST_OFFSET_HOLD:%x", buff, reg->bitfields.DEST_OFFSET_HOLD);
  sprintf(buff,"%s INTERRUPT_DIS:%x", buff, reg->bitfields.INTERRUPT_DIS);
  sprintf(buff,"%s END_OF_LIST_STATUS:%x", buff, reg->bitfields.END_OF_LIST_STATUS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIPH1_COMMAND regDMA_VIPH1_COMMAND;

__inline void dump_DMA_VIPH1_COMMAND(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIPH1_COMMAND *reg = (regDMA_VIPH1_COMMAND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BYTE_COUNT:%x", buff, reg->bitfields.BYTE_COUNT);
  sprintf(buff,"%s SWAP_CONTROL:%x", buff, reg->bitfields.SWAP_CONTROL);
  sprintf(buff,"%s TRANSFER_SOURCE:%x", buff, reg->bitfields.TRANSFER_SOURCE);
  sprintf(buff,"%s TRANSFER_DEST:%x", buff, reg->bitfields.TRANSFER_DEST);
  sprintf(buff,"%s SOURCE_OFFSET_HOLD:%x", buff, reg->bitfields.SOURCE_OFFSET_HOLD);
  sprintf(buff,"%s DEST_OFFSET_HOLD:%x", buff, reg->bitfields.DEST_OFFSET_HOLD);
  sprintf(buff,"%s INTERRUPT_DIS:%x", buff, reg->bitfields.INTERRUPT_DIS);
  sprintf(buff,"%s END_OF_LIST_STATUS:%x", buff, reg->bitfields.END_OF_LIST_STATUS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIPH2_COMMAND regDMA_VIPH2_COMMAND;

__inline void dump_DMA_VIPH2_COMMAND(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIPH2_COMMAND *reg = (regDMA_VIPH2_COMMAND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BYTE_COUNT:%x", buff, reg->bitfields.BYTE_COUNT);
  sprintf(buff,"%s SWAP_CONTROL:%x", buff, reg->bitfields.SWAP_CONTROL);
  sprintf(buff,"%s TRANSFER_SOURCE:%x", buff, reg->bitfields.TRANSFER_SOURCE);
  sprintf(buff,"%s TRANSFER_DEST:%x", buff, reg->bitfields.TRANSFER_DEST);
  sprintf(buff,"%s SOURCE_OFFSET_HOLD:%x", buff, reg->bitfields.SOURCE_OFFSET_HOLD);
  sprintf(buff,"%s DEST_OFFSET_HOLD:%x", buff, reg->bitfields.DEST_OFFSET_HOLD);
  sprintf(buff,"%s INTERRUPT_DIS:%x", buff, reg->bitfields.INTERRUPT_DIS);
  sprintf(buff,"%s END_OF_LIST_STATUS:%x", buff, reg->bitfields.END_OF_LIST_STATUS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIPH3_COMMAND regDMA_VIPH3_COMMAND;

__inline void dump_DMA_VIPH3_COMMAND(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIPH3_COMMAND *reg = (regDMA_VIPH3_COMMAND *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s BYTE_COUNT:%x", buff, reg->bitfields.BYTE_COUNT);
  sprintf(buff,"%s SWAP_CONTROL:%x", buff, reg->bitfields.SWAP_CONTROL);
  sprintf(buff,"%s TRANSFER_SOURCE:%x", buff, reg->bitfields.TRANSFER_SOURCE);
  sprintf(buff,"%s TRANSFER_DEST:%x", buff, reg->bitfields.TRANSFER_DEST);
  sprintf(buff,"%s SOURCE_OFFSET_HOLD:%x", buff, reg->bitfields.SOURCE_OFFSET_HOLD);
  sprintf(buff,"%s DEST_OFFSET_HOLD:%x", buff, reg->bitfields.DEST_OFFSET_HOLD);
  sprintf(buff,"%s INTERRUPT_DIS:%x", buff, reg->bitfields.INTERRUPT_DIS);
  sprintf(buff,"%s END_OF_LIST_STATUS:%x", buff, reg->bitfields.END_OF_LIST_STATUS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIPH_STATUS regDMA_VIPH_STATUS;

__inline void dump_DMA_VIPH_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIPH_STATUS *reg = (regDMA_VIPH_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DMA_VIPH0_AVAIL:%x", buff, reg->bitfields.DMA_VIPH0_AVAIL);
  sprintf(buff,"%s DMA_VIPH1_AVAIL:%x", buff, reg->bitfields.DMA_VIPH1_AVAIL);
  sprintf(buff,"%s DMA_VIPH2_AVAIL:%x", buff, reg->bitfields.DMA_VIPH2_AVAIL);
  sprintf(buff,"%s DMA_VIPH3_AVAIL:%x", buff, reg->bitfields.DMA_VIPH3_AVAIL);
  sprintf(buff,"%s DMA_VIPH0_CURRENT:%x", buff, reg->bitfields.DMA_VIPH0_CURRENT);
  sprintf(buff,"%s DMA_VIPH1_CURRENT:%x", buff, reg->bitfields.DMA_VIPH1_CURRENT);
  sprintf(buff,"%s DMA_VIPH2_CURRENT:%x", buff, reg->bitfields.DMA_VIPH2_CURRENT);
  sprintf(buff,"%s DMA_VIPH3_CURRENT:%x", buff, reg->bitfields.DMA_VIPH3_CURRENT);
  sprintf(buff,"%s DMA_VIPH0_ACTIVE:%x", buff, reg->bitfields.DMA_VIPH0_ACTIVE);
  sprintf(buff,"%s DMA_VIPH1_ACTIVE:%x", buff, reg->bitfields.DMA_VIPH1_ACTIVE);
  sprintf(buff,"%s DMA_VIPH2_ACTIVE:%x", buff, reg->bitfields.DMA_VIPH2_ACTIVE);
  sprintf(buff,"%s DMA_VIPH3_ACTIVE:%x", buff, reg->bitfields.DMA_VIPH3_ACTIVE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIPH_CHUNK_0 regDMA_VIPH_CHUNK_0;

__inline void dump_DMA_VIPH_CHUNK_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIPH_CHUNK_0 *reg = (regDMA_VIPH_CHUNK_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DMA_VIPH3_TABLE_SWAP:%x", buff, reg->bitfields.DMA_VIPH3_TABLE_SWAP);
  sprintf(buff,"%s DMA_VIPH2_TABLE_SWAP:%x", buff, reg->bitfields.DMA_VIPH2_TABLE_SWAP);
  sprintf(buff,"%s DMA_VIPH1_TABLE_SWAP:%x", buff, reg->bitfields.DMA_VIPH1_TABLE_SWAP);
  sprintf(buff,"%s DMA_VIPH0_TABLE_SWAP:%x", buff, reg->bitfields.DMA_VIPH0_TABLE_SWAP);
  sprintf(buff,"%s DMA_VIPH3_NOCHUNK:%x", buff, reg->bitfields.DMA_VIPH3_NOCHUNK);
  sprintf(buff,"%s DMA_VIPH2_NOCHUNK:%x", buff, reg->bitfields.DMA_VIPH2_NOCHUNK);
  sprintf(buff,"%s DMA_VIPH1_NOCHUNK:%x", buff, reg->bitfields.DMA_VIPH1_NOCHUNK);
  sprintf(buff,"%s DMA_VIPH0_NOCHUNK:%x", buff, reg->bitfields.DMA_VIPH0_NOCHUNK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIPH_CHUNK_1_VAL regDMA_VIPH_CHUNK_1_VAL;

__inline void dump_DMA_VIPH_CHUNK_1_VAL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIPH_CHUNK_1_VAL *reg = (regDMA_VIPH_CHUNK_1_VAL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DMA_VIP0_CHUNK:%x", buff, reg->bitfields.DMA_VIP0_CHUNK);
  sprintf(buff,"%s DMA_VIP1_CHUNK:%x", buff, reg->bitfields.DMA_VIP1_CHUNK);
  sprintf(buff,"%s DMA_VIP2_CHUNK:%x", buff, reg->bitfields.DMA_VIP2_CHUNK);
  sprintf(buff,"%s DMA_VIP3_CHUNK:%x", buff, reg->bitfields.DMA_VIP3_CHUNK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIP0_TABLE_ADDR regDMA_VIP0_TABLE_ADDR;

__inline void dump_DMA_VIP0_TABLE_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIP0_TABLE_ADDR *reg = (regDMA_VIP0_TABLE_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIP1_TABLE_ADDR regDMA_VIP1_TABLE_ADDR;

__inline void dump_DMA_VIP1_TABLE_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIP1_TABLE_ADDR *reg = (regDMA_VIP1_TABLE_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIP2_TABLE_ADDR regDMA_VIP2_TABLE_ADDR;

__inline void dump_DMA_VIP2_TABLE_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIP2_TABLE_ADDR *reg = (regDMA_VIP2_TABLE_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIP3_TABLE_ADDR regDMA_VIP3_TABLE_ADDR;

__inline void dump_DMA_VIP3_TABLE_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIP3_TABLE_ADDR *reg = (regDMA_VIP3_TABLE_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIPH0_ACTIVE regDMA_VIPH0_ACTIVE;

__inline void dump_DMA_VIPH0_ACTIVE(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIPH0_ACTIVE *reg = (regDMA_VIPH0_ACTIVE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIPH1_ACTIVE regDMA_VIPH1_ACTIVE;

__inline void dump_DMA_VIPH1_ACTIVE(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIPH1_ACTIVE *reg = (regDMA_VIPH1_ACTIVE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIPH2_ACTIVE regDMA_VIPH2_ACTIVE;

__inline void dump_DMA_VIPH2_ACTIVE(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIPH2_ACTIVE *reg = (regDMA_VIPH2_ACTIVE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIPH3_ACTIVE regDMA_VIPH3_ACTIVE;

__inline void dump_DMA_VIPH3_ACTIVE(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIPH3_ACTIVE *reg = (regDMA_VIPH3_ACTIVE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DMA_VIPH_ABORT regDMA_VIPH_ABORT;

__inline void dump_DMA_VIPH_ABORT(__in  unsigned int *dwreg, __in  char *buff)
{
  regDMA_VIPH_ABORT *reg = (regDMA_VIPH_ABORT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DMA_VIPH0_ABORT_EN:%x", buff, reg->bitfields.DMA_VIPH0_ABORT_EN);
  sprintf(buff,"%s DMA_VIPH1_ABORT_EN:%x", buff, reg->bitfields.DMA_VIPH1_ABORT_EN);
  sprintf(buff,"%s DMA_VIPH2_ABORT_EN:%x", buff, reg->bitfields.DMA_VIPH2_ABORT_EN);
  sprintf(buff,"%s DMA_VIPH3_ABORT_EN:%x", buff, reg->bitfields.DMA_VIPH3_ABORT_EN);
  sprintf(buff,"%s DMA_VIPH0_RESET:%x", buff, reg->bitfields.DMA_VIPH0_RESET);
  sprintf(buff,"%s DMA_VIPH1_RESET:%x", buff, reg->bitfields.DMA_VIPH1_RESET);
  sprintf(buff,"%s DMA_VIPH2_RESET:%x", buff, reg->bitfields.DMA_VIPH2_RESET);
  sprintf(buff,"%s DMA_VIPH3_RESET:%x", buff, reg->bitfields.DMA_VIPH3_RESET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_REG_ADDR regVIPH_REG_ADDR;

__inline void dump_VIPH_REG_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_REG_ADDR *reg = (regVIPH_REG_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_REG_DATA regVIPH_REG_DATA;

__inline void dump_VIPH_REG_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_REG_DATA *reg = (regVIPH_REG_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH0_DATA regVIPH_CH0_DATA;

__inline void dump_VIPH_CH0_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH0_DATA *reg = (regVIPH_CH0_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH1_DATA regVIPH_CH1_DATA;

__inline void dump_VIPH_CH1_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH1_DATA *reg = (regVIPH_CH1_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH2_DATA regVIPH_CH2_DATA;

__inline void dump_VIPH_CH2_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH2_DATA *reg = (regVIPH_CH2_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH3_DATA regVIPH_CH3_DATA;

__inline void dump_VIPH_CH3_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH3_DATA *reg = (regVIPH_CH3_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH0_ADDR regVIPH_CH0_ADDR;

__inline void dump_VIPH_CH0_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH0_ADDR *reg = (regVIPH_CH0_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH1_ADDR regVIPH_CH1_ADDR;

__inline void dump_VIPH_CH1_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH1_ADDR *reg = (regVIPH_CH1_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH2_ADDR regVIPH_CH2_ADDR;

__inline void dump_VIPH_CH2_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH2_ADDR *reg = (regVIPH_CH2_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH3_ADDR regVIPH_CH3_ADDR;

__inline void dump_VIPH_CH3_ADDR(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH3_ADDR *reg = (regVIPH_CH3_ADDR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH0_SBCNT regVIPH_CH0_SBCNT;

__inline void dump_VIPH_CH0_SBCNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH0_SBCNT *reg = (regVIPH_CH0_SBCNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH1_SBCNT regVIPH_CH1_SBCNT;

__inline void dump_VIPH_CH1_SBCNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH1_SBCNT *reg = (regVIPH_CH1_SBCNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH2_SBCNT regVIPH_CH2_SBCNT;

__inline void dump_VIPH_CH2_SBCNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH2_SBCNT *reg = (regVIPH_CH2_SBCNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH3_SBCNT regVIPH_CH3_SBCNT;

__inline void dump_VIPH_CH3_SBCNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH3_SBCNT *reg = (regVIPH_CH3_SBCNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH0_ABCNT regVIPH_CH0_ABCNT;

__inline void dump_VIPH_CH0_ABCNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH0_ABCNT *reg = (regVIPH_CH0_ABCNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH1_ABCNT regVIPH_CH1_ABCNT;

__inline void dump_VIPH_CH1_ABCNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH1_ABCNT *reg = (regVIPH_CH1_ABCNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH2_ABCNT regVIPH_CH2_ABCNT;

__inline void dump_VIPH_CH2_ABCNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH2_ABCNT *reg = (regVIPH_CH2_ABCNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CH3_ABCNT regVIPH_CH3_ABCNT;

__inline void dump_VIPH_CH3_ABCNT(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CH3_ABCNT *reg = (regVIPH_CH3_ABCNT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_CONTROL regVIPH_CONTROL;

__inline void dump_VIPH_CONTROL(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_CONTROL *reg = (regVIPH_CONTROL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPH_CLK_SEL:%x", buff, reg->bitfields.VIPH_CLK_SEL);
  sprintf(buff,"%s VIPH_REG_RDY:%x", buff, reg->bitfields.VIPH_REG_RDY);
  sprintf(buff,"%s VIPH_MAX_WAIT:%x", buff, reg->bitfields.VIPH_MAX_WAIT);
  sprintf(buff,"%s VIPH_DMA_MODE:%x", buff, reg->bitfields.VIPH_DMA_MODE);
  sprintf(buff,"%s VIPH_EN:%x", buff, reg->bitfields.VIPH_EN);
  sprintf(buff,"%s VIPH_DV0_WID:%x", buff, reg->bitfields.VIPH_DV0_WID);
  sprintf(buff,"%s VIPH_DV1_WID:%x", buff, reg->bitfields.VIPH_DV1_WID);
  sprintf(buff,"%s VIPH_DV2_WID:%x", buff, reg->bitfields.VIPH_DV2_WID);
  sprintf(buff,"%s VIPH_DV3_WID:%x", buff, reg->bitfields.VIPH_DV3_WID);
  sprintf(buff,"%s VIPH_PWR_DOWN:%x", buff, reg->bitfields.VIPH_PWR_DOWN);
  sprintf(buff,"%s VIPH_VIPCLK_DIS:%x", buff, reg->bitfields.VIPH_VIPCLK_DIS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_DV_LAT regVIPH_DV_LAT;

__inline void dump_VIPH_DV_LAT(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_DV_LAT *reg = (regVIPH_DV_LAT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPH_TIME_UNIT:%x", buff, reg->bitfields.VIPH_TIME_UNIT);
  sprintf(buff,"%s VIPH_DV0_LAT:%x", buff, reg->bitfields.VIPH_DV0_LAT);
  sprintf(buff,"%s VIPH_DV1_LAT:%x", buff, reg->bitfields.VIPH_DV1_LAT);
  sprintf(buff,"%s VIPH_DV2_LAT:%x", buff, reg->bitfields.VIPH_DV2_LAT);
  sprintf(buff,"%s VIPH_DV3_LAT:%x", buff, reg->bitfields.VIPH_DV3_LAT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_DMA_CHUNK regVIPH_DMA_CHUNK;

__inline void dump_VIPH_DMA_CHUNK(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_DMA_CHUNK *reg = (regVIPH_DMA_CHUNK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPH_CH0_CHUNK:%x", buff, reg->bitfields.VIPH_CH0_CHUNK);
  sprintf(buff,"%s VIPH_CH1_CHUNK:%x", buff, reg->bitfields.VIPH_CH1_CHUNK);
  sprintf(buff,"%s VIPH_CH2_CHUNK:%x", buff, reg->bitfields.VIPH_CH2_CHUNK);
  sprintf(buff,"%s VIPH_CH3_CHUNK:%x", buff, reg->bitfields.VIPH_CH3_CHUNK);
  sprintf(buff,"%s VIPH_CH0_ABORT:%x", buff, reg->bitfields.VIPH_CH0_ABORT);
  sprintf(buff,"%s VIPH_CH1_ABORT:%x", buff, reg->bitfields.VIPH_CH1_ABORT);
  sprintf(buff,"%s VIPH_CH2_ABORT:%x", buff, reg->bitfields.VIPH_CH2_ABORT);
  sprintf(buff,"%s VIPH_CH3_ABORT:%x", buff, reg->bitfields.VIPH_CH3_ABORT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_DV_INT regVIPH_DV_INT;

__inline void dump_VIPH_DV_INT(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_DV_INT *reg = (regVIPH_DV_INT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPH_DV0_INT_EN:%x", buff, reg->bitfields.VIPH_DV0_INT_EN);
  sprintf(buff,"%s VIPH_DV1_INT_EN:%x", buff, reg->bitfields.VIPH_DV1_INT_EN);
  sprintf(buff,"%s VIPH_DV2_INT_EN:%x", buff, reg->bitfields.VIPH_DV2_INT_EN);
  sprintf(buff,"%s VIPH_DV3_INT_EN:%x", buff, reg->bitfields.VIPH_DV3_INT_EN);
  sprintf(buff,"%s VIPH_DV0_INT:%x", buff, reg->bitfields.VIPH_DV0_INT);
  sprintf(buff,"%s VIPH_DV1_INT:%x", buff, reg->bitfields.VIPH_DV1_INT);
  sprintf(buff,"%s VIPH_DV2_INT:%x", buff, reg->bitfields.VIPH_DV2_INT);
  sprintf(buff,"%s VIPH_DV3_INT:%x", buff, reg->bitfields.VIPH_DV3_INT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPH_TIMEOUT_STAT regVIPH_TIMEOUT_STAT;

__inline void dump_VIPH_TIMEOUT_STAT(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPH_TIMEOUT_STAT *reg = (regVIPH_TIMEOUT_STAT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPH_FIFO0_STAT:%x", buff, reg->bitfields.VIPH_FIFO0_STAT);
  sprintf(buff,"%s VIPH_FIFO1_STAT:%x", buff, reg->bitfields.VIPH_FIFO1_STAT);
  sprintf(buff,"%s VIPH_FIFO2_STAT:%x", buff, reg->bitfields.VIPH_FIFO2_STAT);
  sprintf(buff,"%s VIPH_FIFO3_STAT:%x", buff, reg->bitfields.VIPH_FIFO3_STAT);
  sprintf(buff,"%s VIPH_REG_STAT:%x", buff, reg->bitfields.VIPH_REG_STAT);
  sprintf(buff,"%s VIPH_AUTO_INT_STAT:%x", buff, reg->bitfields.VIPH_AUTO_INT_STAT);
  sprintf(buff,"%s VIPH_FIFO0_MASK:%x", buff, reg->bitfields.VIPH_FIFO0_MASK);
  sprintf(buff,"%s VIPH_FIFO1_MASK:%x", buff, reg->bitfields.VIPH_FIFO1_MASK);
  sprintf(buff,"%s VIPH_FIFO2_MASK:%x", buff, reg->bitfields.VIPH_FIFO2_MASK);
  sprintf(buff,"%s VIPH_FIFO3_MASK:%x", buff, reg->bitfields.VIPH_FIFO3_MASK);
  sprintf(buff,"%s VIPH_REG_MASK:%x", buff, reg->bitfields.VIPH_REG_MASK);
  sprintf(buff,"%s VIPH_AUTO_INT_MASK:%x", buff, reg->bitfields.VIPH_AUTO_INT_MASK);
  sprintf(buff,"%s VIPH_DV0_INT_MASK:%x", buff, reg->bitfields.VIPH_DV0_INT_MASK);
  sprintf(buff,"%s VIPH_DV1_INT_MASK:%x", buff, reg->bitfields.VIPH_DV1_INT_MASK);
  sprintf(buff,"%s VIPH_DV2_INT_MASK:%x", buff, reg->bitfields.VIPH_DV2_INT_MASK);
  sprintf(buff,"%s VIPH_DV3_INT_MASK:%x", buff, reg->bitfields.VIPH_DV3_INT_MASK);
  sprintf(buff,"%s VIPH_INTPIN_EN:%x", buff, reg->bitfields.VIPH_INTPIN_EN);
  sprintf(buff,"%s VIPH_INTPIN_INT:%x", buff, reg->bitfields.VIPH_INTPIN_INT);
  sprintf(buff,"%s VIPH_REGR_DIS:%x", buff, reg->bitfields.VIPH_REGR_DIS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CLK_PIN_CNTL regCLK_PIN_CNTL;

__inline void dump_CLK_PIN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCLK_PIN_CNTL *reg = (regCLK_PIN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OSC_EN:%x", buff, reg->bitfields.OSC_EN);
  sprintf(buff,"%s XTL_LOW_GAIN:%x", buff, reg->bitfields.XTL_LOW_GAIN);
  sprintf(buff,"%s DONT_USE_XTALIN:%x", buff, reg->bitfields.DONT_USE_XTALIN);
  sprintf(buff,"%s SLOW_CLOCK_SOURCE:%x", buff, reg->bitfields.SLOW_CLOCK_SOURCE);
  sprintf(buff,"%s CG_CLK_TO_OUTPIN:%x", buff, reg->bitfields.CG_CLK_TO_OUTPIN);
  sprintf(buff,"%s CG_COUNT_UP_TO_OUTPIN:%x", buff, reg->bitfields.CG_COUNT_UP_TO_OUTPIN);
  sprintf(buff,"%s ACCESS_REGS_IN_SUSPEND:%x", buff, reg->bitfields.ACCESS_REGS_IN_SUSPEND);
  sprintf(buff,"%s CG_SPARE:%x", buff, reg->bitfields.CG_SPARE);
  sprintf(buff,"%s SCLK_DYN_START_CNTL:%x", buff, reg->bitfields.SCLK_DYN_START_CNTL);
  sprintf(buff,"%s CP_CLK_RUNNING:%x", buff, reg->bitfields.CP_CLK_RUNNING);
  sprintf(buff,"%s CG_SPARE_RD:%x", buff, reg->bitfields.CG_SPARE_RD);
  sprintf(buff,"%s XTALIN_ALWAYS_ONb:%x", buff, reg->bitfields.XTALIN_ALWAYS_ONb);
  sprintf(buff,"%s PWRSEQ_DELAY:%x", buff, reg->bitfields.PWRSEQ_DELAY);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PPLL_CNTL regPPLL_CNTL;

__inline void dump_PPLL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regPPLL_CNTL *reg = (regPPLL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PPLL_RESET:%x", buff, reg->bitfields.PPLL_RESET);
  sprintf(buff,"%s PPLL_SLEEP:%x", buff, reg->bitfields.PPLL_SLEEP);
  sprintf(buff,"%s PPLL_TST_EN:%x", buff, reg->bitfields.PPLL_TST_EN);
  sprintf(buff,"%s PPLL_REFCLK_SEL:%x", buff, reg->bitfields.PPLL_REFCLK_SEL);
  sprintf(buff,"%s PPLL_FBCLK_SEL:%x", buff, reg->bitfields.PPLL_FBCLK_SEL);
  sprintf(buff,"%s PPLL_TCPOFF:%x", buff, reg->bitfields.PPLL_TCPOFF);
  sprintf(buff,"%s PPLL_TVCOMAX:%x", buff, reg->bitfields.PPLL_TVCOMAX);
  sprintf(buff,"%s PPLL_PCP:%x", buff, reg->bitfields.PPLL_PCP);
  sprintf(buff,"%s PPLL_PVG:%x", buff, reg->bitfields.PPLL_PVG);
  sprintf(buff,"%s PPLL_PDC:%x", buff, reg->bitfields.PPLL_PDC);
  sprintf(buff,"%s PPLL_ATOMIC_UPDATE_EN:%x", buff, reg->bitfields.PPLL_ATOMIC_UPDATE_EN);
  sprintf(buff,"%s PPLL_VGA_ATOMIC_UPDATE_EN:%x", buff, reg->bitfields.PPLL_VGA_ATOMIC_UPDATE_EN);
  sprintf(buff,"%s PPLL_ATOMIC_UPDATE_SYNC:%x", buff, reg->bitfields.PPLL_ATOMIC_UPDATE_SYNC);
  sprintf(buff,"%s PPLL_DISABLE_AUTO_RESET:%x", buff, reg->bitfields.PPLL_DISABLE_AUTO_RESET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PPLL_REF_DIV regPPLL_REF_DIV;

__inline void dump_PPLL_REF_DIV(__in  unsigned int *dwreg, __in  char *buff)
{
  regPPLL_REF_DIV *reg = (regPPLL_REF_DIV *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PPLL_REF_DIV:%x", buff, reg->bitfields.PPLL_REF_DIV);
  sprintf(buff,"%s PPLL_ATOMIC_UPDATE_W:%x", buff, reg->bitfields.PPLL_ATOMIC_UPDATE_W);
  sprintf(buff,"%s PPLL_REF_DIV_SRC:%x", buff, reg->bitfields.PPLL_REF_DIV_SRC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SPLL_CNTL regSPLL_CNTL;

__inline void dump_SPLL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSPLL_CNTL *reg = (regSPLL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SPLL_SLEEP:%x", buff, reg->bitfields.SPLL_SLEEP);
  sprintf(buff,"%s SPLL_RESET:%x", buff, reg->bitfields.SPLL_RESET);
  sprintf(buff,"%s SPLL_TST_EN:%x", buff, reg->bitfields.SPLL_TST_EN);
  sprintf(buff,"%s SPLL_REFCLK_SEL:%x", buff, reg->bitfields.SPLL_REFCLK_SEL);
  sprintf(buff,"%s SPLL_FBCLK_SEL:%x", buff, reg->bitfields.SPLL_FBCLK_SEL);
  sprintf(buff,"%s SPLL_TCPOFF:%x", buff, reg->bitfields.SPLL_TCPOFF);
  sprintf(buff,"%s SPLL_TVCOMAX:%x", buff, reg->bitfields.SPLL_TVCOMAX);
  sprintf(buff,"%s SPLL_PCP:%x", buff, reg->bitfields.SPLL_PCP);
  sprintf(buff,"%s SPLL_PVG:%x", buff, reg->bitfields.SPLL_PVG);
  sprintf(buff,"%s SPLL_PDC:%x", buff, reg->bitfields.SPLL_PDC);
  sprintf(buff,"%s SPLL_X1_CLK_SKEW:%x", buff, reg->bitfields.SPLL_X1_CLK_SKEW);
  sprintf(buff,"%s SPLL_X2_CLK_SKEW:%x", buff, reg->bitfields.SPLL_X2_CLK_SKEW);
  sprintf(buff,"%s SPLL_MODE:%x", buff, reg->bitfields.SPLL_MODE);
  sprintf(buff,"%s MYCLK_SOURCED_FROM_SPLL_SEL:%x", buff, reg->bitfields.MYCLK_SOURCED_FROM_SPLL_SEL);
  sprintf(buff,"%s ENABLE_MYCLK_FROM_SPLL:%x", buff, reg->bitfields.ENABLE_MYCLK_FROM_SPLL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250SPLL_AUX_CNTL regrv250SPLL_AUX_CNTL;

__inline void dump_rv250SPLL_AUX_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250SPLL_AUX_CNTL *reg = (regrv250SPLL_AUX_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SPLL_PDC_C:%x", buff, reg->bitfields.SPLL_PDC_C);
  sprintf(buff,"%s SPLL_CKINVA:%x", buff, reg->bitfields.SPLL_CKINVA);
  sprintf(buff,"%s SPLL_CKINVC:%x", buff, reg->bitfields.SPLL_CKINVC);
  sprintf(buff,"%s SPLL_X3_CLK_SKEW:%x", buff, reg->bitfields.SPLL_X3_CLK_SKEW);
  sprintf(buff,"%s SPLL_MODEC:%x", buff, reg->bitfields.SPLL_MODEC);
  sprintf(buff,"%s TRANSIT_DONE_LENGTH:%x", buff, reg->bitfields.TRANSIT_DONE_LENGTH);
  sprintf(buff,"%s SPLL_REFCLK_SRC_SEL:%x", buff, reg->bitfields.SPLL_REFCLK_SRC_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCLK_CNTL_M6 regSCLK_CNTL_M6;

__inline void dump_SCLK_CNTL_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCLK_CNTL_M6 *reg = (regSCLK_CNTL_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SCLK_SRC_SEL:%x", buff, reg->bitfields.SCLK_SRC_SEL);
  sprintf(buff,"%s CP_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.CP_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s HDP_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.HDP_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s TV_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.TV_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s E2_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.E2_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s SE_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.SE_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s IDCT_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.IDCT_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s VIP_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.VIP_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s RE_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.RE_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s PB_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.PB_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s TAM_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.TAM_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s TDM_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.TDM_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s RB_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.RB_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s FORCE_DISP2:%x", buff, reg->bitfields.FORCE_DISP2);
  sprintf(buff,"%s FORCE_CP:%x", buff, reg->bitfields.FORCE_CP);
  sprintf(buff,"%s FORCE_HDP:%x", buff, reg->bitfields.FORCE_HDP);
  sprintf(buff,"%s FORCE_DISP1:%x", buff, reg->bitfields.FORCE_DISP1);
  sprintf(buff,"%s FORCE_TOP:%x", buff, reg->bitfields.FORCE_TOP);
  sprintf(buff,"%s FORCE_E2:%x", buff, reg->bitfields.FORCE_E2);
  sprintf(buff,"%s FORCE_SE:%x", buff, reg->bitfields.FORCE_SE);
  sprintf(buff,"%s FORCE_IDCT:%x", buff, reg->bitfields.FORCE_IDCT);
  sprintf(buff,"%s FORCE_VIP:%x", buff, reg->bitfields.FORCE_VIP);
  sprintf(buff,"%s FORCE_RE:%x", buff, reg->bitfields.FORCE_RE);
  sprintf(buff,"%s FORCE_PB:%x", buff, reg->bitfields.FORCE_PB);
  sprintf(buff,"%s FORCE_TAM:%x", buff, reg->bitfields.FORCE_TAM);
  sprintf(buff,"%s FORCE_TDM:%x", buff, reg->bitfields.FORCE_TDM);
  sprintf(buff,"%s FORCE_RB:%x", buff, reg->bitfields.FORCE_RB);
  sprintf(buff,"%s FORCE_TV_SCLK:%x", buff, reg->bitfields.FORCE_TV_SCLK);
  sprintf(buff,"%s FORCE_SUBPIC:%x", buff, reg->bitfields.FORCE_SUBPIC);
  sprintf(buff,"%s FORCE_OV0:%x", buff, reg->bitfields.FORCE_OV0);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AGP_PLL_CNTL regAGP_PLL_CNTL;

__inline void dump_AGP_PLL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regAGP_PLL_CNTL *reg = (regAGP_PLL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s APLL_SLEEP:%x", buff, reg->bitfields.APLL_SLEEP);
  sprintf(buff,"%s APLL_RESET:%x", buff, reg->bitfields.APLL_RESET);
  sprintf(buff,"%s APLL_XSEL:%x", buff, reg->bitfields.APLL_XSEL);
  sprintf(buff,"%s APLL_TST_EN:%x", buff, reg->bitfields.APLL_TST_EN);
  sprintf(buff,"%s APLL_TCPOFF:%x", buff, reg->bitfields.APLL_TCPOFF);
  sprintf(buff,"%s APLL_TVCOMAX:%x", buff, reg->bitfields.APLL_TVCOMAX);
  sprintf(buff,"%s APLL_REF_SKEW:%x", buff, reg->bitfields.APLL_REF_SKEW);
  sprintf(buff,"%s APLL_FB_SKEW:%x", buff, reg->bitfields.APLL_FB_SKEW);
  sprintf(buff,"%s APLL_X0_CLK_SKEW:%x", buff, reg->bitfields.APLL_X0_CLK_SKEW);
  sprintf(buff,"%s APLL_X1_CLK_SKEW:%x", buff, reg->bitfields.APLL_X1_CLK_SKEW);
  sprintf(buff,"%s APLL_PUMP_GAIN:%x", buff, reg->bitfields.APLL_PUMP_GAIN);
  sprintf(buff,"%s APLL_VCO_GAIN:%x", buff, reg->bitfields.APLL_VCO_GAIN);
  sprintf(buff,"%s APLL_SEL_SKWADJ_PCICLK:%x", buff, reg->bitfields.APLL_SEL_SKWADJ_PCICLK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_PLL_FINE_CNTL regTV_PLL_FINE_CNTL;

__inline void dump_TV_PLL_FINE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_PLL_FINE_CNTL *reg = (regTV_PLL_FINE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TV_M1:%x", buff, reg->bitfields.TV_M1);
  sprintf(buff,"%s TV_N1:%x", buff, reg->bitfields.TV_N1);
  sprintf(buff,"%s TV_DIVIDER_SEL:%x", buff, reg->bitfields.TV_DIVIDER_SEL);
  sprintf(buff,"%s TV_MNFLIP_REQ:%x", buff, reg->bitfields.TV_MNFLIP_REQ);
  sprintf(buff,"%s TV_MNFLIP_DONE:%x", buff, reg->bitfields.TV_MNFLIP_DONE);
  sprintf(buff,"%s TV_SLIP_REQ:%x", buff, reg->bitfields.TV_SLIP_REQ);
  sprintf(buff,"%s TV_SLIP_DONE:%x", buff, reg->bitfields.TV_SLIP_DONE);
  sprintf(buff,"%s TV_MNFLIP_EN:%x", buff, reg->bitfields.TV_MNFLIP_EN);
  sprintf(buff,"%s TV_SLIP_COUNT:%x", buff, reg->bitfields.TV_SLIP_COUNT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_PLL_CNTL regTV_PLL_CNTL;

__inline void dump_TV_PLL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_PLL_CNTL *reg = (regTV_PLL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TV_M0_LO:%x", buff, reg->bitfields.TV_M0_LO);
  sprintf(buff,"%s TV_N0_LO:%x", buff, reg->bitfields.TV_N0_LO);
  sprintf(buff,"%s TV_M0_HI:%x", buff, reg->bitfields.TV_M0_HI);
  sprintf(buff,"%s TV_N0_HI:%x", buff, reg->bitfields.TV_N0_HI);
  sprintf(buff,"%s TV_SLIP_EN:%x", buff, reg->bitfields.TV_SLIP_EN);
  sprintf(buff,"%s TV_P:%x", buff, reg->bitfields.TV_P);
  sprintf(buff,"%s TV_DTO_EN:%x", buff, reg->bitfields.TV_DTO_EN);
  sprintf(buff,"%s TV_DTO_TYPE:%x", buff, reg->bitfields.TV_DTO_TYPE);
  sprintf(buff,"%s TV_REF_CLK_SEL:%x", buff, reg->bitfields.TV_REF_CLK_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_PLL_CNTL1 regTV_PLL_CNTL1;

__inline void dump_TV_PLL_CNTL1(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_PLL_CNTL1 *reg = (regTV_PLL_CNTL1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TVPLL_RESET:%x", buff, reg->bitfields.TVPLL_RESET);
  sprintf(buff,"%s TVPLL_SLEEP:%x", buff, reg->bitfields.TVPLL_SLEEP);
  sprintf(buff,"%s TVPLL_REFCLK_SEL:%x", buff, reg->bitfields.TVPLL_REFCLK_SEL);
  sprintf(buff,"%s TVPLL_FBCLK_SEL:%x", buff, reg->bitfields.TVPLL_FBCLK_SEL);
  sprintf(buff,"%s TVPLL_TCPOFF:%x", buff, reg->bitfields.TVPLL_TCPOFF);
  sprintf(buff,"%s TVPLL_TVCOMAX:%x", buff, reg->bitfields.TVPLL_TVCOMAX);
  sprintf(buff,"%s TVPCP:%x", buff, reg->bitfields.TVPCP);
  sprintf(buff,"%s TVPVG:%x", buff, reg->bitfields.TVPVG);
  sprintf(buff,"%s TVPDC:%x", buff, reg->bitfields.TVPDC);
  sprintf(buff,"%s TVCLK_SRC_SEL:%x", buff, reg->bitfields.TVCLK_SRC_SEL);
  sprintf(buff,"%s TVPLL_TEST:%x", buff, reg->bitfields.TVPLL_TEST);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TV_DTO_INCREMENTS regTV_DTO_INCREMENTS;

__inline void dump_TV_DTO_INCREMENTS(__in  unsigned int *dwreg, __in  char *buff)
{
  regTV_DTO_INCREMENTS *reg = (regTV_DTO_INCREMENTS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TV_DTO_INC0:%x", buff, reg->bitfields.TV_DTO_INC0);
  sprintf(buff,"%s TV_DTO_INC1:%x", buff, reg->bitfields.TV_DTO_INC1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union P2PLL_CNTL regP2PLL_CNTL;

__inline void dump_P2PLL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regP2PLL_CNTL *reg = (regP2PLL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s P2PLL_RESET:%x", buff, reg->bitfields.P2PLL_RESET);
  sprintf(buff,"%s P2PLL_SLEEP:%x", buff, reg->bitfields.P2PLL_SLEEP);
  sprintf(buff,"%s P2PLL_TST_EN:%x", buff, reg->bitfields.P2PLL_TST_EN);
  sprintf(buff,"%s P2PLL_REFCLK_SEL:%x", buff, reg->bitfields.P2PLL_REFCLK_SEL);
  sprintf(buff,"%s P2PLL_FBCLK_SEL:%x", buff, reg->bitfields.P2PLL_FBCLK_SEL);
  sprintf(buff,"%s P2PLL_TCPOFF:%x", buff, reg->bitfields.P2PLL_TCPOFF);
  sprintf(buff,"%s P2PLL_TVCOMAX:%x", buff, reg->bitfields.P2PLL_TVCOMAX);
  sprintf(buff,"%s P2PLL_PCP:%x", buff, reg->bitfields.P2PLL_PCP);
  sprintf(buff,"%s P2PLL_PVG:%x", buff, reg->bitfields.P2PLL_PVG);
  sprintf(buff,"%s P2PLL_PDC:%x", buff, reg->bitfields.P2PLL_PDC);
  sprintf(buff,"%s P2PLL_ATOMIC_UPDATE_EN:%x", buff, reg->bitfields.P2PLL_ATOMIC_UPDATE_EN);
  sprintf(buff,"%s P2PLL_ATOMIC_UPDATE_SYNC:%x", buff, reg->bitfields.P2PLL_ATOMIC_UPDATE_SYNC);
  sprintf(buff,"%s P2PLL_DISABLE_AUTO_RESET:%x", buff, reg->bitfields.P2PLL_DISABLE_AUTO_RESET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union P2PLL_REF_DIV regP2PLL_REF_DIV;

__inline void dump_P2PLL_REF_DIV(__in  unsigned int *dwreg, __in  char *buff)
{
  regP2PLL_REF_DIV *reg = (regP2PLL_REF_DIV *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s P2PLL_REF_DIV:%x", buff, reg->bitfields.P2PLL_REF_DIV);
  sprintf(buff,"%s P2PLL_ATOMIC_UPDATE_W:%x", buff, reg->bitfields.P2PLL_ATOMIC_UPDATE_W);
  sprintf(buff,"%s P2PLL_REF_DIV_SRC:%x", buff, reg->bitfields.P2PLL_REF_DIV_SRC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SSPLL_CNTL regSSPLL_CNTL;

__inline void dump_SSPLL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSSPLL_CNTL *reg = (regSSPLL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SSPLL_RESET:%x", buff, reg->bitfields.SSPLL_RESET);
  sprintf(buff,"%s SSPLL_SLEEP:%x", buff, reg->bitfields.SSPLL_SLEEP);
  sprintf(buff,"%s SSPLL_TST_EN:%x", buff, reg->bitfields.SSPLL_TST_EN);
  sprintf(buff,"%s SSPLL_REFCLK_SEL:%x", buff, reg->bitfields.SSPLL_REFCLK_SEL);
  sprintf(buff,"%s SSPLL_FBCLK_SEL:%x", buff, reg->bitfields.SSPLL_FBCLK_SEL);
  sprintf(buff,"%s SSPLL_TCPOFF:%x", buff, reg->bitfields.SSPLL_TCPOFF);
  sprintf(buff,"%s SSPLL_TVCOMAX:%x", buff, reg->bitfields.SSPLL_TVCOMAX);
  sprintf(buff,"%s SSPLL_PCP:%x", buff, reg->bitfields.SSPLL_PCP);
  sprintf(buff,"%s SSPLL_PVG:%x", buff, reg->bitfields.SSPLL_PVG);
  sprintf(buff,"%s SSPLL_PDC:%x", buff, reg->bitfields.SSPLL_PDC);
  sprintf(buff,"%s SSPLL_ATOMIC_UPDATE_EN:%x", buff, reg->bitfields.SSPLL_ATOMIC_UPDATE_EN);
  sprintf(buff,"%s SSPLL_ATOMIC_UPDATE_SYNC:%x", buff, reg->bitfields.SSPLL_ATOMIC_UPDATE_SYNC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SSPLL_REF_DIV regSSPLL_REF_DIV;

__inline void dump_SSPLL_REF_DIV(__in  unsigned int *dwreg, __in  char *buff)
{
  regSSPLL_REF_DIV *reg = (regSSPLL_REF_DIV *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SSPLL_REF_DIV:%x", buff, reg->bitfields.SSPLL_REF_DIV);
  sprintf(buff,"%s SSPLL_ATOMIC_UPDATE_W:%x", buff, reg->bitfields.SSPLL_ATOMIC_UPDATE_W);
  sprintf(buff,"%s SSPLL_REF_DIV_SRC:%x", buff, reg->bitfields.SSPLL_REF_DIV_SRC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SSPLL_DIV_0 regSSPLL_DIV_0;

__inline void dump_SSPLL_DIV_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSSPLL_DIV_0 *reg = (regSSPLL_DIV_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SSPLL_FB_DIV:%x", buff, reg->bitfields.SSPLL_FB_DIV);
  sprintf(buff,"%s SSPLL_FB_DIV_FRACTION:%x", buff, reg->bitfields.SSPLL_FB_DIV_FRACTION);
  sprintf(buff,"%s SSPLL_ATOMIC_UPDATE_W:%x", buff, reg->bitfields.SSPLL_ATOMIC_UPDATE_W);
  sprintf(buff,"%s SSPLL_POST_DIV:%x", buff, reg->bitfields.SSPLL_POST_DIV);
  sprintf(buff,"%s SSPLL_FB_DIV_FRACTION_UPDATE:%x", buff, reg->bitfields.SSPLL_FB_DIV_FRACTION_UPDATE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SS_INT_CNTL regSS_INT_CNTL;

__inline void dump_SS_INT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSS_INT_CNTL *reg = (regSS_INT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SS_INT_EN:%x", buff, reg->bitfields.SS_INT_EN);
  sprintf(buff,"%s SS_INT_SEL:%x", buff, reg->bitfields.SS_INT_SEL);
  sprintf(buff,"%s SS_STEP_SIZE:%x", buff, reg->bitfields.SS_STEP_SIZE);
  sprintf(buff,"%s SS_DELAY:%x", buff, reg->bitfields.SS_DELAY);
  sprintf(buff,"%s SS_DELTA_FRACTION:%x", buff, reg->bitfields.SS_DELTA_FRACTION);
  sprintf(buff,"%s SS_DELTA_INTEGER:%x", buff, reg->bitfields.SS_DELTA_INTEGER);
  sprintf(buff,"%s SS_PLL_DISPLAY_SRC:%x", buff, reg->bitfields.SS_PLL_DISPLAY_SRC);
  sprintf(buff,"%s SS_PLL_DISPLAY_EN:%x", buff, reg->bitfields.SS_PLL_DISPLAY_EN);
  sprintf(buff,"%s SS_BUF_GENLOCK_EN:%x", buff, reg->bitfields.SS_BUF_GENLOCK_EN);
  sprintf(buff,"%s SS_BUF_GENLOCK_THRESHOLD:%x", buff, reg->bitfields.SS_BUF_GENLOCK_THRESHOLD);
  sprintf(buff,"%s SS_BUF_GENLOCK_DURATION:%x", buff, reg->bitfields.SS_BUF_GENLOCK_DURATION);
  sprintf(buff,"%s SS_BUF_GENLOCK_HEIGHT:%x", buff, reg->bitfields.SS_BUF_GENLOCK_HEIGHT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SS_TST_CNTL regSS_TST_CNTL;

__inline void dump_SS_TST_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSS_TST_CNTL *reg = (regSS_TST_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SS_TST_CNT:%x", buff, reg->bitfields.SS_TST_CNT);
  sprintf(buff,"%s SS_TST_CNT_SEL:%x", buff, reg->bitfields.SS_TST_CNT_SEL);
  sprintf(buff,"%s SS_TST_GE:%x", buff, reg->bitfields.SS_TST_GE);
  sprintf(buff,"%s SS_TST_LE:%x", buff, reg->bitfields.SS_TST_LE);
  sprintf(buff,"%s SS_TST_DEC:%x", buff, reg->bitfields.SS_TST_DEC);
  sprintf(buff,"%s ANALOG_MON_SS:%x", buff, reg->bitfields.ANALOG_MON_SS);
  sprintf(buff,"%s EXP_IMPLEMENTATION_EN:%x", buff, reg->bitfields.EXP_IMPLEMENTATION_EN);
  sprintf(buff,"%s SS_ANTIGLITCH_EN:%x", buff, reg->bitfields.SS_ANTIGLITCH_EN);
  sprintf(buff,"%s HDP_BUSY_HALF_SCLK:%x", buff, reg->bitfields.HDP_BUSY_HALF_SCLK);
  sprintf(buff,"%s EN_DIV2_HALF_SCLK:%x", buff, reg->bitfields.EN_DIV2_HALF_SCLK);
  sprintf(buff,"%s SS_TST_MODE:%x", buff, reg->bitfields.SS_TST_MODE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCLK_MORE_CNTL regSCLK_MORE_CNTL;

__inline void dump_SCLK_MORE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCLK_MORE_CNTL *reg = (regSCLK_MORE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISPREGS_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.DISPREGS_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s MC_GUI_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.MC_GUI_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s MC_HOST_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.MC_HOST_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s FORCE_DISPREGS:%x", buff, reg->bitfields.FORCE_DISPREGS);
  sprintf(buff,"%s FORCE_MC_GUI:%x", buff, reg->bitfields.FORCE_MC_GUI);
  sprintf(buff,"%s FORCE_MC_HOST:%x", buff, reg->bitfields.FORCE_MC_HOST);
  sprintf(buff,"%s STOP_SCLK_EN:%x", buff, reg->bitfields.STOP_SCLK_EN);
  sprintf(buff,"%s STOP_SCLK_A:%x", buff, reg->bitfields.STOP_SCLK_A);
  sprintf(buff,"%s STOP_SCLK_B:%x", buff, reg->bitfields.STOP_SCLK_B);
  sprintf(buff,"%s STOP_SCLK_C:%x", buff, reg->bitfields.STOP_SCLK_C);
  sprintf(buff,"%s HALF_SPEED_SCLK:%x", buff, reg->bitfields.HALF_SPEED_SCLK);
  sprintf(buff,"%s IO_CG_VOLTAGE_DROP:%x", buff, reg->bitfields.IO_CG_VOLTAGE_DROP);
  sprintf(buff,"%s TVFB_SOFT_RESET:%x", buff, reg->bitfields.TVFB_SOFT_RESET);
  sprintf(buff,"%s VOLTAGE_DROP_SYNC:%x", buff, reg->bitfields.VOLTAGE_DROP_SYNC);
  sprintf(buff,"%s VOLTAGE_DELAY_SEL:%x", buff, reg->bitfields.VOLTAGE_DELAY_SEL);
  sprintf(buff,"%s IDLE_DELAY_HALF_SCLK:%x", buff, reg->bitfields.IDLE_DELAY_HALF_SCLK);
  sprintf(buff,"%s AGP_BUSY_HALF_SCLK:%x", buff, reg->bitfields.AGP_BUSY_HALF_SCLK);
  sprintf(buff,"%s CG_SPARE_RD_C:%x", buff, reg->bitfields.CG_SPARE_RD_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CLK_PWRMGT_CNTL_M6 regCLK_PWRMGT_CNTL_M6;

__inline void dump_CLK_PWRMGT_CNTL_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regCLK_PWRMGT_CNTL_M6 *reg = (regCLK_PWRMGT_CNTL_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MPLL_PWRMGT_OFF:%x", buff, reg->bitfields.MPLL_PWRMGT_OFF);
  sprintf(buff,"%s SPLL_PWRMGT_OFF:%x", buff, reg->bitfields.SPLL_PWRMGT_OFF);
  sprintf(buff,"%s PPLL_PWRMGT_OFF:%x", buff, reg->bitfields.PPLL_PWRMGT_OFF);
  sprintf(buff,"%s P2PLL_PWRMGT_OFF:%x", buff, reg->bitfields.P2PLL_PWRMGT_OFF);
  sprintf(buff,"%s MCLK_TURNOFF:%x", buff, reg->bitfields.MCLK_TURNOFF);
  sprintf(buff,"%s SCLK_TURNOFF:%x", buff, reg->bitfields.SCLK_TURNOFF);
  sprintf(buff,"%s PCLK_TURNOFF:%x", buff, reg->bitfields.PCLK_TURNOFF);
  sprintf(buff,"%s P2CLK_TURNOFF:%x", buff, reg->bitfields.P2CLK_TURNOFF);
  sprintf(buff,"%s MC_CH_MODE:%x", buff, reg->bitfields.MC_CH_MODE);
  sprintf(buff,"%s TEST_MODE:%x", buff, reg->bitfields.TEST_MODE);
  sprintf(buff,"%s GLOBAL_PMAN_EN:%x", buff, reg->bitfields.GLOBAL_PMAN_EN);
  sprintf(buff,"%s ENGINE_DYNCLK_MODE:%x", buff, reg->bitfields.ENGINE_DYNCLK_MODE);
  sprintf(buff,"%s ACTIVE_HILO_LAT:%x", buff, reg->bitfields.ACTIVE_HILO_LAT);
  sprintf(buff,"%s DISP_DYN_STOP_LAT:%x", buff, reg->bitfields.DISP_DYN_STOP_LAT);
  sprintf(buff,"%s MC_BUSY:%x", buff, reg->bitfields.MC_BUSY);
  sprintf(buff,"%s MC_INT_CNTL:%x", buff, reg->bitfields.MC_INT_CNTL);
  sprintf(buff,"%s MC_SWITCH:%x", buff, reg->bitfields.MC_SWITCH);
  sprintf(buff,"%s DLL_READY:%x", buff, reg->bitfields.DLL_READY);
  sprintf(buff,"%s DISP_PM:%x", buff, reg->bitfields.DISP_PM);
  sprintf(buff,"%s DYN_STOP_MODE:%x", buff, reg->bitfields.DYN_STOP_MODE);
  sprintf(buff,"%s CG_NO1_DEBUG:%x", buff, reg->bitfields.CG_NO1_DEBUG);
  sprintf(buff,"%s TVPLL_PWRMGT_OFF:%x", buff, reg->bitfields.TVPLL_PWRMGT_OFF);
  sprintf(buff,"%s TVCLK_TURNOFF:%x", buff, reg->bitfields.TVCLK_TURNOFF);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250PLL_PWRMGT_CNTL regrv250PLL_PWRMGT_CNTL;

__inline void dump_rv250PLL_PWRMGT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250PLL_PWRMGT_CNTL *reg = (regrv250PLL_PWRMGT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MPLL_TURNOFF:%x", buff, reg->bitfields.MPLL_TURNOFF);
  sprintf(buff,"%s SPLL_TURNOFF:%x", buff, reg->bitfields.SPLL_TURNOFF);
  sprintf(buff,"%s PPLL_TURNOFF:%x", buff, reg->bitfields.PPLL_TURNOFF);
  sprintf(buff,"%s P2PLL_TURNOFF:%x", buff, reg->bitfields.P2PLL_TURNOFF);
  sprintf(buff,"%s TVPLL_TURNOFF:%x", buff, reg->bitfields.TVPLL_TURNOFF);
  sprintf(buff,"%s AGPCLK_DYN_STOP_LAT:%x", buff, reg->bitfields.AGPCLK_DYN_STOP_LAT);
  sprintf(buff,"%s APM_POWER_STATE:%x", buff, reg->bitfields.APM_POWER_STATE);
  sprintf(buff,"%s APM_PWRSTATE_RD:%x", buff, reg->bitfields.APM_PWRSTATE_RD);
  sprintf(buff,"%s PM_MODE_SEL:%x", buff, reg->bitfields.PM_MODE_SEL);
  sprintf(buff,"%s EN_PWRSEQ_DONE_COND:%x", buff, reg->bitfields.EN_PWRSEQ_DONE_COND);
  sprintf(buff,"%s EN_DISP_PARKED_COND:%x", buff, reg->bitfields.EN_DISP_PARKED_COND);
  sprintf(buff,"%s MOBILE_SU:%x", buff, reg->bitfields.MOBILE_SU);
  sprintf(buff,"%s SU_SCLK_USE_BCLK:%x", buff, reg->bitfields.SU_SCLK_USE_BCLK);
  sprintf(buff,"%s SU_MCLK_USE_BCLK:%x", buff, reg->bitfields.SU_MCLK_USE_BCLK);
  sprintf(buff,"%s SU_SUSTAIN_DISABLE:%x", buff, reg->bitfields.SU_SUSTAIN_DISABLE);
  sprintf(buff,"%s TCL_BYPASS_DISABLE:%x", buff, reg->bitfields.TCL_BYPASS_DISABLE);
  sprintf(buff,"%s TCL_CLOCK_ACTIVE_RD:%x", buff, reg->bitfields.TCL_CLOCK_ACTIVE_RD);
  sprintf(buff,"%s CG_NO2_DEBUG:%x", buff, reg->bitfields.CG_NO2_DEBUG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250M_SPLL_REF_FB_DIV regrv250M_SPLL_REF_FB_DIV;

__inline void dump_rv250M_SPLL_REF_FB_DIV(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250M_SPLL_REF_FB_DIV *reg = (regrv250M_SPLL_REF_FB_DIV *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s M_SPLL_REF_DIV:%x", buff, reg->bitfields.M_SPLL_REF_DIV);
  sprintf(buff,"%s MPLL_FB_DIV:%x", buff, reg->bitfields.MPLL_FB_DIV);
  sprintf(buff,"%s SPLL_FB_DIV:%x", buff, reg->bitfields.SPLL_FB_DIV);
  sprintf(buff,"%s MPLL_REF_SRC_SEL:%x", buff, reg->bitfields.MPLL_REF_SRC_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MPLL_CNTL regMPLL_CNTL;

__inline void dump_MPLL_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMPLL_CNTL *reg = (regMPLL_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MPLL_RESET:%x", buff, reg->bitfields.MPLL_RESET);
  sprintf(buff,"%s MPLL_SLEEP:%x", buff, reg->bitfields.MPLL_SLEEP);
  sprintf(buff,"%s MPLL_TST_EN:%x", buff, reg->bitfields.MPLL_TST_EN);
  sprintf(buff,"%s MPLL_REFCLK_SEL:%x", buff, reg->bitfields.MPLL_REFCLK_SEL);
  sprintf(buff,"%s MPLL_FBCLK_SEL:%x", buff, reg->bitfields.MPLL_FBCLK_SEL);
  sprintf(buff,"%s MPLL_TCPOFF:%x", buff, reg->bitfields.MPLL_TCPOFF);
  sprintf(buff,"%s MPLL_TVCOMAX:%x", buff, reg->bitfields.MPLL_TVCOMAX);
  sprintf(buff,"%s MPLL_PCP:%x", buff, reg->bitfields.MPLL_PCP);
  sprintf(buff,"%s MPLL_PVG:%x", buff, reg->bitfields.MPLL_PVG);
  sprintf(buff,"%s MPLL_PDC:%x", buff, reg->bitfields.MPLL_PDC);
  sprintf(buff,"%s MPLL_X1_CLK_SKEW:%x", buff, reg->bitfields.MPLL_X1_CLK_SKEW);
  sprintf(buff,"%s MPLL_X2_CLK_SKEW:%x", buff, reg->bitfields.MPLL_X2_CLK_SKEW);
  sprintf(buff,"%s MPLL_MODE:%x", buff, reg->bitfields.MPLL_MODE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250MPLL_AUX_CNTL regrv250MPLL_AUX_CNTL;

__inline void dump_rv250MPLL_AUX_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250MPLL_AUX_CNTL *reg = (regrv250MPLL_AUX_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MPLL_PDC_C:%x", buff, reg->bitfields.MPLL_PDC_C);
  sprintf(buff,"%s MPLL_CKINVA:%x", buff, reg->bitfields.MPLL_CKINVA);
  sprintf(buff,"%s MPLL_CKINVC:%x", buff, reg->bitfields.MPLL_CKINVC);
  sprintf(buff,"%s MPLL_X3_CLK_SKEW:%x", buff, reg->bitfields.MPLL_X3_CLK_SKEW);
  sprintf(buff,"%s MPLL_MODEC:%x", buff, reg->bitfields.MPLL_MODEC);
  sprintf(buff,"%s MPLL_TEST_COUNT:%x", buff, reg->bitfields.MPLL_TEST_COUNT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MDLL_CKO regMDLL_CKO;

__inline void dump_MDLL_CKO(__in  unsigned int *dwreg, __in  char *buff)
{
  regMDLL_CKO *reg = (regMDLL_CKO *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MCKOA_SLEEP:%x", buff, reg->bitfields.MCKOA_SLEEP);
  sprintf(buff,"%s MCKOA_RESET:%x", buff, reg->bitfields.MCKOA_RESET);
  sprintf(buff,"%s MCKOA_RANGE:%x", buff, reg->bitfields.MCKOA_RANGE);
  sprintf(buff,"%s ERSTA_SOUTSEL:%x", buff, reg->bitfields.ERSTA_SOUTSEL);
  sprintf(buff,"%s MCKOA_FB_SEL:%x", buff, reg->bitfields.MCKOA_FB_SEL);
  sprintf(buff,"%s MCKOA_REF_SKEW:%x", buff, reg->bitfields.MCKOA_REF_SKEW);
  sprintf(buff,"%s MCKOA_FB_SKEW:%x", buff, reg->bitfields.MCKOA_FB_SKEW);
  sprintf(buff,"%s MCKOA_BP_SEL:%x", buff, reg->bitfields.MCKOA_BP_SEL);
  sprintf(buff,"%s MCKOB_SLEEP:%x", buff, reg->bitfields.MCKOB_SLEEP);
  sprintf(buff,"%s MCKOB_RESET:%x", buff, reg->bitfields.MCKOB_RESET);
  sprintf(buff,"%s MCKOB_RANGE:%x", buff, reg->bitfields.MCKOB_RANGE);
  sprintf(buff,"%s ERSTB_SOUTSEL:%x", buff, reg->bitfields.ERSTB_SOUTSEL);
  sprintf(buff,"%s MCKOB_FB_SEL:%x", buff, reg->bitfields.MCKOB_FB_SEL);
  sprintf(buff,"%s MCKOB_REF_SKEW:%x", buff, reg->bitfields.MCKOB_REF_SKEW);
  sprintf(buff,"%s MCKOB_FB_SKEW:%x", buff, reg->bitfields.MCKOB_FB_SKEW);
  sprintf(buff,"%s MCKOB_BP_SEL:%x", buff, reg->bitfields.MCKOB_BP_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MDLL_RDCKA regMDLL_RDCKA;

__inline void dump_MDLL_RDCKA(__in  unsigned int *dwreg, __in  char *buff)
{
  regMDLL_RDCKA *reg = (regMDLL_RDCKA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MRDCKA0_SLEEP:%x", buff, reg->bitfields.MRDCKA0_SLEEP);
  sprintf(buff,"%s MRDCKA0_RESET:%x", buff, reg->bitfields.MRDCKA0_RESET);
  sprintf(buff,"%s MRDCKA0_RANGE:%x", buff, reg->bitfields.MRDCKA0_RANGE);
  sprintf(buff,"%s MRDCKA0_REF_SEL:%x", buff, reg->bitfields.MRDCKA0_REF_SEL);
  sprintf(buff,"%s MRDCKA0_FB_SEL:%x", buff, reg->bitfields.MRDCKA0_FB_SEL);
  sprintf(buff,"%s MRDCKA0_REF_SKEW:%x", buff, reg->bitfields.MRDCKA0_REF_SKEW);
  sprintf(buff,"%s MRDCKA0_SINSEL:%x", buff, reg->bitfields.MRDCKA0_SINSEL);
  sprintf(buff,"%s MRDCKA0_FB_SKEW:%x", buff, reg->bitfields.MRDCKA0_FB_SKEW);
  sprintf(buff,"%s MRDCKA0_BP_SEL:%x", buff, reg->bitfields.MRDCKA0_BP_SEL);
  sprintf(buff,"%s MRDCKA1_SLEEP:%x", buff, reg->bitfields.MRDCKA1_SLEEP);
  sprintf(buff,"%s MRDCKA1_RESET:%x", buff, reg->bitfields.MRDCKA1_RESET);
  sprintf(buff,"%s MRDCKA1_RANGE:%x", buff, reg->bitfields.MRDCKA1_RANGE);
  sprintf(buff,"%s MRDCKA1_REF_SEL:%x", buff, reg->bitfields.MRDCKA1_REF_SEL);
  sprintf(buff,"%s MRDCKA1_FB_SEL:%x", buff, reg->bitfields.MRDCKA1_FB_SEL);
  sprintf(buff,"%s MRDCKA1_REF_SKEW:%x", buff, reg->bitfields.MRDCKA1_REF_SKEW);
  sprintf(buff,"%s MRDCKA1_SINSEL:%x", buff, reg->bitfields.MRDCKA1_SINSEL);
  sprintf(buff,"%s MRDCKA1_FB_SKEW:%x", buff, reg->bitfields.MRDCKA1_FB_SKEW);
  sprintf(buff,"%s MRDCKA1_BP_SEL:%x", buff, reg->bitfields.MRDCKA1_BP_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MDLL_RDCKB regMDLL_RDCKB;

__inline void dump_MDLL_RDCKB(__in  unsigned int *dwreg, __in  char *buff)
{
  regMDLL_RDCKB *reg = (regMDLL_RDCKB *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MRDCKB0_SLEEP:%x", buff, reg->bitfields.MRDCKB0_SLEEP);
  sprintf(buff,"%s MRDCKB0_RESET:%x", buff, reg->bitfields.MRDCKB0_RESET);
  sprintf(buff,"%s MRDCKB0_RANGE:%x", buff, reg->bitfields.MRDCKB0_RANGE);
  sprintf(buff,"%s MRDCKB0_REF_SEL:%x", buff, reg->bitfields.MRDCKB0_REF_SEL);
  sprintf(buff,"%s MRDCKB0_FB_SEL:%x", buff, reg->bitfields.MRDCKB0_FB_SEL);
  sprintf(buff,"%s MRDCKB0_REF_SKEW:%x", buff, reg->bitfields.MRDCKB0_REF_SKEW);
  sprintf(buff,"%s MRDCKB0_SINSEL:%x", buff, reg->bitfields.MRDCKB0_SINSEL);
  sprintf(buff,"%s MRDCKB0_FB_SKEW:%x", buff, reg->bitfields.MRDCKB0_FB_SKEW);
  sprintf(buff,"%s MRDCKB0_BP_SEL:%x", buff, reg->bitfields.MRDCKB0_BP_SEL);
  sprintf(buff,"%s MRDCKB1_SLEEP:%x", buff, reg->bitfields.MRDCKB1_SLEEP);
  sprintf(buff,"%s MRDCKB1_RESET:%x", buff, reg->bitfields.MRDCKB1_RESET);
  sprintf(buff,"%s MRDCKB1_RANGE:%x", buff, reg->bitfields.MRDCKB1_RANGE);
  sprintf(buff,"%s MRDCKB1_REF_SEL:%x", buff, reg->bitfields.MRDCKB1_REF_SEL);
  sprintf(buff,"%s MRDCKB1_FB_SEL:%x", buff, reg->bitfields.MRDCKB1_FB_SEL);
  sprintf(buff,"%s MRDCKB1_REF_SKEW:%x", buff, reg->bitfields.MRDCKB1_REF_SKEW);
  sprintf(buff,"%s MRDCKB1_SINSEL:%x", buff, reg->bitfields.MRDCKB1_SINSEL);
  sprintf(buff,"%s MRDCKB1_FB_SKEW:%x", buff, reg->bitfields.MRDCKB1_FB_SKEW);
  sprintf(buff,"%s MRDCKB1_BP_SEL:%x", buff, reg->bitfields.MRDCKB1_BP_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MCLK_CNTL_M6 regMCLK_CNTL_M6;

__inline void dump_MCLK_CNTL_M6(__in  unsigned int *dwreg, __in  char *buff)
{
  regMCLK_CNTL_M6 *reg = (regMCLK_CNTL_M6 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MCLKA_SRC_SEL:%x", buff, reg->bitfields.MCLKA_SRC_SEL);
  sprintf(buff,"%s YCLKA_SRC_SEL:%x", buff, reg->bitfields.YCLKA_SRC_SEL);
  sprintf(buff,"%s MCLKB_SRC_SEL:%x", buff, reg->bitfields.MCLKB_SRC_SEL);
  sprintf(buff,"%s YCLKB_SRC_SEL:%x", buff, reg->bitfields.YCLKB_SRC_SEL);
  sprintf(buff,"%s FORCE_MCLKA:%x", buff, reg->bitfields.FORCE_MCLKA);
  sprintf(buff,"%s FORCE_MCLKB:%x", buff, reg->bitfields.FORCE_MCLKB);
  sprintf(buff,"%s FORCE_YCLKA:%x", buff, reg->bitfields.FORCE_YCLKA);
  sprintf(buff,"%s FORCE_YCLKB:%x", buff, reg->bitfields.FORCE_YCLKB);
  sprintf(buff,"%s FORCE_MC:%x", buff, reg->bitfields.FORCE_MC);
  sprintf(buff,"%s FORCE_AIC:%x", buff, reg->bitfields.FORCE_AIC);
  sprintf(buff,"%s MRDCKA0_SOUTSEL:%x", buff, reg->bitfields.MRDCKA0_SOUTSEL);
  sprintf(buff,"%s MRDCKA1_SOUTSEL:%x", buff, reg->bitfields.MRDCKA1_SOUTSEL);
  sprintf(buff,"%s MRDCKB0_SOUTSEL:%x", buff, reg->bitfields.MRDCKB0_SOUTSEL);
  sprintf(buff,"%s MRDCKB1_SOUTSEL:%x", buff, reg->bitfields.MRDCKB1_SOUTSEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250MCLK_MISC regrv250MCLK_MISC;

__inline void dump_rv250MCLK_MISC(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250MCLK_MISC *reg = (regrv250MCLK_MISC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SCLK_SOURCED_FROM_MPLL_SEL:%x", buff, reg->bitfields.SCLK_SOURCED_FROM_MPLL_SEL);
  sprintf(buff,"%s MCLK_FROM_SPLL_DIV_SEL:%x", buff, reg->bitfields.MCLK_FROM_SPLL_DIV_SEL);
  sprintf(buff,"%s ENABLE_SCLK_FROM_MPLL:%x", buff, reg->bitfields.ENABLE_SCLK_FROM_MPLL);
  sprintf(buff,"%s MPLL_MODEA_MODEC_HW_SEL_EN:%x", buff, reg->bitfields.MPLL_MODEA_MODEC_HW_SEL_EN);
  sprintf(buff,"%s DLL_READY_LAT:%x", buff, reg->bitfields.DLL_READY_LAT);
  sprintf(buff,"%s MC_MCLK_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.MC_MCLK_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s IO_MCLK_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.IO_MCLK_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s MC_MCLK_DYN_ENABLE:%x", buff, reg->bitfields.MC_MCLK_DYN_ENABLE);
  sprintf(buff,"%s IO_MCLK_DYN_ENABLE:%x", buff, reg->bitfields.IO_MCLK_DYN_ENABLE);
  sprintf(buff,"%s CGM_CLK_TO_OUTPIN:%x", buff, reg->bitfields.CGM_CLK_TO_OUTPIN);
  sprintf(buff,"%s CLK_OR_COUNT_SEL:%x", buff, reg->bitfields.CLK_OR_COUNT_SEL);
  sprintf(buff,"%s EN_MCLK_TRISTATE_IN_SUSPEND:%x", buff, reg->bitfields.EN_MCLK_TRISTATE_IN_SUSPEND);
  sprintf(buff,"%s CGM_SPARE_RD:%x", buff, reg->bitfields.CGM_SPARE_RD);
  sprintf(buff,"%s CGM_SPARE_A_RD:%x", buff, reg->bitfields.CGM_SPARE_A_RD);
  sprintf(buff,"%s TCLK_TO_YCLKB_EN:%x", buff, reg->bitfields.TCLK_TO_YCLKB_EN);
  sprintf(buff,"%s CGM_SPARE_A:%x", buff, reg->bitfields.CGM_SPARE_A);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CG_TEST_MACRO_RW_WRITE regCG_TEST_MACRO_RW_WRITE;

__inline void dump_CG_TEST_MACRO_RW_WRITE(__in  unsigned int *dwreg, __in  char *buff)
{
  regCG_TEST_MACRO_RW_WRITE *reg = (regCG_TEST_MACRO_RW_WRITE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEST_MACRO_RW_WRITE1:%x", buff, reg->bitfields.TEST_MACRO_RW_WRITE1);
  sprintf(buff,"%s TEST_MACRO_RW_WRITE2:%x", buff, reg->bitfields.TEST_MACRO_RW_WRITE2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CG_TEST_MACRO_RW_READ regCG_TEST_MACRO_RW_READ;

__inline void dump_CG_TEST_MACRO_RW_READ(__in  unsigned int *dwreg, __in  char *buff)
{
  regCG_TEST_MACRO_RW_READ *reg = (regCG_TEST_MACRO_RW_READ *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEST_MACRO_RW_READ1:%x", buff, reg->bitfields.TEST_MACRO_RW_READ1);
  sprintf(buff,"%s TEST_MACRO_RW_READ2:%x", buff, reg->bitfields.TEST_MACRO_RW_READ2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CG_TEST_MACRO_RW_DATA regCG_TEST_MACRO_RW_DATA;

__inline void dump_CG_TEST_MACRO_RW_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regCG_TEST_MACRO_RW_DATA *reg = (regCG_TEST_MACRO_RW_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CG_TEST_MACRO_RW_CNTL regCG_TEST_MACRO_RW_CNTL;

__inline void dump_CG_TEST_MACRO_RW_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCG_TEST_MACRO_RW_CNTL *reg = (regCG_TEST_MACRO_RW_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEST_MACRO_RW_START:%x", buff, reg->bitfields.TEST_MACRO_RW_START);
  sprintf(buff,"%s TEST_MACRO_RW_OP:%x", buff, reg->bitfields.TEST_MACRO_RW_OP);
  sprintf(buff,"%s TEST_MACRO_RW_MODE:%x", buff, reg->bitfields.TEST_MACRO_RW_MODE);
  sprintf(buff,"%s TEST_MACRO_RW_MISMATCH_SEL:%x", buff, reg->bitfields.TEST_MACRO_RW_MISMATCH_SEL);
  sprintf(buff,"%s TEST_MACRO_RW_MISMATCH:%x", buff, reg->bitfields.TEST_MACRO_RW_MISMATCH);
  sprintf(buff,"%s TEST_MACRO_RW_ENABLE:%x", buff, reg->bitfields.TEST_MACRO_RW_ENABLE);
  sprintf(buff,"%s TEST_MACRO_RW_SCLK_NEG_ENABLE:%x", buff, reg->bitfields.TEST_MACRO_RW_SCLK_NEG_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union IDCT_RUNS regIDCT_RUNS;

__inline void dump_IDCT_RUNS(__in  unsigned int *dwreg, __in  char *buff)
{
  regIDCT_RUNS *reg = (regIDCT_RUNS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s IDCT_RUNS_3:%x", buff, reg->bitfields.IDCT_RUNS_3);
  sprintf(buff,"%s IDCT_RUNS_2:%x", buff, reg->bitfields.IDCT_RUNS_2);
  sprintf(buff,"%s IDCT_RUNS_1:%x", buff, reg->bitfields.IDCT_RUNS_1);
  sprintf(buff,"%s IDCT_RUNS_0:%x", buff, reg->bitfields.IDCT_RUNS_0);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union IDCT_LEVELS regIDCT_LEVELS;

__inline void dump_IDCT_LEVELS(__in  unsigned int *dwreg, __in  char *buff)
{
  regIDCT_LEVELS *reg = (regIDCT_LEVELS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s IDCT_LEVEL_HI:%x", buff, reg->bitfields.IDCT_LEVEL_HI);
  sprintf(buff,"%s IDCT_LEVEL_LO:%x", buff, reg->bitfields.IDCT_LEVEL_LO);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union IDCT_CONTROL regIDCT_CONTROL;

__inline void dump_IDCT_CONTROL(__in  unsigned int *dwreg, __in  char *buff)
{
  regIDCT_CONTROL *reg = (regIDCT_CONTROL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s IDCT_CTL_LUMA_RD_FORMAT:%x", buff, reg->bitfields.IDCT_CTL_LUMA_RD_FORMAT);
  sprintf(buff,"%s IDCT_CTL_CHROMA_RD_FORMAT:%x", buff, reg->bitfields.IDCT_CTL_CHROMA_RD_FORMAT);
  sprintf(buff,"%s IDCT_CTL_SCAN_PATTERN:%x", buff, reg->bitfields.IDCT_CTL_SCAN_PATTERN);
  sprintf(buff,"%s IDCT_CTL_INTRA:%x", buff, reg->bitfields.IDCT_CTL_INTRA);
  sprintf(buff,"%s IDCT_CTL_FLUSH:%x", buff, reg->bitfields.IDCT_CTL_FLUSH);
  sprintf(buff,"%s IDCT_CTL_PASSTHRU:%x", buff, reg->bitfields.IDCT_CTL_PASSTHRU);
  sprintf(buff,"%s IDCT_CTL_SW_RESET:%x", buff, reg->bitfields.IDCT_CTL_SW_RESET);
  sprintf(buff,"%s IDCT_CTL_CONSTREQ:%x", buff, reg->bitfields.IDCT_CTL_CONSTREQ);
  sprintf(buff,"%s IDCT_CTL_SCRAMBLE:%x", buff, reg->bitfields.IDCT_CTL_SCRAMBLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union IDCT_AUTH_CONTROL regIDCT_AUTH_CONTROL;

__inline void dump_IDCT_AUTH_CONTROL(__in  unsigned int *dwreg, __in  char *buff)
{
  regIDCT_AUTH_CONTROL *reg = (regIDCT_AUTH_CONTROL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union IDCT_AUTH regIDCT_AUTH;

__inline void dump_IDCT_AUTH(__in  unsigned int *dwreg, __in  char *buff)
{
  regIDCT_AUTH *reg = (regIDCT_AUTH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_CNTL regDAC_CNTL;

__inline void dump_DAC_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_CNTL *reg = (regDAC_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_RANGE_CNTL:%x", buff, reg->bitfields.DAC_RANGE_CNTL);
  sprintf(buff,"%s DAC_BLANKING:%x", buff, reg->bitfields.DAC_BLANKING);
  sprintf(buff,"%s DAC_CMP_EN:%x", buff, reg->bitfields.DAC_CMP_EN);
  sprintf(buff,"%s DAC_CMP_OUT_R:%x", buff, reg->bitfields.DAC_CMP_OUT_R);
  sprintf(buff,"%s DAC_CMP_OUT_G:%x", buff, reg->bitfields.DAC_CMP_OUT_G);
  sprintf(buff,"%s DAC_CMP_OUT_B:%x", buff, reg->bitfields.DAC_CMP_OUT_B);
  sprintf(buff,"%s DAC_CMP_OUTPUT:%x", buff, reg->bitfields.DAC_CMP_OUTPUT);
  sprintf(buff,"%s DAC_8BIT_EN:%x", buff, reg->bitfields.DAC_8BIT_EN);
  sprintf(buff,"%s DAC_4BPP_PIX_ORDER:%x", buff, reg->bitfields.DAC_4BPP_PIX_ORDER);
  sprintf(buff,"%s DAC_TVO_EN:%x", buff, reg->bitfields.DAC_TVO_EN);
  sprintf(buff,"%s DAC_VGA_ADR_EN:%x", buff, reg->bitfields.DAC_VGA_ADR_EN);
  sprintf(buff,"%s DAC_EXPAND_MODE:%x", buff, reg->bitfields.DAC_EXPAND_MODE);
  sprintf(buff,"%s DAC_PDWN:%x", buff, reg->bitfields.DAC_PDWN);
  sprintf(buff,"%s CRT_SENSE:%x", buff, reg->bitfields.CRT_SENSE);
  sprintf(buff,"%s CRT_DETECTION_ON:%x", buff, reg->bitfields.CRT_DETECTION_ON);
  sprintf(buff,"%s DAC_CRC_CONT_EN:%x", buff, reg->bitfields.DAC_CRC_CONT_EN);
  sprintf(buff,"%s DAC_CRC_EN:%x", buff, reg->bitfields.DAC_CRC_EN);
  sprintf(buff,"%s DAC_CRC_FIELD:%x", buff, reg->bitfields.DAC_CRC_FIELD);
  sprintf(buff,"%s DAC_LUT_COUNTER_LIMIT:%x", buff, reg->bitfields.DAC_LUT_COUNTER_LIMIT);
  sprintf(buff,"%s DAC_LUT_READ_SEL:%x", buff, reg->bitfields.DAC_LUT_READ_SEL);
  sprintf(buff,"%s DAC_MASK:%x", buff, reg->bitfields.DAC_MASK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC_GEN_CNTL regCRTC_GEN_CNTL;

__inline void dump_CRTC_GEN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC_GEN_CNTL *reg = (regCRTC_GEN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_DBL_SCAN_EN:%x", buff, reg->bitfields.CRTC_DBL_SCAN_EN);
  sprintf(buff,"%s CRTC_INTERLACE_EN:%x", buff, reg->bitfields.CRTC_INTERLACE_EN);
  sprintf(buff,"%s CRTC_C_SYNC_EN:%x", buff, reg->bitfields.CRTC_C_SYNC_EN);
  sprintf(buff,"%s CRTC_PIX_WIDTH:%x", buff, reg->bitfields.CRTC_PIX_WIDTH);
  sprintf(buff,"%s CRTC_CUR_EN:%x", buff, reg->bitfields.CRTC_CUR_EN);
  sprintf(buff,"%s CRTC_VSTAT_MODE:%x", buff, reg->bitfields.CRTC_VSTAT_MODE);
  sprintf(buff,"%s CRTC_CUR_MODE:%x", buff, reg->bitfields.CRTC_CUR_MODE);
  sprintf(buff,"%s CRTC_EXT_DISP_EN:%x", buff, reg->bitfields.CRTC_EXT_DISP_EN);
  sprintf(buff,"%s CRTC_EN:%x", buff, reg->bitfields.CRTC_EN);
  sprintf(buff,"%s CRTC_DISP_REQ_EN_B:%x", buff, reg->bitfields.CRTC_DISP_REQ_EN_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MEM_CNTL regMEM_CNTL;

__inline void dump_MEM_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMEM_CNTL *reg = (regMEM_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MEM_NUM_CHANNELS:%x", buff, reg->bitfields.MEM_NUM_CHANNELS);
  sprintf(buff,"%s MC_USE_B_CH_ONLY:%x", buff, reg->bitfields.MC_USE_B_CH_ONLY);
  sprintf(buff,"%s DISABLE_AP:%x", buff, reg->bitfields.DISABLE_AP);
  sprintf(buff,"%s MEM_CHANNEL_MAPPING:%x", buff, reg->bitfields.MEM_CHANNEL_MAPPING);
  sprintf(buff,"%s MEM_BANK_MAPPING_A:%x", buff, reg->bitfields.MEM_BANK_MAPPING_A);
  sprintf(buff,"%s MEM_ADDR_MAPPING_A:%x", buff, reg->bitfields.MEM_ADDR_MAPPING_A);
  sprintf(buff,"%s READ_BUS1_DEFAULT_EN:%x", buff, reg->bitfields.READ_BUS1_DEFAULT_EN);
  sprintf(buff,"%s MEM_BANK_MAPPING_B:%x", buff, reg->bitfields.MEM_BANK_MAPPING_B);
  sprintf(buff,"%s MEM_ADDR_MAPPING_B:%x", buff, reg->bitfields.MEM_ADDR_MAPPING_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_DEBUG regMC_DEBUG;

__inline void dump_MC_DEBUG(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_DEBUG *reg = (regMC_DEBUG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s IGNORE_RW_PENALTY_RB0R:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_RB0R);
  sprintf(buff,"%s IGNORE_RW_PENALTY_RB1R:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_RB1R);
  sprintf(buff,"%s IGNORE_RW_PENALTY_RB0W:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_RB0W);
  sprintf(buff,"%s IGNORE_RW_PENALTY_RB1W:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_RB1W);
  sprintf(buff,"%s IGNORE_RW_PENALTY_DISPR:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_DISPR);
  sprintf(buff,"%s IGNORE_RW_PENALTY_PPR:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_PPR);
  sprintf(buff,"%s IGNORE_RW_PENALTY_FIXED:%x", buff, reg->bitfields.IGNORE_RW_PENALTY_FIXED);
  sprintf(buff,"%s MEM_VIPW_PRIORITY:%x", buff, reg->bitfields.MEM_VIPW_PRIORITY);
  sprintf(buff,"%s EN_AIC_IDLE_DET:%x", buff, reg->bitfields.EN_AIC_IDLE_DET);
  sprintf(buff,"%s MEM_MC_BLACKOUT:%x", buff, reg->bitfields.MEM_MC_BLACKOUT);
  sprintf(buff,"%s DISABLE_TEE_SM_CHANGES:%x", buff, reg->bitfields.DISABLE_TEE_SM_CHANGES);
  sprintf(buff,"%s IMP_N_VALUE_DQS_R_BACK:%x", buff, reg->bitfields.IMP_N_VALUE_DQS_R_BACK);
  sprintf(buff,"%s IMP_P_VALUE_DQS_R_BACK:%x", buff, reg->bitfields.IMP_P_VALUE_DQS_R_BACK);
  sprintf(buff,"%s MC_DEBUG:%x", buff, reg->bitfields.MC_DEBUG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MC_IND_INDEX regMC_IND_INDEX;

__inline void dump_MC_IND_INDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regMC_IND_INDEX *reg = (regMC_IND_INDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MC_IND_ADDR:%x", buff, reg->bitfields.MC_IND_ADDR);
  sprintf(buff,"%s MC_IND_WR_EN:%x", buff, reg->bitfields.MC_IND_WR_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GEN_INT_CNTL regGEN_INT_CNTL;

__inline void dump_GEN_INT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regGEN_INT_CNTL *reg = (regGEN_INT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_VBLANK_MASK:%x", buff, reg->bitfields.CRTC_VBLANK_MASK);
  sprintf(buff,"%s CRTC_VLINE_MASK:%x", buff, reg->bitfields.CRTC_VLINE_MASK);
  sprintf(buff,"%s CRTC_VSYNC_MASK:%x", buff, reg->bitfields.CRTC_VSYNC_MASK);
  sprintf(buff,"%s SNAPSHOT_MASK:%x", buff, reg->bitfields.SNAPSHOT_MASK);
  sprintf(buff,"%s FP_DETECT_MASK:%x", buff, reg->bitfields.FP_DETECT_MASK);
  sprintf(buff,"%s CRTC2_VLINE_MASK:%x", buff, reg->bitfields.CRTC2_VLINE_MASK);
  sprintf(buff,"%s CRTC2_VSYNC_MASK:%x", buff, reg->bitfields.CRTC2_VSYNC_MASK);
  sprintf(buff,"%s SNAPSHOT2_MASK:%x", buff, reg->bitfields.SNAPSHOT2_MASK);
  sprintf(buff,"%s CRTC2_VBLANK_MASK:%x", buff, reg->bitfields.CRTC2_VBLANK_MASK);
  sprintf(buff,"%s FP2_DETECT_MASK:%x", buff, reg->bitfields.FP2_DETECT_MASK);
  sprintf(buff,"%s DMA_VIPH0_INT_EN:%x", buff, reg->bitfields.DMA_VIPH0_INT_EN);
  sprintf(buff,"%s DMA_VIPH1_INT_EN:%x", buff, reg->bitfields.DMA_VIPH1_INT_EN);
  sprintf(buff,"%s DMA_VIPH2_INT_EN:%x", buff, reg->bitfields.DMA_VIPH2_INT_EN);
  sprintf(buff,"%s DMA_VIPH3_INT_EN:%x", buff, reg->bitfields.DMA_VIPH3_INT_EN);
  sprintf(buff,"%s TIMER_INT_MASK:%x", buff, reg->bitfields.TIMER_INT_MASK);
  sprintf(buff,"%s I2C_INT_EN:%x", buff, reg->bitfields.I2C_INT_EN);
  sprintf(buff,"%s GUI_IDLE_MASK:%x", buff, reg->bitfields.GUI_IDLE_MASK);
  sprintf(buff,"%s VIPH_INT_EN:%x", buff, reg->bitfields.VIPH_INT_EN);
  sprintf(buff,"%s SW_INT_EN:%x", buff, reg->bitfields.SW_INT_EN);
  sprintf(buff,"%s HDCP_AUTHORIZED_INT_MASK:%x", buff, reg->bitfields.HDCP_AUTHORIZED_INT_MASK);
  sprintf(buff,"%s DVI_I2C_INT_MASK:%x", buff, reg->bitfields.DVI_I2C_INT_MASK);
  sprintf(buff,"%s GUIDMA_MASK:%x", buff, reg->bitfields.GUIDMA_MASK);
  sprintf(buff,"%s VIDDMA_MASK:%x", buff, reg->bitfields.VIDDMA_MASK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GEN_INT_STATUS regGEN_INT_STATUS;

__inline void dump_GEN_INT_STATUS(__in  unsigned int *dwreg, __in  char *buff)
{
  regGEN_INT_STATUS *reg = (regGEN_INT_STATUS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC_VBLANK_STAT:%x", buff, reg->bitfields.CRTC_VBLANK_STAT);
  sprintf(buff,"%s CRTC_VLINE_STAT:%x", buff, reg->bitfields.CRTC_VLINE_STAT);
  sprintf(buff,"%s CRTC_VSYNC_STAT:%x", buff, reg->bitfields.CRTC_VSYNC_STAT);
  sprintf(buff,"%s SNAPSHOT_STAT:%x", buff, reg->bitfields.SNAPSHOT_STAT);
  sprintf(buff,"%s FP_DETECT_STAT:%x", buff, reg->bitfields.FP_DETECT_STAT);
  sprintf(buff,"%s CRTC2_VLINE_STAT:%x", buff, reg->bitfields.CRTC2_VLINE_STAT);
  sprintf(buff,"%s CRTC2_VSYNC_STAT:%x", buff, reg->bitfields.CRTC2_VSYNC_STAT);
  sprintf(buff,"%s SNAPSHOT2_STAT:%x", buff, reg->bitfields.SNAPSHOT2_STAT);
  sprintf(buff,"%s CAP0_INT_ACTIVE:%x", buff, reg->bitfields.CAP0_INT_ACTIVE);
  sprintf(buff,"%s CRTC2_VBLANK_STAT:%x", buff, reg->bitfields.CRTC2_VBLANK_STAT);
  sprintf(buff,"%s FP2_DETECT_STAT:%x", buff, reg->bitfields.FP2_DETECT_STAT);
  sprintf(buff,"%s DMA_VIPH0_INT:%x", buff, reg->bitfields.DMA_VIPH0_INT);
  sprintf(buff,"%s DMA_VIPH1_INT:%x", buff, reg->bitfields.DMA_VIPH1_INT);
  sprintf(buff,"%s DMA_VIPH2_INT:%x", buff, reg->bitfields.DMA_VIPH2_INT);
  sprintf(buff,"%s DMA_VIPH3_INT:%x", buff, reg->bitfields.DMA_VIPH3_INT);
  sprintf(buff,"%s TIMER_INT_STAT:%x", buff, reg->bitfields.TIMER_INT_STAT);
  sprintf(buff,"%s I2C_INT:%x", buff, reg->bitfields.I2C_INT);
  sprintf(buff,"%s GUI_IDLE_STAT:%x", buff, reg->bitfields.GUI_IDLE_STAT);
  sprintf(buff,"%s VIPH_INT:%x", buff, reg->bitfields.VIPH_INT);
  sprintf(buff,"%s SW_INT:%x", buff, reg->bitfields.SW_INT);
  sprintf(buff,"%s SW_INT_SET:%x", buff, reg->bitfields.SW_INT_SET);
  sprintf(buff,"%s HDCP_AUTHORIZED_INT_STAT:%x", buff, reg->bitfields.HDCP_AUTHORIZED_INT_STAT);
  sprintf(buff,"%s DVI_I2C_INT_STAT:%x", buff, reg->bitfields.DVI_I2C_INT_STAT);
  sprintf(buff,"%s GUIDMA_STAT:%x", buff, reg->bitfields.GUIDMA_STAT);
  sprintf(buff,"%s VIDDMA_STAT:%x", buff, reg->bitfields.VIDDMA_STAT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union r200VCLK_ECP_CNTL regr200VCLK_ECP_CNTL;

__inline void dump_r200VCLK_ECP_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regr200VCLK_ECP_CNTL *reg = (regr200VCLK_ECP_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VCLK_SRC_SEL:%x", buff, reg->bitfields.VCLK_SRC_SEL);
  sprintf(buff,"%s VCLK_INVERT:%x", buff, reg->bitfields.VCLK_INVERT);
  sprintf(buff,"%s PCICLK_INVERT:%x", buff, reg->bitfields.PCICLK_INVERT);
  sprintf(buff,"%s PIXCLK_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_DAC_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_DAC_ALWAYS_ONb);
  sprintf(buff,"%s ECP_DIV:%x", buff, reg->bitfields.ECP_DIV);
  sprintf(buff,"%s BYTE_CLK_POST_DIV:%x", buff, reg->bitfields.BYTE_CLK_POST_DIV);
  sprintf(buff,"%s ECP_FORCE_ON:%x", buff, reg->bitfields.ECP_FORCE_ON);
  sprintf(buff,"%s SUBCLK_FORCE_ON:%x", buff, reg->bitfields.SUBCLK_FORCE_ON);
  sprintf(buff,"%s BYTE_CLK_OUT_EN:%x", buff, reg->bitfields.BYTE_CLK_OUT_EN);
  sprintf(buff,"%s BYTE_CLK_SKEW:%x", buff, reg->bitfields.BYTE_CLK_SKEW);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union BYTE_CLK_AUX_CNTL regBYTE_CLK_AUX_CNTL;

__inline void dump_BYTE_CLK_AUX_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regBYTE_CLK_AUX_CNTL *reg = (regBYTE_CLK_AUX_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s IO_BYTCLK_SRC_SEL:%x", buff, reg->bitfields.IO_BYTCLK_SRC_SEL);
  sprintf(buff,"%s TV_BYTCLK_SRC_SEL:%x", buff, reg->bitfields.TV_BYTCLK_SRC_SEL);
  sprintf(buff,"%s IO_BYTCLK_SKW_CTL:%x", buff, reg->bitfields.IO_BYTCLK_SKW_CTL);
  sprintf(buff,"%s TV_BYTCLK_SKW_CTL:%x", buff, reg->bitfields.TV_BYTCLK_SKW_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union r200DISP_TEST_MACRO_RW_CNTL regr200DISP_TEST_MACRO_RW_CNTL;

__inline void dump_r200DISP_TEST_MACRO_RW_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regr200DISP_TEST_MACRO_RW_CNTL *reg = (regr200DISP_TEST_MACRO_RW_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TEST_MACRO_RW_START:%x", buff, reg->bitfields.TEST_MACRO_RW_START);
  sprintf(buff,"%s TEST_MACRO_RW_OP:%x", buff, reg->bitfields.TEST_MACRO_RW_OP);
  sprintf(buff,"%s TEST_MACRO_RW_MODE:%x", buff, reg->bitfields.TEST_MACRO_RW_MODE);
  sprintf(buff,"%s TEST_MACRO_RW_MISMATCH_SEL:%x", buff, reg->bitfields.TEST_MACRO_RW_MISMATCH_SEL);
  sprintf(buff,"%s TEST_MACRO_RW_MISMATCH:%x", buff, reg->bitfields.TEST_MACRO_RW_MISMATCH);
  sprintf(buff,"%s TEST_MACRO_RW_ENABLE:%x", buff, reg->bitfields.TEST_MACRO_RW_ENABLE);
  sprintf(buff,"%s TEST_MACRO_RW_SCLK_NEG_ENABLE:%x", buff, reg->bitfields.TEST_MACRO_RW_SCLK_NEG_ENABLE);
  sprintf(buff,"%s TEST_ALTCLK_ENABLE:%x", buff, reg->bitfields.TEST_ALTCLK_ENABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union r200PIXCLKS_CNTL regr200PIXCLKS_CNTL;

__inline void dump_r200PIXCLKS_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regr200PIXCLKS_CNTL *reg = (regr200PIXCLKS_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PIX2CLK_SRC_SEL:%x", buff, reg->bitfields.PIX2CLK_SRC_SEL);
  sprintf(buff,"%s PIX2CLK_INVERT:%x", buff, reg->bitfields.PIX2CLK_INVERT);
  sprintf(buff,"%s PCICLK_INVERT:%x", buff, reg->bitfields.PCICLK_INVERT);
  sprintf(buff,"%s PIX2CLK_ALWAYS_ONb:%x", buff, reg->bitfields.PIX2CLK_ALWAYS_ONb);
  sprintf(buff,"%s PIX2CLK_DAC_ALWAYS_ONb:%x", buff, reg->bitfields.PIX2CLK_DAC_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_TV_SRC_SEL:%x", buff, reg->bitfields.PIXCLK_TV_SRC_SEL);
  sprintf(buff,"%s DVOCLK_ALWAYS_ONb:%x", buff, reg->bitfields.DVOCLK_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_BLEND_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_BLEND_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_GV_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_GV_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_DVO_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_DVO_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_TMDS_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_TMDS_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_TRANS_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_TRANS_ALWAYS_ONb);
  sprintf(buff,"%s PIXCLK_TVO_ALWAYS_ONb:%x", buff, reg->bitfields.PIXCLK_TVO_ALWAYS_ONb);
  sprintf(buff,"%s P2GCLK_ALWAYS_ONb:%x", buff, reg->bitfields.P2GCLK_ALWAYS_ONb);
  sprintf(buff,"%s P2G2CLK_ALWAYS_ONb:%x", buff, reg->bitfields.P2G2CLK_ALWAYS_ONb);
  sprintf(buff,"%s DVOCLKC_SRC_SEL:%x", buff, reg->bitfields.DVOCLKC_SRC_SEL);
  sprintf(buff,"%s DVOCLKD_SRC_SEL:%x", buff, reg->bitfields.DVOCLKD_SRC_SEL);
  sprintf(buff,"%s DVOCLKC_SKW_CTL:%x", buff, reg->bitfields.DVOCLKC_SKW_CTL);
  sprintf(buff,"%s DVOCLKD_SKW_CTL:%x", buff, reg->bitfields.DVOCLKD_SKW_CTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TIMER_INT_CNTL regTIMER_INT_CNTL;

__inline void dump_TIMER_INT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTIMER_INT_CNTL *reg = (regTIMER_INT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TIMER_INT_CNT:%x", buff, reg->bitfields.TIMER_INT_CNT);
  sprintf(buff,"%s TIMER_INT_EN:%x", buff, reg->bitfields.TIMER_INT_EN);
  sprintf(buff,"%s TIMER_INT_RUNNING:%x", buff, reg->bitfields.TIMER_INT_RUNNING);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FP_GEN_CNTL regFP_GEN_CNTL;

__inline void dump_FP_GEN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regFP_GEN_CNTL *reg = (regFP_GEN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP_ON:%x", buff, reg->bitfields.FP_ON);
  sprintf(buff,"%s FP_BLANK_EN:%x", buff, reg->bitfields.FP_BLANK_EN);
  sprintf(buff,"%s TMDS_EN:%x", buff, reg->bitfields.TMDS_EN);
  sprintf(buff,"%s PANEL_FORMAT:%x", buff, reg->bitfields.PANEL_FORMAT);
  sprintf(buff,"%s NO_OF_GREY:%x", buff, reg->bitfields.NO_OF_GREY);
  sprintf(buff,"%s FP_RST_FM:%x", buff, reg->bitfields.FP_RST_FM);
  sprintf(buff,"%s FP_EN_TMDS:%x", buff, reg->bitfields.FP_EN_TMDS);
  sprintf(buff,"%s FP_DETECT_SENSE:%x", buff, reg->bitfields.FP_DETECT_SENSE);
  sprintf(buff,"%s FP_DETECT_INT_POL:%x", buff, reg->bitfields.FP_DETECT_INT_POL);
  sprintf(buff,"%s FP_SOURCE_SEL:%x", buff, reg->bitfields.FP_SOURCE_SEL);
  sprintf(buff,"%s FP_DETECT_EN:%x", buff, reg->bitfields.FP_DETECT_EN);
  sprintf(buff,"%s FP_USE_VGA_HVSYNC:%x", buff, reg->bitfields.FP_USE_VGA_HVSYNC);
  sprintf(buff,"%s FP_USE_VGA_SYNC_POLARITY:%x", buff, reg->bitfields.FP_USE_VGA_SYNC_POLARITY);
  sprintf(buff,"%s CRTC_DONT_SHADOW_VPAR:%x", buff, reg->bitfields.CRTC_DONT_SHADOW_VPAR);
  sprintf(buff,"%s CRTC_DONT_SHADOW_HEND:%x", buff, reg->bitfields.CRTC_DONT_SHADOW_HEND);
  sprintf(buff,"%s CRTC_USE_SHADOWED_VEND:%x", buff, reg->bitfields.CRTC_USE_SHADOWED_VEND);
  sprintf(buff,"%s CRTC_USE_SHADOWED_ROWCUR:%x", buff, reg->bitfields.CRTC_USE_SHADOWED_ROWCUR);
  sprintf(buff,"%s RMX_HVSYNC_CONTROL_EN:%x", buff, reg->bitfields.RMX_HVSYNC_CONTROL_EN);
  sprintf(buff,"%s DFP_SYNC_SEL:%x", buff, reg->bitfields.DFP_SYNC_SEL);
  sprintf(buff,"%s CRTC_LOCK_8DOT:%x", buff, reg->bitfields.CRTC_LOCK_8DOT);
  sprintf(buff,"%s CRT_SYNC_SEL:%x", buff, reg->bitfields.CRT_SYNC_SEL);
  sprintf(buff,"%s FP_USE_SHADOW_EN:%x", buff, reg->bitfields.FP_USE_SHADOW_EN);
  sprintf(buff,"%s DONT_RST_CHAREN:%x", buff, reg->bitfields.DONT_RST_CHAREN);
  sprintf(buff,"%s CRT_SYNC_ALT_SEL:%x", buff, reg->bitfields.CRT_SYNC_ALT_SEL);
  sprintf(buff,"%s CRTC_USE_NONSHADOW_HPARAMS_FOR_BLANK:%x", buff, reg->bitfields.CRTC_USE_NONSHADOW_HPARAMS_FOR_BLANK);
  sprintf(buff,"%s CRTC_USE_NONSHADOW_VPARAMS_FOR_BLANK:%x", buff, reg->bitfields.CRTC_USE_NONSHADOW_VPARAMS_FOR_BLANK);
  sprintf(buff,"%s CRTC_VGA_XOVERSCAN_COLOR:%x", buff, reg->bitfields.CRTC_VGA_XOVERSCAN_COLOR);
  sprintf(buff,"%s CRTC_VGA_XOVERSCAN_DIVBY2_EN:%x", buff, reg->bitfields.CRTC_VGA_XOVERSCAN_DIVBY2_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union FP2_GEN_CNTL regFP2_GEN_CNTL;

__inline void dump_FP2_GEN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regFP2_GEN_CNTL *reg = (regFP2_GEN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s FP2_BLANK_EN:%x", buff, reg->bitfields.FP2_BLANK_EN);
  sprintf(buff,"%s FP2_ON:%x", buff, reg->bitfields.FP2_ON);
  sprintf(buff,"%s FP2_PANEL_FORMAT:%x", buff, reg->bitfields.FP2_PANEL_FORMAT);
  sprintf(buff,"%s FP2_NO_OF_GREY:%x", buff, reg->bitfields.FP2_NO_OF_GREY);
  sprintf(buff,"%s FP2_RST_FM:%x", buff, reg->bitfields.FP2_RST_FM);
  sprintf(buff,"%s FP2_DETECT_SENSE:%x", buff, reg->bitfields.FP2_DETECT_SENSE);
  sprintf(buff,"%s FP2_DETECT_INT_POL:%x", buff, reg->bitfields.FP2_DETECT_INT_POL);
  sprintf(buff,"%s FP2_SOURCE_SEL:%x", buff, reg->bitfields.FP2_SOURCE_SEL);
  sprintf(buff,"%s FP2_CRC_EN:%x", buff, reg->bitfields.FP2_CRC_EN);
  sprintf(buff,"%s DVO_EN:%x", buff, reg->bitfields.DVO_EN);
  sprintf(buff,"%s DVO_TMDS_CTL3:%x", buff, reg->bitfields.DVO_TMDS_CTL3);
  sprintf(buff,"%s DVO_RATE_SEL:%x", buff, reg->bitfields.DVO_RATE_SEL);
  sprintf(buff,"%s DVO_CLOCK_MODE:%x", buff, reg->bitfields.DVO_CLOCK_MODE);
  sprintf(buff,"%s DVO_DUAL_CHANNEL_EN:%x", buff, reg->bitfields.DVO_DUAL_CHANNEL_EN);
  sprintf(buff,"%s DVO_TMDS_CTL3_SEL:%x", buff, reg->bitfields.DVO_TMDS_CTL3_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DVO_CRC regDVO_CRC;

__inline void dump_DVO_CRC(__in  unsigned int *dwreg, __in  char *buff)
{
  regDVO_CRC *reg = (regDVO_CRC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DVO_CRC_SIG_RGB:%x", buff, reg->bitfields.DVO_CRC_SIG_RGB);
  sprintf(buff,"%s DVO_CRC_SIG_C:%x", buff, reg->bitfields.DVO_CRC_SIG_C);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union AUX_WINDOW_HORZ_CNTL regAUX_WINDOW_HORZ_CNTL;

__inline void dump_AUX_WINDOW_HORZ_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regAUX_WINDOW_HORZ_CNTL *reg = (regAUX_WINDOW_HORZ_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s AUX_WIN_HORZ_START:%x", buff, reg->bitfields.AUX_WIN_HORZ_START);
  sprintf(buff,"%s AUX_WIN_HORZ_END:%x", buff, reg->bitfields.AUX_WIN_HORZ_END);
  sprintf(buff,"%s AUX_WIN_EN:%x", buff, reg->bitfields.AUX_WIN_EN);
  sprintf(buff,"%s AUX_WIN_OUT_DELAY_R2:%x", buff, reg->bitfields.AUX_WIN_OUT_DELAY_R2);
  sprintf(buff,"%s AUX_WIN_SRC_SEL:%x", buff, reg->bitfields.AUX_WIN_SRC_SEL);
  sprintf(buff,"%s AUX_WIN_LOCK:%x", buff, reg->bitfields.AUX_WIN_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DVI_I2C_CNTL_0 regDVI_I2C_CNTL_0;

__inline void dump_DVI_I2C_CNTL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regDVI_I2C_CNTL_0 *reg = (regDVI_I2C_CNTL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s I2C_DONE:%x", buff, reg->bitfields.I2C_DONE);
  sprintf(buff,"%s I2C_NACK:%x", buff, reg->bitfields.I2C_NACK);
  sprintf(buff,"%s I2C_HALT:%x", buff, reg->bitfields.I2C_HALT);
  sprintf(buff,"%s DVI_I2C_PIN_SEL:%x", buff, reg->bitfields.DVI_I2C_PIN_SEL);
  sprintf(buff,"%s I2C_SOFT_RST:%x", buff, reg->bitfields.I2C_SOFT_RST);
  sprintf(buff,"%s I2C_DRIVE_EN:%x", buff, reg->bitfields.I2C_DRIVE_EN);
  sprintf(buff,"%s I2C_DRIVE_SEL:%x", buff, reg->bitfields.I2C_DRIVE_SEL);
  sprintf(buff,"%s I2C_START:%x", buff, reg->bitfields.I2C_START);
  sprintf(buff,"%s I2C_STOP:%x", buff, reg->bitfields.I2C_STOP);
  sprintf(buff,"%s I2C_RECEIVE:%x", buff, reg->bitfields.I2C_RECEIVE);
  sprintf(buff,"%s I2C_ABORT:%x", buff, reg->bitfields.I2C_ABORT);
  sprintf(buff,"%s I2C_GO:%x", buff, reg->bitfields.I2C_GO);
  sprintf(buff,"%s SW_WANTS_TO_USE_DVI_I2C:%x", buff, reg->bitfields.SW_WANTS_TO_USE_DVI_I2C);
  sprintf(buff,"%s SW_DONE_USING_DVI_I2C:%x", buff, reg->bitfields.SW_DONE_USING_DVI_I2C);
  sprintf(buff,"%s ABORT_HW_DVI_I2C:%x", buff, reg->bitfields.ABORT_HW_DVI_I2C);
  sprintf(buff,"%s I2C_PRESCALE:%x", buff, reg->bitfields.I2C_PRESCALE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DVI_I2C_CNTL_1 regDVI_I2C_CNTL_1;

__inline void dump_DVI_I2C_CNTL_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regDVI_I2C_CNTL_1 *reg = (regDVI_I2C_CNTL_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s I2C_DATA_COUNT:%x", buff, reg->bitfields.I2C_DATA_COUNT);
  sprintf(buff,"%s I2C_ADDR_COUNT_R2:%x", buff, reg->bitfields.I2C_ADDR_COUNT_R2);
  sprintf(buff,"%s I2C_INTRA_BYTE_DELAY:%x", buff, reg->bitfields.I2C_INTRA_BYTE_DELAY);
  sprintf(buff,"%s I2C_SEL:%x", buff, reg->bitfields.I2C_SEL);
  sprintf(buff,"%s I2C_EN:%x", buff, reg->bitfields.I2C_EN);
  sprintf(buff,"%s I2C_TIME_LIMIT:%x", buff, reg->bitfields.I2C_TIME_LIMIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union GRPH_BUFFER_CNTL regGRPH_BUFFER_CNTL;

__inline void dump_GRPH_BUFFER_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regGRPH_BUFFER_CNTL *reg = (regGRPH_BUFFER_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s GRPH_START_REQ:%x", buff, reg->bitfields.GRPH_START_REQ);
  sprintf(buff,"%s GRPH_STOP_REQ:%x", buff, reg->bitfields.GRPH_STOP_REQ);
  sprintf(buff,"%s GRPH_CRITICAL_POINT:%x", buff, reg->bitfields.GRPH_CRITICAL_POINT);
  sprintf(buff,"%s GRPH_CRITICAL_CNTL:%x", buff, reg->bitfields.GRPH_CRITICAL_CNTL);
  sprintf(buff,"%s GRPH_BUFFER_SIZE:%x", buff, reg->bitfields.GRPH_BUFFER_SIZE);
  sprintf(buff,"%s GRPH_CRITICAL_AT_SOF:%x", buff, reg->bitfields.GRPH_CRITICAL_AT_SOF);
  sprintf(buff,"%s GRPH_STOP_CNTL:%x", buff, reg->bitfields.GRPH_STOP_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_OFFSET_RIGHT regCRTC2_OFFSET_RIGHT;

__inline void dump_CRTC2_OFFSET_RIGHT(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_OFFSET_RIGHT *reg = (regCRTC2_OFFSET_RIGHT *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_OFFSET_RIGHT:%x", buff, reg->bitfields.CRTC2_OFFSET_RIGHT);
  sprintf(buff,"%s CRTC2_GUI_TRIG_OFFSET:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_OFFSET);
  sprintf(buff,"%s CRTC2_OFFSET_LOCK:%x", buff, reg->bitfields.CRTC2_OFFSET_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_OFFSET_CNTL regCRTC2_OFFSET_CNTL;

__inline void dump_CRTC2_OFFSET_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_OFFSET_CNTL *reg = (regCRTC2_OFFSET_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_TILE_LINE:%x", buff, reg->bitfields.CRTC2_TILE_LINE);
  sprintf(buff,"%s CRTC2_TILE_LINE_RIGHT:%x", buff, reg->bitfields.CRTC2_TILE_LINE_RIGHT);
  sprintf(buff,"%s CRTC2_TILE_EN_RIGHT:%x", buff, reg->bitfields.CRTC2_TILE_EN_RIGHT);
  sprintf(buff,"%s CRTC2_TILE_EN:%x", buff, reg->bitfields.CRTC2_TILE_EN);
  sprintf(buff,"%s CRTC2_OFFSET_FLIP_CNTL:%x", buff, reg->bitfields.CRTC2_OFFSET_FLIP_CNTL);
  sprintf(buff,"%s CRTC2_STEREO_OFFSET_EN:%x", buff, reg->bitfields.CRTC2_STEREO_OFFSET_EN);
  sprintf(buff,"%s CRTC2_STEREO_SYNC_EN:%x", buff, reg->bitfields.CRTC2_STEREO_SYNC_EN);
  sprintf(buff,"%s CRTC2_STEREO_SYNC:%x", buff, reg->bitfields.CRTC2_STEREO_SYNC);
  sprintf(buff,"%s CRTC2_GUI_TRIG_OFFSET_LEFT_EN:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_OFFSET_LEFT_EN);
  sprintf(buff,"%s CRTC2_GUI_TRIG_OFFSET_RIGHT_EN:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_OFFSET_RIGHT_EN);
  sprintf(buff,"%s CRTC2_GUI_TRIG_OFFSET:%x", buff, reg->bitfields.CRTC2_GUI_TRIG_OFFSET);
  sprintf(buff,"%s CRTC2_OFFSET_LOCK:%x", buff, reg->bitfields.CRTC2_OFFSET_LOCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_PITCH regCRTC2_PITCH;

__inline void dump_CRTC2_PITCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_PITCH *reg = (regCRTC2_PITCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_PITCH:%x", buff, reg->bitfields.CRTC2_PITCH);
  sprintf(buff,"%s CRTC2_PITCH_RIGHT:%x", buff, reg->bitfields.CRTC2_PITCH_RIGHT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DVO_STRENGTH_CNTL regDVO_STRENGTH_CNTL;

__inline void dump_DVO_STRENGTH_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDVO_STRENGTH_CNTL *reg = (regDVO_STRENGTH_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DVO_SP:%x", buff, reg->bitfields.DVO_SP);
  sprintf(buff,"%s DVO_SN:%x", buff, reg->bitfields.DVO_SN);
  sprintf(buff,"%s DVOCLK_SP:%x", buff, reg->bitfields.DVOCLK_SP);
  sprintf(buff,"%s DVOCLK_SN:%x", buff, reg->bitfields.DVOCLK_SN);
  sprintf(buff,"%s DVO_SRP:%x", buff, reg->bitfields.DVO_SRP);
  sprintf(buff,"%s DVO_SRN:%x", buff, reg->bitfields.DVO_SRN);
  sprintf(buff,"%s DVOCLK_SRP:%x", buff, reg->bitfields.DVOCLK_SRP);
  sprintf(buff,"%s DVOCLK_SRN:%x", buff, reg->bitfields.DVOCLK_SRN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TVO_STRENGTH_CNTL regTVO_STRENGTH_CNTL;

__inline void dump_TVO_STRENGTH_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regTVO_STRENGTH_CNTL *reg = (regTVO_STRENGTH_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TVO_SP:%x", buff, reg->bitfields.TVO_SP);
  sprintf(buff,"%s TVO_SN:%x", buff, reg->bitfields.TVO_SN);
  sprintf(buff,"%s TVOCLK_SP:%x", buff, reg->bitfields.TVOCLK_SP);
  sprintf(buff,"%s TVOCLK_SN:%x", buff, reg->bitfields.TVOCLK_SN);
  sprintf(buff,"%s TVO_SRP:%x", buff, reg->bitfields.TVO_SRP);
  sprintf(buff,"%s TVO_SRN:%x", buff, reg->bitfields.TVO_SRN);
  sprintf(buff,"%s TVOCLK_SRP:%x", buff, reg->bitfields.TVOCLK_SRP);
  sprintf(buff,"%s TVOCLK_SRN:%x", buff, reg->bitfields.TVOCLK_SRN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CRTC2_GEN_CNTL regCRTC2_GEN_CNTL;

__inline void dump_CRTC2_GEN_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCRTC2_GEN_CNTL *reg = (regCRTC2_GEN_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CRTC2_DBL_SCAN_EN:%x", buff, reg->bitfields.CRTC2_DBL_SCAN_EN);
  sprintf(buff,"%s CRTC2_INTERLACE_EN:%x", buff, reg->bitfields.CRTC2_INTERLACE_EN);
  sprintf(buff,"%s CRTC2_PIX_WIDTH:%x", buff, reg->bitfields.CRTC2_PIX_WIDTH);
  sprintf(buff,"%s CRTC2_CUR_EN:%x", buff, reg->bitfields.CRTC2_CUR_EN);
  sprintf(buff,"%s CRTC2_CUR_MODE:%x", buff, reg->bitfields.CRTC2_CUR_MODE);
  sprintf(buff,"%s CRTC2_DISPLAY_DIS:%x", buff, reg->bitfields.CRTC2_DISPLAY_DIS);
  sprintf(buff,"%s CRTC2_EN:%x", buff, reg->bitfields.CRTC2_EN);
  sprintf(buff,"%s CRTC2_DISP_REQ_EN_B:%x", buff, reg->bitfields.CRTC2_DISP_REQ_EN_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_SCALE_CNTL regOV0_SCALE_CNTL;

__inline void dump_OV0_SCALE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_SCALE_CNTL *reg = (regOV0_SCALE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_NO_READ_BEHIND_SCAN:%x", buff, reg->bitfields.OV0_NO_READ_BEHIND_SCAN);
  sprintf(buff,"%s OV0_HORZ_PICK_NEAREST:%x", buff, reg->bitfields.OV0_HORZ_PICK_NEAREST);
  sprintf(buff,"%s OV0_VERT_PICK_NEAREST:%x", buff, reg->bitfields.OV0_VERT_PICK_NEAREST);
  sprintf(buff,"%s OV0_SIGNED_UV:%x", buff, reg->bitfields.OV0_SIGNED_UV);
  sprintf(buff,"%s OV0_SURFACE_FORMAT:%x", buff, reg->bitfields.OV0_SURFACE_FORMAT);
  sprintf(buff,"%s OV0_ADAPTIVE_DEINT:%x", buff, reg->bitfields.OV0_ADAPTIVE_DEINT);
  sprintf(buff,"%s OV0_TEMPORAL_DEINT:%x", buff, reg->bitfields.OV0_TEMPORAL_DEINT);
  sprintf(buff,"%s OV0_CRTC_SEL:%x", buff, reg->bitfields.OV0_CRTC_SEL);
  sprintf(buff,"%s OV0_PULLDOWN_ON_P1_ONLY:%x", buff, reg->bitfields.OV0_PULLDOWN_ON_P1_ONLY);
  sprintf(buff,"%s OV0_BURST_PER_PLANE:%x", buff, reg->bitfields.OV0_BURST_PER_PLANE);
  sprintf(buff,"%s OV0_DOUBLE_BUFFER_REGS:%x", buff, reg->bitfields.OV0_DOUBLE_BUFFER_REGS);
  sprintf(buff,"%s OV0_BANDWIDTH:%x", buff, reg->bitfields.OV0_BANDWIDTH);
  sprintf(buff,"%s OV0_LIN_TRANS_BYPASS:%x", buff, reg->bitfields.OV0_LIN_TRANS_BYPASS);
  sprintf(buff,"%s OV0_INT_EMU:%x", buff, reg->bitfields.OV0_INT_EMU);
  sprintf(buff,"%s OV0_OVERLAY_EN:%x", buff, reg->bitfields.OV0_OVERLAY_EN);
  sprintf(buff,"%s OV0_SOFT_RESET:%x", buff, reg->bitfields.OV0_SOFT_RESET);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_DEINTERLACE_PATTERN regOV0_DEINTERLACE_PATTERN;

__inline void dump_OV0_DEINTERLACE_PATTERN(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_DEINTERLACE_PATTERN *reg = (regOV0_DEINTERLACE_PATTERN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_DEINT_PAT_R2:%x", buff, reg->bitfields.OV0_DEINT_PAT_R2);
  sprintf(buff,"%s OV0_DEINT_PAT_PNTR_R2:%x", buff, reg->bitfields.OV0_DEINT_PAT_PNTR_R2);
  sprintf(buff,"%s OV0_DEINT_PAT_LEN_M1_R2:%x", buff, reg->bitfields.OV0_DEINT_PAT_LEN_M1_R2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_TEST regOV0_TEST;

__inline void dump_OV0_TEST(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_TEST *reg = (regOV0_TEST *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_SUBPIC_ONLY:%x", buff, reg->bitfields.OV0_SUBPIC_ONLY);
  sprintf(buff,"%s OV0_SWAP_UV:%x", buff, reg->bitfields.OV0_SWAP_UV);
  sprintf(buff,"%s OV0_NOROUNDUP:%x", buff, reg->bitfields.OV0_NOROUNDUP);
  sprintf(buff,"%s OV0_4TH_LINE_RULE_EN:%x", buff, reg->bitfields.OV0_4TH_LINE_RULE_EN);
  sprintf(buff,"%s OV0_READ_BEHIND_SCAN_MARGIN:%x", buff, reg->bitfields.OV0_READ_BEHIND_SCAN_MARGIN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_32PULLDOWN_ACCUM regOV0_32PULLDOWN_ACCUM;

__inline void dump_OV0_32PULLDOWN_ACCUM(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_32PULLDOWN_ACCUM *reg = (regOV0_32PULLDOWN_ACCUM *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_32PULLDOWN_ACCUM:%x", buff, reg->bitfields.OV0_32PULLDOWN_ACCUM);
  sprintf(buff,"%s OV0_32PULLDOWN_ACCUM_VALID:%x", buff, reg->bitfields.OV0_32PULLDOWN_ACCUM_VALID);
  sprintf(buff,"%s OV0_32PULLDOWN_ACCUM_SKIPPED:%x", buff, reg->bitfields.OV0_32PULLDOWN_ACCUM_SKIPPED);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_TEMPORAL_DEINT_CNTL regOV0_TEMPORAL_DEINT_CNTL;

__inline void dump_OV0_TEMPORAL_DEINT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_TEMPORAL_DEINT_CNTL *reg = (regOV0_TEMPORAL_DEINT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_DTO_EN:%x", buff, reg->bitfields.OV0_DTO_EN);
  sprintf(buff,"%s OV0_CLEAR_FIFO:%x", buff, reg->bitfields.OV0_CLEAR_FIFO);
  sprintf(buff,"%s OV0_DTO_ACCUM_FORCE:%x", buff, reg->bitfields.OV0_DTO_ACCUM_FORCE);
  sprintf(buff,"%s OV0_DEINT_LATEST_SUBMITS:%x", buff, reg->bitfields.OV0_DEINT_LATEST_SUBMITS);
  sprintf(buff,"%s OV0_UNDERFLOW_RECOVERY_MODE:%x", buff, reg->bitfields.OV0_UNDERFLOW_RECOVERY_MODE);
  sprintf(buff,"%s OV0_NO_DTO_RESET_ON_OVERFLOW:%x", buff, reg->bitfields.OV0_NO_DTO_RESET_ON_OVERFLOW);
  sprintf(buff,"%s OV0_DTO_ACCUM_OVERFLOW_EN:%x", buff, reg->bitfields.OV0_DTO_ACCUM_OVERFLOW_EN);
  sprintf(buff,"%s OV0_DTO_FORCE_ON_POL_PAIR:%x", buff, reg->bitfields.OV0_DTO_FORCE_ON_POL_PAIR);
  sprintf(buff,"%s OV0_DTO_LOCK:%x", buff, reg->bitfields.OV0_DTO_LOCK);
  sprintf(buff,"%s OV0_HDE_DIVIDE_BY:%x", buff, reg->bitfields.OV0_HDE_DIVIDE_BY);
  sprintf(buff,"%s OV0_AUTO_DTO_LOOP_EN:%x", buff, reg->bitfields.OV0_AUTO_DTO_LOOP_EN);
  sprintf(buff,"%s OV0_USE_SOFT_DEINT_ALPHA:%x", buff, reg->bitfields.OV0_USE_SOFT_DEINT_ALPHA);
  sprintf(buff,"%s OV0_SOFT_DEINT_ALPHA:%x", buff, reg->bitfields.OV0_SOFT_DEINT_ALPHA);
  sprintf(buff,"%s OV0_INVERT_ALPHA:%x", buff, reg->bitfields.OV0_INVERT_ALPHA);
  sprintf(buff,"%s OV0_SOURCE_CHANGED:%x", buff, reg->bitfields.OV0_SOURCE_CHANGED);
  sprintf(buff,"%s OV0_FIFO_FILLED:%x", buff, reg->bitfields.OV0_FIFO_FILLED);
  sprintf(buff,"%s OV0_FIFO_READ_PNTR:%x", buff, reg->bitfields.OV0_FIFO_READ_PNTR);
  sprintf(buff,"%s OV0_DTO_ACCUM_LOADED:%x", buff, reg->bitfields.OV0_DTO_ACCUM_LOADED);
  sprintf(buff,"%s OV0_FIFO_UNDERFLOW:%x", buff, reg->bitfields.OV0_FIFO_UNDERFLOW);
  sprintf(buff,"%s OV0_FIFO_OVERFLOW:%x", buff, reg->bitfields.OV0_FIFO_OVERFLOW);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_DTO_ACCUM_0 regOV0_DTO_ACCUM_0;

__inline void dump_OV0_DTO_ACCUM_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_DTO_ACCUM_0 *reg = (regOV0_DTO_ACCUM_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_DTO_ACCUM_1 regOV0_DTO_ACCUM_1;

__inline void dump_OV0_DTO_ACCUM_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_DTO_ACCUM_1 *reg = (regOV0_DTO_ACCUM_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_DTO_ACCUM_2 regOV0_DTO_ACCUM_2;

__inline void dump_OV0_DTO_ACCUM_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_DTO_ACCUM_2 *reg = (regOV0_DTO_ACCUM_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_DTO_INC regOV0_DTO_INC;

__inline void dump_OV0_DTO_INC(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_DTO_INC *reg = (regOV0_DTO_INC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_DTO_INC:%x", buff, reg->bitfields.OV0_DTO_INC);
  sprintf(buff,"%s OV0_DTO_INC_ADJ:%x", buff, reg->bitfields.OV0_DTO_INC_ADJ);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_MISC_CNTL regDISP_MISC_CNTL;

__inline void dump_DISP_MISC_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_MISC_CNTL *reg = (regDISP_MISC_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SOFT_RESET_GRPH_PP:%x", buff, reg->bitfields.SOFT_RESET_GRPH_PP);
  sprintf(buff,"%s SOFT_RESET_SUBPIC_PP:%x", buff, reg->bitfields.SOFT_RESET_SUBPIC_PP);
  sprintf(buff,"%s SOFT_RESET_OV0_PP:%x", buff, reg->bitfields.SOFT_RESET_OV0_PP);
  sprintf(buff,"%s SOFT_RESET_GRPH_SCLK:%x", buff, reg->bitfields.SOFT_RESET_GRPH_SCLK);
  sprintf(buff,"%s SOFT_RESET_SUBPIC_SCLK:%x", buff, reg->bitfields.SOFT_RESET_SUBPIC_SCLK);
  sprintf(buff,"%s SOFT_RESET_OV0_SCLK:%x", buff, reg->bitfields.SOFT_RESET_OV0_SCLK);
  sprintf(buff,"%s SYNC_STRENGTH:%x", buff, reg->bitfields.SYNC_STRENGTH);
  sprintf(buff,"%s SYNC_PAD_FLOP_EN:%x", buff, reg->bitfields.SYNC_PAD_FLOP_EN);
  sprintf(buff,"%s SOFT_RESET_GRPH2_PP:%x", buff, reg->bitfields.SOFT_RESET_GRPH2_PP);
  sprintf(buff,"%s SOFT_RESET_GRPH2_SCLK:%x", buff, reg->bitfields.SOFT_RESET_GRPH2_SCLK);
  sprintf(buff,"%s SOFT_RESET_TMDS:%x", buff, reg->bitfields.SOFT_RESET_TMDS);
  sprintf(buff,"%s SOFT_RESET_DVO:%x", buff, reg->bitfields.SOFT_RESET_DVO);
  sprintf(buff,"%s SOFT_RESET_HDCP:%x", buff, reg->bitfields.SOFT_RESET_HDCP);
  sprintf(buff,"%s PALETTE2_MEM_RD_MARGIN:%x", buff, reg->bitfields.PALETTE2_MEM_RD_MARGIN);
  sprintf(buff,"%s PALETTE_MEM_RD_MARGIN:%x", buff, reg->bitfields.PALETTE_MEM_RD_MARGIN);
  sprintf(buff,"%s RMX_BUF_MEM_RD_MARGIN:%x", buff, reg->bitfields.RMX_BUF_MEM_RD_MARGIN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_PWR_MAN regDISP_PWR_MAN;

__inline void dump_DISP_PWR_MAN(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_PWR_MAN *reg = (regDISP_PWR_MAN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_PWR_MAN_D3_CRTC_EN:%x", buff, reg->bitfields.DISP_PWR_MAN_D3_CRTC_EN);
  sprintf(buff,"%s DISP2_PWR_MAN_D3_CRTC2_EN:%x", buff, reg->bitfields.DISP2_PWR_MAN_D3_CRTC2_EN);
  sprintf(buff,"%s DISP_PWR_MAN_DPMS:%x", buff, reg->bitfields.DISP_PWR_MAN_DPMS);
  sprintf(buff,"%s DISP_D3_RST:%x", buff, reg->bitfields.DISP_D3_RST);
  sprintf(buff,"%s DISP_D3_REG_RST:%x", buff, reg->bitfields.DISP_D3_REG_RST);
  sprintf(buff,"%s DISP_D3_GRPH_RST:%x", buff, reg->bitfields.DISP_D3_GRPH_RST);
  sprintf(buff,"%s DISP_D3_SUBPIC_RST:%x", buff, reg->bitfields.DISP_D3_SUBPIC_RST);
  sprintf(buff,"%s DISP_D3_OV0_RST:%x", buff, reg->bitfields.DISP_D3_OV0_RST);
  sprintf(buff,"%s DISP_D1D2_GRPH_RST:%x", buff, reg->bitfields.DISP_D1D2_GRPH_RST);
  sprintf(buff,"%s DISP_D1D2_SUBPIC_RST:%x", buff, reg->bitfields.DISP_D1D2_SUBPIC_RST);
  sprintf(buff,"%s DISP_D1D2_OV0_RST:%x", buff, reg->bitfields.DISP_D1D2_OV0_RST);
  sprintf(buff,"%s DISP_DVO_ENABLE_RST:%x", buff, reg->bitfields.DISP_DVO_ENABLE_RST);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_HW_DEBUG regDISP_HW_DEBUG;

__inline void dump_DISP_HW_DEBUG(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_HW_DEBUG *reg = (regDISP_HW_DEBUG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_HW_0_DEBUG:%x", buff, reg->bitfields.DISP_HW_0_DEBUG);
  sprintf(buff,"%s DISP_HW_1_DEBUG:%x", buff, reg->bitfields.DISP_HW_1_DEBUG);
  sprintf(buff,"%s DISP_HW_2_DEBUG:%x", buff, reg->bitfields.DISP_HW_2_DEBUG);
  sprintf(buff,"%s DISP_HW_3_DEBUG:%x", buff, reg->bitfields.DISP_HW_3_DEBUG);
  sprintf(buff,"%s DISP_HW_4_DEBUG:%x", buff, reg->bitfields.DISP_HW_4_DEBUG);
  sprintf(buff,"%s DISP_HW_5_DEBUG:%x", buff, reg->bitfields.DISP_HW_5_DEBUG);
  sprintf(buff,"%s DISP_HW_6_DEBUG:%x", buff, reg->bitfields.DISP_HW_6_DEBUG);
  sprintf(buff,"%s DISP_HW_7_DEBUG:%x", buff, reg->bitfields.DISP_HW_7_DEBUG);
  sprintf(buff,"%s DISP_HW_8_DEBUG:%x", buff, reg->bitfields.DISP_HW_8_DEBUG);
  sprintf(buff,"%s DISP_HW_9_DEBUG:%x", buff, reg->bitfields.DISP_HW_9_DEBUG);
  sprintf(buff,"%s DISP_HW_A_DEBUG:%x", buff, reg->bitfields.DISP_HW_A_DEBUG);
  sprintf(buff,"%s DISP_HW_B_DEBUG:%x", buff, reg->bitfields.DISP_HW_B_DEBUG);
  sprintf(buff,"%s DISP_HW_C_DEBUG:%x", buff, reg->bitfields.DISP_HW_C_DEBUG);
  sprintf(buff,"%s DISP_HW_D_DEBUG:%x", buff, reg->bitfields.DISP_HW_D_DEBUG);
  sprintf(buff,"%s DISP_HW_E_DEBUG:%x", buff, reg->bitfields.DISP_HW_E_DEBUG);
  sprintf(buff,"%s DISP_HW_F_DEBUG:%x", buff, reg->bitfields.DISP_HW_F_DEBUG);
  sprintf(buff,"%s DISP_HW_10_DEBUG:%x", buff, reg->bitfields.DISP_HW_10_DEBUG);
  sprintf(buff,"%s DISP_HW_11_DEBUG:%x", buff, reg->bitfields.DISP_HW_11_DEBUG);
  sprintf(buff,"%s DISP_HW_12_DEBUG:%x", buff, reg->bitfields.DISP_HW_12_DEBUG);
  sprintf(buff,"%s DISP_HW_13_DEBUG:%x", buff, reg->bitfields.DISP_HW_13_DEBUG);
  sprintf(buff,"%s DISP_HW_14_DEBUG:%x", buff, reg->bitfields.DISP_HW_14_DEBUG);
  sprintf(buff,"%s DISP_HW_15_DEBUG:%x", buff, reg->bitfields.DISP_HW_15_DEBUG);
  sprintf(buff,"%s DISP_HW_16_DEBUG:%x", buff, reg->bitfields.DISP_HW_16_DEBUG);
  sprintf(buff,"%s DISP_HW_17_DEBUG:%x", buff, reg->bitfields.DISP_HW_17_DEBUG);
  sprintf(buff,"%s DISP_HW_18_DEBUG:%x", buff, reg->bitfields.DISP_HW_18_DEBUG);
  sprintf(buff,"%s DISP_HW_19_DEBUG:%x", buff, reg->bitfields.DISP_HW_19_DEBUG);
  sprintf(buff,"%s DISP_HW_1A_DEBUG:%x", buff, reg->bitfields.DISP_HW_1A_DEBUG);
  sprintf(buff,"%s DISP_HW_1B_DEBUG:%x", buff, reg->bitfields.DISP_HW_1B_DEBUG);
  sprintf(buff,"%s DISP_HW_1C_DEBUG:%x", buff, reg->bitfields.DISP_HW_1C_DEBUG);
  sprintf(buff,"%s DISP_HW_1D_DEBUG:%x", buff, reg->bitfields.DISP_HW_1D_DEBUG);
  sprintf(buff,"%s DISP_HW_1E_DEBUG:%x", buff, reg->bitfields.DISP_HW_1E_DEBUG);
  sprintf(buff,"%s DISP_HW_1F_DEBUG:%x", buff, reg->bitfields.DISP_HW_1F_DEBUG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_LIN_TRANS_A regOV0_LIN_TRANS_A;

__inline void dump_OV0_LIN_TRANS_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_LIN_TRANS_A *reg = (regOV0_LIN_TRANS_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LIN_TRANS_Cb_R:%x", buff, reg->bitfields.OV0_LIN_TRANS_Cb_R);
  sprintf(buff,"%s OV0_LIN_TRANS_Y_R:%x", buff, reg->bitfields.OV0_LIN_TRANS_Y_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_LIN_TRANS_B regOV0_LIN_TRANS_B;

__inline void dump_OV0_LIN_TRANS_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_LIN_TRANS_B *reg = (regOV0_LIN_TRANS_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LIN_TRANS_OFF_R:%x", buff, reg->bitfields.OV0_LIN_TRANS_OFF_R);
  sprintf(buff,"%s OV0_LIN_TRANS_Cr_R:%x", buff, reg->bitfields.OV0_LIN_TRANS_Cr_R);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_LIN_TRANS_C regOV0_LIN_TRANS_C;

__inline void dump_OV0_LIN_TRANS_C(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_LIN_TRANS_C *reg = (regOV0_LIN_TRANS_C *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LIN_TRANS_Cb_G:%x", buff, reg->bitfields.OV0_LIN_TRANS_Cb_G);
  sprintf(buff,"%s OV0_LIN_TRANS_Y_G:%x", buff, reg->bitfields.OV0_LIN_TRANS_Y_G);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_LIN_TRANS_D regOV0_LIN_TRANS_D;

__inline void dump_OV0_LIN_TRANS_D(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_LIN_TRANS_D *reg = (regOV0_LIN_TRANS_D *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LIN_TRANS_OFF_G:%x", buff, reg->bitfields.OV0_LIN_TRANS_OFF_G);
  sprintf(buff,"%s OV0_LIN_TRANS_Cr_G:%x", buff, reg->bitfields.OV0_LIN_TRANS_Cr_G);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_LIN_TRANS_E regOV0_LIN_TRANS_E;

__inline void dump_OV0_LIN_TRANS_E(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_LIN_TRANS_E *reg = (regOV0_LIN_TRANS_E *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LIN_TRANS_Cb_B:%x", buff, reg->bitfields.OV0_LIN_TRANS_Cb_B);
  sprintf(buff,"%s OV0_LIN_TRANS_Y_B:%x", buff, reg->bitfields.OV0_LIN_TRANS_Y_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_LIN_TRANS_F regOV0_LIN_TRANS_F;

__inline void dump_OV0_LIN_TRANS_F(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_LIN_TRANS_F *reg = (regOV0_LIN_TRANS_F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_LIN_TRANS_OFF_B:%x", buff, reg->bitfields.OV0_LIN_TRANS_OFF_B);
  sprintf(buff,"%s OV0_LIN_TRANS_Cr_B:%x", buff, reg->bitfields.OV0_LIN_TRANS_Cr_B);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_380_3BF regOV0_GAMMA_380_3BF;

__inline void dump_OV0_GAMMA_380_3BF(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_380_3BF *reg = (regOV0_GAMMA_380_3BF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_380_3BF_OFFSET_R2:%x", buff, reg->bitfields.OV0_GAMMA_380_3BF_OFFSET_R2);
  sprintf(buff,"%s OV0_GAMMA_380_3BF_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_380_3BF_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_3C0_3FF regOV0_GAMMA_3C0_3FF;

__inline void dump_OV0_GAMMA_3C0_3FF(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_3C0_3FF *reg = (regOV0_GAMMA_3C0_3FF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_3C0_3FF_OFFSET_R2:%x", buff, reg->bitfields.OV0_GAMMA_3C0_3FF_OFFSET_R2);
  sprintf(buff,"%s OV0_GAMMA_3C0_3FF_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_3C0_3FF_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_80_BF regOV0_GAMMA_80_BF;

__inline void dump_OV0_GAMMA_80_BF(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_80_BF *reg = (regOV0_GAMMA_80_BF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_80_BF_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_80_BF_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_80_BF_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_80_BF_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_C0_FF regOV0_GAMMA_C0_FF;

__inline void dump_OV0_GAMMA_C0_FF(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_C0_FF *reg = (regOV0_GAMMA_C0_FF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_C0_FF_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_C0_FF_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_C0_FF_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_C0_FF_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_100_13F regOV0_GAMMA_100_13F;

__inline void dump_OV0_GAMMA_100_13F(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_100_13F *reg = (regOV0_GAMMA_100_13F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_100_13F_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_100_13F_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_100_13F_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_100_13F_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_140_17F regOV0_GAMMA_140_17F;

__inline void dump_OV0_GAMMA_140_17F(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_140_17F *reg = (regOV0_GAMMA_140_17F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_140_17F_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_140_17F_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_140_17F_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_140_17F_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_180_1BF regOV0_GAMMA_180_1BF;

__inline void dump_OV0_GAMMA_180_1BF(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_180_1BF *reg = (regOV0_GAMMA_180_1BF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_180_1BF_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_180_1BF_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_180_1BF_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_180_1BF_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_1C0_1FF regOV0_GAMMA_1C0_1FF;

__inline void dump_OV0_GAMMA_1C0_1FF(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_1C0_1FF *reg = (regOV0_GAMMA_1C0_1FF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_1C0_1FF_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_1C0_1FF_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_1C0_1FF_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_1C0_1FF_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_200_23F regOV0_GAMMA_200_23F;

__inline void dump_OV0_GAMMA_200_23F(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_200_23F *reg = (regOV0_GAMMA_200_23F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_200_23F_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_200_23F_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_200_23F_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_200_23F_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_240_27F regOV0_GAMMA_240_27F;

__inline void dump_OV0_GAMMA_240_27F(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_240_27F *reg = (regOV0_GAMMA_240_27F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_240_27F_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_240_27F_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_240_27F_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_240_27F_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_280_2BF regOV0_GAMMA_280_2BF;

__inline void dump_OV0_GAMMA_280_2BF(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_280_2BF *reg = (regOV0_GAMMA_280_2BF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_280_2BF_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_280_2BF_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_280_2BF_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_280_2BF_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_2C0_2FF regOV0_GAMMA_2C0_2FF;

__inline void dump_OV0_GAMMA_2C0_2FF(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_2C0_2FF *reg = (regOV0_GAMMA_2C0_2FF *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_2C0_2FF_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_2C0_2FF_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_2C0_2FF_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_2C0_2FF_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_300_33F regOV0_GAMMA_300_33F;

__inline void dump_OV0_GAMMA_300_33F(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_300_33F *reg = (regOV0_GAMMA_300_33F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_300_33F_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_300_33F_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_300_33F_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_300_33F_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union OV0_GAMMA_340_37F regOV0_GAMMA_340_37F;

__inline void dump_OV0_GAMMA_340_37F(__in  unsigned int *dwreg, __in  char *buff)
{
  regOV0_GAMMA_340_37F *reg = (regOV0_GAMMA_340_37F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s OV0_GAMMA_340_37F_OFFSET:%x", buff, reg->bitfields.OV0_GAMMA_340_37F_OFFSET);
  sprintf(buff,"%s OV0_GAMMA_340_37F_SLOPE:%x", buff, reg->bitfields.OV0_GAMMA_340_37F_SLOPE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_MERGE_CNTL regDISP_MERGE_CNTL;

__inline void dump_DISP_MERGE_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_MERGE_CNTL *reg = (regDISP_MERGE_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_ALPHA_MODE:%x", buff, reg->bitfields.DISP_ALPHA_MODE);
  sprintf(buff,"%s DISP_ALPHA_INV:%x", buff, reg->bitfields.DISP_ALPHA_INV);
  sprintf(buff,"%s DISP_ALPHA_PREMULT:%x", buff, reg->bitfields.DISP_ALPHA_PREMULT);
  sprintf(buff,"%s DISP_RGB_OFFSET_EN:%x", buff, reg->bitfields.DISP_RGB_OFFSET_EN);
  sprintf(buff,"%s DISP_LIN_TRANS_BYPASS:%x", buff, reg->bitfields.DISP_LIN_TRANS_BYPASS);
  sprintf(buff,"%s DISP_GRPH_ALPHA:%x", buff, reg->bitfields.DISP_GRPH_ALPHA);
  sprintf(buff,"%s DISP_OV0_ALPHA:%x", buff, reg->bitfields.DISP_OV0_ALPHA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_OUTPUT_CNTL regDISP_OUTPUT_CNTL;

__inline void dump_DISP_OUTPUT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_OUTPUT_CNTL *reg = (regDISP_OUTPUT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_DAC_SOURCE:%x", buff, reg->bitfields.DISP_DAC_SOURCE);
  sprintf(buff,"%s DISP_TRANS_MATRIX_SEL:%x", buff, reg->bitfields.DISP_TRANS_MATRIX_SEL);
  sprintf(buff,"%s DISP_RMX_DITH_EN:%x", buff, reg->bitfields.DISP_RMX_DITH_EN);
  sprintf(buff,"%s DISP_TRANS_SOURCE:%x", buff, reg->bitfields.DISP_TRANS_SOURCE);
  sprintf(buff,"%s DISP_TV_SOURCE:%x", buff, reg->bitfields.DISP_TV_SOURCE);
  sprintf(buff,"%s DISP_TV_MODE:%x", buff, reg->bitfields.DISP_TV_MODE);
  sprintf(buff,"%s DISP_TV_YG_DITH_EN:%x", buff, reg->bitfields.DISP_TV_YG_DITH_EN);
  sprintf(buff,"%s DISP_TV_CbB_CrR_DITH_EN:%x", buff, reg->bitfields.DISP_TV_CbB_CrR_DITH_EN);
  sprintf(buff,"%s DISP_TV_BIT_WIDTH:%x", buff, reg->bitfields.DISP_TV_BIT_WIDTH);
  sprintf(buff,"%s DISP_TV_SYNC_MODE:%x", buff, reg->bitfields.DISP_TV_SYNC_MODE);
  sprintf(buff,"%s DISP_TV_SYNC_FORCE:%x", buff, reg->bitfields.DISP_TV_SYNC_FORCE);
  sprintf(buff,"%s DISP_TV_SYNC_COLOR:%x", buff, reg->bitfields.DISP_TV_SYNC_COLOR);
  sprintf(buff,"%s DISP_TV_EVEN_FLAG_CNTL:%x", buff, reg->bitfields.DISP_TV_EVEN_FLAG_CNTL);
  sprintf(buff,"%s DISP_TV_SYNC_STATUS:%x", buff, reg->bitfields.DISP_TV_SYNC_STATUS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_TV_OUT_CNTL regDISP_TV_OUT_CNTL;

__inline void dump_DISP_TV_OUT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_TV_OUT_CNTL *reg = (regDISP_TV_OUT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_TV_OUT_YG_FILTER:%x", buff, reg->bitfields.DISP_TV_OUT_YG_FILTER);
  sprintf(buff,"%s DISP_TV_OUT_YG_SAMPLE:%x", buff, reg->bitfields.DISP_TV_OUT_YG_SAMPLE);
  sprintf(buff,"%s DISP_TV_OUT_CrR_FILTER:%x", buff, reg->bitfields.DISP_TV_OUT_CrR_FILTER);
  sprintf(buff,"%s DISP_TV_OUT_CrR_SAMPLE:%x", buff, reg->bitfields.DISP_TV_OUT_CrR_SAMPLE);
  sprintf(buff,"%s DISP_TV_OUT_CbB_FILTER:%x", buff, reg->bitfields.DISP_TV_OUT_CbB_FILTER);
  sprintf(buff,"%s DISP_TV_OUT_CbB_SAMPLE:%x", buff, reg->bitfields.DISP_TV_OUT_CbB_SAMPLE);
  sprintf(buff,"%s DISP_TV_SUBSAMPLE_CNTL:%x", buff, reg->bitfields.DISP_TV_SUBSAMPLE_CNTL);
  sprintf(buff,"%s DISP_TV_H_DOWNSCALE:%x", buff, reg->bitfields.DISP_TV_H_DOWNSCALE);
  sprintf(buff,"%s DISP_TV_PATH_SRC:%x", buff, reg->bitfields.DISP_TV_PATH_SRC);
  sprintf(buff,"%s DISP_TV_COLOR_SPACE:%x", buff, reg->bitfields.DISP_TV_COLOR_SPACE);
  sprintf(buff,"%s DISP_TV_DITH_MODE:%x", buff, reg->bitfields.DISP_TV_DITH_MODE);
  sprintf(buff,"%s DISP_TV_DATA_ZERO_SEL:%x", buff, reg->bitfields.DISP_TV_DATA_ZERO_SEL);
  sprintf(buff,"%s DISP_TV_CLKO_SEL:%x", buff, reg->bitfields.DISP_TV_CLKO_SEL);
  sprintf(buff,"%s DISP_TV_CLKO_OUT_EN:%x", buff, reg->bitfields.DISP_TV_CLKO_OUT_EN);
  sprintf(buff,"%s DISP_TV_DOWNSCALE_CNTL:%x", buff, reg->bitfields.DISP_TV_DOWNSCALE_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_LIN_TRANS_GRPH_A regDISP_LIN_TRANS_GRPH_A;

__inline void dump_DISP_LIN_TRANS_GRPH_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_LIN_TRANS_GRPH_A *reg = (regDISP_LIN_TRANS_GRPH_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_LIN_TRANS_GRPH_C2:%x", buff, reg->bitfields.DISP_LIN_TRANS_GRPH_C2);
  sprintf(buff,"%s DISP_LIN_TRANS_GRPH_C1:%x", buff, reg->bitfields.DISP_LIN_TRANS_GRPH_C1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_LIN_TRANS_GRPH_B regDISP_LIN_TRANS_GRPH_B;

__inline void dump_DISP_LIN_TRANS_GRPH_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_LIN_TRANS_GRPH_B *reg = (regDISP_LIN_TRANS_GRPH_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_LIN_TRANS_GRPH_C4:%x", buff, reg->bitfields.DISP_LIN_TRANS_GRPH_C4);
  sprintf(buff,"%s DISP_LIN_TRANS_GRPH_C3:%x", buff, reg->bitfields.DISP_LIN_TRANS_GRPH_C3);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_LIN_TRANS_GRPH_C regDISP_LIN_TRANS_GRPH_C;

__inline void dump_DISP_LIN_TRANS_GRPH_C(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_LIN_TRANS_GRPH_C *reg = (regDISP_LIN_TRANS_GRPH_C *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_LIN_TRANS_GRPH_C6:%x", buff, reg->bitfields.DISP_LIN_TRANS_GRPH_C6);
  sprintf(buff,"%s DISP_LIN_TRANS_GRPH_C5:%x", buff, reg->bitfields.DISP_LIN_TRANS_GRPH_C5);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_LIN_TRANS_GRPH_D regDISP_LIN_TRANS_GRPH_D;

__inline void dump_DISP_LIN_TRANS_GRPH_D(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_LIN_TRANS_GRPH_D *reg = (regDISP_LIN_TRANS_GRPH_D *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_LIN_TRANS_GRPH_C8:%x", buff, reg->bitfields.DISP_LIN_TRANS_GRPH_C8);
  sprintf(buff,"%s DISP_LIN_TRANS_GRPH_C7:%x", buff, reg->bitfields.DISP_LIN_TRANS_GRPH_C7);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_LIN_TRANS_GRPH_E regDISP_LIN_TRANS_GRPH_E;

__inline void dump_DISP_LIN_TRANS_GRPH_E(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_LIN_TRANS_GRPH_E *reg = (regDISP_LIN_TRANS_GRPH_E *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_LIN_TRANS_GRPH_C10:%x", buff, reg->bitfields.DISP_LIN_TRANS_GRPH_C10);
  sprintf(buff,"%s DISP_LIN_TRANS_GRPH_C9:%x", buff, reg->bitfields.DISP_LIN_TRANS_GRPH_C9);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_LIN_TRANS_GRPH_F regDISP_LIN_TRANS_GRPH_F;

__inline void dump_DISP_LIN_TRANS_GRPH_F(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_LIN_TRANS_GRPH_F *reg = (regDISP_LIN_TRANS_GRPH_F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_LIN_TRANS_GRPH_C12:%x", buff, reg->bitfields.DISP_LIN_TRANS_GRPH_C12);
  sprintf(buff,"%s DISP_LIN_TRANS_GRPH_C11:%x", buff, reg->bitfields.DISP_LIN_TRANS_GRPH_C11);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_LIN_TRANS_VID_A regDISP_LIN_TRANS_VID_A;

__inline void dump_DISP_LIN_TRANS_VID_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_LIN_TRANS_VID_A *reg = (regDISP_LIN_TRANS_VID_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_LIN_TRANS_VID_C2:%x", buff, reg->bitfields.DISP_LIN_TRANS_VID_C2);
  sprintf(buff,"%s DISP_LIN_TRANS_VID_C1:%x", buff, reg->bitfields.DISP_LIN_TRANS_VID_C1);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_LIN_TRANS_VID_B regDISP_LIN_TRANS_VID_B;

__inline void dump_DISP_LIN_TRANS_VID_B(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_LIN_TRANS_VID_B *reg = (regDISP_LIN_TRANS_VID_B *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_LIN_TRANS_VID_C4:%x", buff, reg->bitfields.DISP_LIN_TRANS_VID_C4);
  sprintf(buff,"%s DISP_LIN_TRANS_VID_C3:%x", buff, reg->bitfields.DISP_LIN_TRANS_VID_C3);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_LIN_TRANS_VID_C regDISP_LIN_TRANS_VID_C;

__inline void dump_DISP_LIN_TRANS_VID_C(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_LIN_TRANS_VID_C *reg = (regDISP_LIN_TRANS_VID_C *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_LIN_TRANS_VID_C6:%x", buff, reg->bitfields.DISP_LIN_TRANS_VID_C6);
  sprintf(buff,"%s DISP_LIN_TRANS_VID_C5:%x", buff, reg->bitfields.DISP_LIN_TRANS_VID_C5);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_LIN_TRANS_VID_D regDISP_LIN_TRANS_VID_D;

__inline void dump_DISP_LIN_TRANS_VID_D(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_LIN_TRANS_VID_D *reg = (regDISP_LIN_TRANS_VID_D *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_LIN_TRANS_VID_C8:%x", buff, reg->bitfields.DISP_LIN_TRANS_VID_C8);
  sprintf(buff,"%s DISP_LIN_TRANS_VID_C7:%x", buff, reg->bitfields.DISP_LIN_TRANS_VID_C7);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_LIN_TRANS_VID_E regDISP_LIN_TRANS_VID_E;

__inline void dump_DISP_LIN_TRANS_VID_E(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_LIN_TRANS_VID_E *reg = (regDISP_LIN_TRANS_VID_E *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_LIN_TRANS_VID_C10:%x", buff, reg->bitfields.DISP_LIN_TRANS_VID_C10);
  sprintf(buff,"%s DISP_LIN_TRANS_VID_C9:%x", buff, reg->bitfields.DISP_LIN_TRANS_VID_C9);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DISP_LIN_TRANS_VID_F regDISP_LIN_TRANS_VID_F;

__inline void dump_DISP_LIN_TRANS_VID_F(__in  unsigned int *dwreg, __in  char *buff)
{
  regDISP_LIN_TRANS_VID_F *reg = (regDISP_LIN_TRANS_VID_F *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_LIN_TRANS_VID_C12:%x", buff, reg->bitfields.DISP_LIN_TRANS_VID_C12);
  sprintf(buff,"%s DISP_LIN_TRANS_VID_C11:%x", buff, reg->bitfields.DISP_LIN_TRANS_VID_C11);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_EMBEDDED_SYNC_CNTL regDAC_EMBEDDED_SYNC_CNTL;

__inline void dump_DAC_EMBEDDED_SYNC_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_EMBEDDED_SYNC_CNTL *reg = (regDAC_EMBEDDED_SYNC_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_EMBED_SYNC_EN_Y_G:%x", buff, reg->bitfields.DAC_EMBED_SYNC_EN_Y_G);
  sprintf(buff,"%s DAC_EMBED_SYNC_EN_Cb_B:%x", buff, reg->bitfields.DAC_EMBED_SYNC_EN_Cb_B);
  sprintf(buff,"%s DAC_EMBED_SYNC_EN_Cr_R:%x", buff, reg->bitfields.DAC_EMBED_SYNC_EN_Cr_R);
  sprintf(buff,"%s DAC_TRILEVEL_SYNC_EN:%x", buff, reg->bitfields.DAC_TRILEVEL_SYNC_EN);
  sprintf(buff,"%s DAC_EMBED_VSYNC_EN_Y_G:%x", buff, reg->bitfields.DAC_EMBED_VSYNC_EN_Y_G);
  sprintf(buff,"%s DAC_EMBED_VSYNC_EN_CbCr_BR:%x", buff, reg->bitfields.DAC_EMBED_VSYNC_EN_CbCr_BR);
  sprintf(buff,"%s DAC_HSYNC_WID_LSB:%x", buff, reg->bitfields.DAC_HSYNC_WID_LSB);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_BROAD_PULSE regDAC_BROAD_PULSE;

__inline void dump_DAC_BROAD_PULSE(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_BROAD_PULSE *reg = (regDAC_BROAD_PULSE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_BROAD_PULSE_START_R2:%x", buff, reg->bitfields.DAC_BROAD_PULSE_START_R2);
  sprintf(buff,"%s DAC_BROAD_PULSE_END_R2:%x", buff, reg->bitfields.DAC_BROAD_PULSE_END_R2);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_SKEW_CLKS regDAC_SKEW_CLKS;

__inline void dump_DAC_SKEW_CLKS(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_SKEW_CLKS *reg = (regDAC_SKEW_CLKS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_INCR regDAC_INCR;

__inline void dump_DAC_INCR(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_INCR *reg = (regDAC_INCR *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_INCR_Y_G:%x", buff, reg->bitfields.DAC_INCR_Y_G);
  sprintf(buff,"%s DAC_INCR_CrCb_RB:%x", buff, reg->bitfields.DAC_INCR_CrCb_RB);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_NEG_SYNC_LEVEL regDAC_NEG_SYNC_LEVEL;

__inline void dump_DAC_NEG_SYNC_LEVEL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_NEG_SYNC_LEVEL *reg = (regDAC_NEG_SYNC_LEVEL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_NEG_SYNC_LEVEL_Y_G:%x", buff, reg->bitfields.DAC_NEG_SYNC_LEVEL_Y_G);
  sprintf(buff,"%s DAC_NEG_SYNC_LEVEL_CrCb_RB:%x", buff, reg->bitfields.DAC_NEG_SYNC_LEVEL_CrCb_RB);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_POS_SYNC_LEVEL regDAC_POS_SYNC_LEVEL;

__inline void dump_DAC_POS_SYNC_LEVEL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_POS_SYNC_LEVEL *reg = (regDAC_POS_SYNC_LEVEL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_POS_SYNC_LEVEL_Y_G:%x", buff, reg->bitfields.DAC_POS_SYNC_LEVEL_Y_G);
  sprintf(buff,"%s DAC_POS_SYNC_LEVEL_CrCb_RB:%x", buff, reg->bitfields.DAC_POS_SYNC_LEVEL_CrCb_RB);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_BLANK_LEVEL regDAC_BLANK_LEVEL;

__inline void dump_DAC_BLANK_LEVEL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_BLANK_LEVEL *reg = (regDAC_BLANK_LEVEL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_BLANK_LEVEL_Y_G:%x", buff, reg->bitfields.DAC_BLANK_LEVEL_Y_G);
  sprintf(buff,"%s DAC_BLANK_LEVEL_CrCb_RB:%x", buff, reg->bitfields.DAC_BLANK_LEVEL_CrCb_RB);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_SYNC_EQUALIZATION regDAC_SYNC_EQUALIZATION;

__inline void dump_DAC_SYNC_EQUALIZATION(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_SYNC_EQUALIZATION *reg = (regDAC_SYNC_EQUALIZATION *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_SYNC_EQ_START:%x", buff, reg->bitfields.DAC_SYNC_EQ_START);
  sprintf(buff,"%s DAC_SYNC_EQ_END:%x", buff, reg->bitfields.DAC_SYNC_EQ_END);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_MV_CNTL regDAC_MV_CNTL;

__inline void dump_DAC_MV_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_MV_CNTL *reg = (regDAC_MV_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_MV_AGC_PULSE_EN:%x", buff, reg->bitfields.DAC_MV_AGC_PULSE_EN);
  sprintf(buff,"%s DAC_MV_BLANK_EN:%x", buff, reg->bitfields.DAC_MV_BLANK_EN);
  sprintf(buff,"%s DAC_MV_BP_PULSE_EN:%x", buff, reg->bitfields.DAC_MV_BP_PULSE_EN);
  sprintf(buff,"%s DAC_MV_AGC_PULSE_COUNT:%x", buff, reg->bitfields.DAC_MV_AGC_PULSE_COUNT);
  sprintf(buff,"%s DAC_MV_WRITE_EN:%x", buff, reg->bitfields.DAC_MV_WRITE_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_MV_AGC_PULSE_LINES regDAC_MV_AGC_PULSE_LINES;

__inline void dump_DAC_MV_AGC_PULSE_LINES(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_MV_AGC_PULSE_LINES *reg = (regDAC_MV_AGC_PULSE_LINES *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_MV_AGC_VSTART:%x", buff, reg->bitfields.DAC_MV_AGC_VSTART);
  sprintf(buff,"%s DAC_MV_AGC_VEND:%x", buff, reg->bitfields.DAC_MV_AGC_VEND);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_MV_AGC_PULSE_POS regDAC_MV_AGC_PULSE_POS;

__inline void dump_DAC_MV_AGC_PULSE_POS(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_MV_AGC_PULSE_POS *reg = (regDAC_MV_AGC_PULSE_POS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_MV_PSEUDO_START:%x", buff, reg->bitfields.DAC_MV_PSEUDO_START);
  sprintf(buff,"%s DAC_MV_PSEUDO_SPACE:%x", buff, reg->bitfields.DAC_MV_PSEUDO_SPACE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_MV_AGC_PULSE_WIDTH regDAC_MV_AGC_PULSE_WIDTH;

__inline void dump_DAC_MV_AGC_PULSE_WIDTH(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_MV_AGC_PULSE_WIDTH *reg = (regDAC_MV_AGC_PULSE_WIDTH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_MV_AGC_WIDTH:%x", buff, reg->bitfields.DAC_MV_AGC_WIDTH);
  sprintf(buff,"%s DAC_MV_PSEUDO_WIDTH:%x", buff, reg->bitfields.DAC_MV_PSEUDO_WIDTH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_MV_AGC_PULSE_LEVELS regDAC_MV_AGC_PULSE_LEVELS;

__inline void dump_DAC_MV_AGC_PULSE_LEVELS(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_MV_AGC_PULSE_LEVELS *reg = (regDAC_MV_AGC_PULSE_LEVELS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_MV_AGC_LEVEL_MAX:%x", buff, reg->bitfields.DAC_MV_AGC_LEVEL_MAX);
  sprintf(buff,"%s DAC_MV_AGC_LEVEL_INCR:%x", buff, reg->bitfields.DAC_MV_AGC_LEVEL_INCR);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_MV_AGC_CYCLE regDAC_MV_AGC_CYCLE;

__inline void dump_DAC_MV_AGC_CYCLE(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_MV_AGC_CYCLE *reg = (regDAC_MV_AGC_CYCLE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_MV_AGC_MAX_FIELDS:%x", buff, reg->bitfields.DAC_MV_AGC_MAX_FIELDS);
  sprintf(buff,"%s DAC_MV_AGC_MIN_FIELDS:%x", buff, reg->bitfields.DAC_MV_AGC_MIN_FIELDS);
  sprintf(buff,"%s DAC_MV_AGC_SKEW_FIELDS:%x", buff, reg->bitfields.DAC_MV_AGC_SKEW_FIELDS);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_MV_BLANK_LINES regDAC_MV_BLANK_LINES;

__inline void dump_DAC_MV_BLANK_LINES(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_MV_BLANK_LINES *reg = (regDAC_MV_BLANK_LINES *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_MV_BLANK_VSTART:%x", buff, reg->bitfields.DAC_MV_BLANK_VSTART);
  sprintf(buff,"%s DAC_MV_BLANK_VEND:%x", buff, reg->bitfields.DAC_MV_BLANK_VEND);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_MV_BLANK_LEVEL regDAC_MV_BLANK_LEVEL;

__inline void dump_DAC_MV_BLANK_LEVEL(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_MV_BLANK_LEVEL *reg = (regDAC_MV_BLANK_LEVEL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_MV_BP_PULSE_LINES regDAC_MV_BP_PULSE_LINES;

__inline void dump_DAC_MV_BP_PULSE_LINES(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_MV_BP_PULSE_LINES *reg = (regDAC_MV_BP_PULSE_LINES *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_MV_BP_PULSE_VSTART:%x", buff, reg->bitfields.DAC_MV_BP_PULSE_VSTART);
  sprintf(buff,"%s DAC_MV_BP_PULSE_VEND:%x", buff, reg->bitfields.DAC_MV_BP_PULSE_VEND);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_MV_BP_PULSE regDAC_MV_BP_PULSE;

__inline void dump_DAC_MV_BP_PULSE(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_MV_BP_PULSE *reg = (regDAC_MV_BP_PULSE *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_MV_BP_PULSE_NOM_LEVEL:%x", buff, reg->bitfields.DAC_MV_BP_PULSE_NOM_LEVEL);
  sprintf(buff,"%s DAC_MV_BP_PULSE_MOD_LEVEL:%x", buff, reg->bitfields.DAC_MV_BP_PULSE_MOD_LEVEL);
  sprintf(buff,"%s DAC_MV_BP_PULSE_WIDTH:%x", buff, reg->bitfields.DAC_MV_BP_PULSE_WIDTH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_CGMS_LINES regDAC_CGMS_LINES;

__inline void dump_DAC_CGMS_LINES(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_CGMS_LINES *reg = (regDAC_CGMS_LINES *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_CGMS_VSTART:%x", buff, reg->bitfields.DAC_CGMS_VSTART);
  sprintf(buff,"%s DAC_CGMS_VEND:%x", buff, reg->bitfields.DAC_CGMS_VEND);
  sprintf(buff,"%s DAC_CGMS_RB_EN:%x", buff, reg->bitfields.DAC_CGMS_RB_EN);
  sprintf(buff,"%s DAC_CGMS_YG_EN:%x", buff, reg->bitfields.DAC_CGMS_YG_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_CGMS_TIMING regDAC_CGMS_TIMING;

__inline void dump_DAC_CGMS_TIMING(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_CGMS_TIMING *reg = (regDAC_CGMS_TIMING *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_CGMS_WIDTH:%x", buff, reg->bitfields.DAC_CGMS_WIDTH);
  sprintf(buff,"%s DAC_CGMS_HSTART:%x", buff, reg->bitfields.DAC_CGMS_HSTART);
  sprintf(buff,"%s DAC_CGMS_1_LEVEL:%x", buff, reg->bitfields.DAC_CGMS_1_LEVEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union DAC_CGMS_DATA regDAC_CGMS_DATA;

__inline void dump_DAC_CGMS_DATA(__in  unsigned int *dwreg, __in  char *buff)
{
  regDAC_CGMS_DATA *reg = (regDAC_CGMS_DATA *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DAC_CGMS_DATA:%x", buff, reg->bitfields.DAC_CGMS_DATA);
  sprintf(buff,"%s DAC_CGMS_BITS:%x", buff, reg->bitfields.DAC_CGMS_BITS);
  sprintf(buff,"%s DAC_CGMS_DATA_PENDING:%x", buff, reg->bitfields.DAC_CGMS_DATA_PENDING);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union HDCP_DEBUG_R2 regHDCP_DEBUG_R2;

__inline void dump_HDCP_DEBUG_R2(__in  unsigned int *dwreg, __in  char *buff)
{
  regHDCP_DEBUG_R2 *reg = (regHDCP_DEBUG_R2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HDCP_DEBUG_EN:%x", buff, reg->bitfields.HDCP_DEBUG_EN);
  sprintf(buff,"%s I2C_CNTL_REGS_AFFECT_HDCP_I2C:%x", buff, reg->bitfields.I2C_CNTL_REGS_AFFECT_HDCP_I2C);
  sprintf(buff,"%s SW_CAN_QUEUE_I2C_GO:%x", buff, reg->bitfields.SW_CAN_QUEUE_I2C_GO);
  sprintf(buff,"%s USE_HDCP_I2C_SHORT_READS:%x", buff, reg->bitfields.USE_HDCP_I2C_SHORT_READS);
  sprintf(buff,"%s HDCP_MODE:%x", buff, reg->bitfields.HDCP_MODE);
  sprintf(buff,"%s HDCP_HOTPLUG_SEL_BYPASS_EN:%x", buff, reg->bitfields.HDCP_HOTPLUG_SEL_BYPASS_EN);
  sprintf(buff,"%s HDCP_HOTPLUG_SELECT:%x", buff, reg->bitfields.HDCP_HOTPLUG_SELECT);
  sprintf(buff,"%s HDCP_DEBUG_BIT7:%x", buff, reg->bitfields.HDCP_DEBUG_BIT7);
  sprintf(buff,"%s HDCP_DEBUG_ADDR:%x", buff, reg->bitfields.HDCP_DEBUG_ADDR);
  sprintf(buff,"%s HDCP_DEBUG_DATA:%x", buff, reg->bitfields.HDCP_DEBUG_DATA);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CLOCK_CNTL_INDEX regCLOCK_CNTL_INDEX;

__inline void dump_CLOCK_CNTL_INDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regCLOCK_CNTL_INDEX *reg = (regCLOCK_CNTL_INDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PLL_ADDR_R2:%x", buff, reg->bitfields.PLL_ADDR_R2);
  sprintf(buff,"%s PLL_WR_EN:%x", buff, reg->bitfields.PLL_WR_EN);
  sprintf(buff,"%s PPLL_DIV_SEL:%x", buff, reg->bitfields.PPLL_DIV_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union PLL_TEST_CNTL regPLL_TEST_CNTL;

__inline void dump_PLL_TEST_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regPLL_TEST_CNTL *reg = (regPLL_TEST_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TST_SRC_SEL_R2:%x", buff, reg->bitfields.TST_SRC_SEL_R2);
  sprintf(buff,"%s TST_SRC_INV:%x", buff, reg->bitfields.TST_SRC_INV);
  sprintf(buff,"%s TST_DIVIDERS:%x", buff, reg->bitfields.TST_DIVIDERS);
  sprintf(buff,"%s PLL_MASK_READ_B:%x", buff, reg->bitfields.PLL_MASK_READ_B);
  sprintf(buff,"%s TESTCLK_MUX_SEL:%x", buff, reg->bitfields.TESTCLK_MUX_SEL);
  sprintf(buff,"%s ANALOG_MON_R2:%x", buff, reg->bitfields.ANALOG_MON_R2);
  sprintf(buff,"%s TEST_COUNT:%x", buff, reg->bitfields.TEST_COUNT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union r200DAC_CNTL2 regr200DAC_CNTL2;

__inline void dump_r200DAC_CNTL2(__in  unsigned int *dwreg, __in  char *buff)
{
  regr200DAC_CNTL2 *reg = (regr200DAC_CNTL2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PALETTE_ACCESS_CNTL:%x", buff, reg->bitfields.PALETTE_ACCESS_CNTL);
  sprintf(buff,"%s PALETTE_AUTOFILL_PRIMARY_W:%x", buff, reg->bitfields.PALETTE_AUTOFILL_PRIMARY_W);
  sprintf(buff,"%s PALETTE_AUTOFILL_SECONDARY_W:%x", buff, reg->bitfields.PALETTE_AUTOFILL_SECONDARY_W);
  sprintf(buff,"%s DAC2_EXPAND_MODE:%x", buff, reg->bitfields.DAC2_EXPAND_MODE);
  sprintf(buff,"%s DAC2_LUT_COUNTER_LIMIT:%x", buff, reg->bitfields.DAC2_LUT_COUNTER_LIMIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VAP_CNTL regSE_VAP_CNTL;

__inline void dump_SE_VAP_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VAP_CNTL *reg = (regSE_VAP_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TCL_ENA:%x", buff, reg->bitfields.TCL_ENA);
  sprintf(buff,"%s HOS_ENA:%x", buff, reg->bitfields.HOS_ENA);
  sprintf(buff,"%s PROG_VTX_SHADER_ENA:%x", buff, reg->bitfields.PROG_VTX_SHADER_ENA);
  sprintf(buff,"%s PER_VTX_MTX_SEL_ENA:%x", buff, reg->bitfields.PER_VTX_MTX_SEL_ENA);
  sprintf(buff,"%s SINGLE_BUF_STATE_ENA:%x", buff, reg->bitfields.SINGLE_BUF_STATE_ENA);
  sprintf(buff,"%s FORCE_W_TO_ONE:%x", buff, reg->bitfields.FORCE_W_TO_ONE);
  sprintf(buff,"%s D3D_TEX_DEFAULT:%x", buff, reg->bitfields.D3D_TEX_DEFAULT);
  sprintf(buff,"%s VF_MAX_VTX_NUM:%x", buff, reg->bitfields.VF_MAX_VTX_NUM);
  sprintf(buff,"%s DX_CLIP_SPACE_DEF:%x", buff, reg->bitfields.DX_CLIP_SPACE_DEF);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_VTX_NUM_ARRAYS regSE_VTX_NUM_ARRAYS;

__inline void dump_SE_VTX_NUM_ARRAYS(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_VTX_NUM_ARRAYS *reg = (regSE_VTX_NUM_ARRAYS *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VTX_NUM_ARRAYS:%x", buff, reg->bitfields.VTX_NUM_ARRAYS);
  sprintf(buff,"%s VC_PFETCH:%x", buff, reg->bitfields.VC_PFETCH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_HOS_CNTL_0 regSE_HOS_CNTL_0;

__inline void dump_SE_HOS_CNTL_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_HOS_CNTL_0 *reg = (regSE_HOS_CNTL_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HOS_NORMALIZE_NORMALS:%x", buff, reg->bitfields.HOS_NORMALIZE_NORMALS);
  sprintf(buff,"%s HOS_HOMOGENIZE_POSITION:%x", buff, reg->bitfields.HOS_HOMOGENIZE_POSITION);
  sprintf(buff,"%s HOS_TESS_LVL:%x", buff, reg->bitfields.HOS_TESS_LVL);
  sprintf(buff,"%s POS_VECTOR_LOC:%x", buff, reg->bitfields.POS_VECTOR_LOC);
  sprintf(buff,"%s NORM_VECTOR_LOC:%x", buff, reg->bitfields.NORM_VECTOR_LOC);
  sprintf(buff,"%s CYL_WRAP_CNTL_0:%x", buff, reg->bitfields.CYL_WRAP_CNTL_0);
  sprintf(buff,"%s CYL_WRAP_CNTL_1:%x", buff, reg->bitfields.CYL_WRAP_CNTL_1);
  sprintf(buff,"%s DISP_MAP_POS_ENA:%x", buff, reg->bitfields.DISP_MAP_POS_ENA);
  sprintf(buff,"%s DISP_MAP_NORM_ENA:%x", buff, reg->bitfields.DISP_MAP_NORM_ENA);
  sprintf(buff,"%s DISP_MAP_POS_FUNC:%x", buff, reg->bitfields.DISP_MAP_POS_FUNC);
  sprintf(buff,"%s DISP_MAP_NORM_FUNC:%x", buff, reg->bitfields.DISP_MAP_NORM_FUNC);
  sprintf(buff,"%s DISP_MAP_FMT:%x", buff, reg->bitfields.DISP_MAP_FMT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_HOS_CNTL_1 regSE_HOS_CNTL_1;

__inline void dump_SE_HOS_CNTL_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_HOS_CNTL_1 *reg = (regSE_HOS_CNTL_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DISP_MAP_POS_MTX_SEL:%x", buff, reg->bitfields.DISP_MAP_POS_MTX_SEL);
  sprintf(buff,"%s DISP_MAP_NORM_MTX_SEL:%x", buff, reg->bitfields.DISP_MAP_NORM_MTX_SEL);
  sprintf(buff,"%s SINGLE_INST_PRI_LVL:%x", buff, reg->bitfields.SINGLE_INST_PRI_LVL);
  sprintf(buff,"%s DUAL_INST_PRI_LVL:%x", buff, reg->bitfields.DUAL_INST_PRI_LVL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_HOS_VEC_INTERP_0 regSE_HOS_VEC_INTERP_0;

__inline void dump_SE_HOS_VEC_INTERP_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_HOS_VEC_INTERP_0 *reg = (regSE_HOS_VEC_INTERP_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HOS_INTERP_ORDER_0:%x", buff, reg->bitfields.HOS_INTERP_ORDER_0);
  sprintf(buff,"%s HOS_INTERP_ORDER_1:%x", buff, reg->bitfields.HOS_INTERP_ORDER_1);
  sprintf(buff,"%s HOS_INTERP_ORDER_2:%x", buff, reg->bitfields.HOS_INTERP_ORDER_2);
  sprintf(buff,"%s HOS_INTERP_ORDER_3:%x", buff, reg->bitfields.HOS_INTERP_ORDER_3);
  sprintf(buff,"%s HOS_INTERP_ORDER_4:%x", buff, reg->bitfields.HOS_INTERP_ORDER_4);
  sprintf(buff,"%s HOS_INTERP_ORDER_5:%x", buff, reg->bitfields.HOS_INTERP_ORDER_5);
  sprintf(buff,"%s HOS_INTERP_ORDER_6:%x", buff, reg->bitfields.HOS_INTERP_ORDER_6);
  sprintf(buff,"%s HOS_INTERP_ORDER_7:%x", buff, reg->bitfields.HOS_INTERP_ORDER_7);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_HOS_VEC_INTERP_1 regSE_HOS_VEC_INTERP_1;

__inline void dump_SE_HOS_VEC_INTERP_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_HOS_VEC_INTERP_1 *reg = (regSE_HOS_VEC_INTERP_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s HOS_INTERP_ORDER_8:%x", buff, reg->bitfields.HOS_INTERP_ORDER_8);
  sprintf(buff,"%s HOS_INTERP_ORDER_9:%x", buff, reg->bitfields.HOS_INTERP_ORDER_9);
  sprintf(buff,"%s HOS_INTERP_ORDER_10:%x", buff, reg->bitfields.HOS_INTERP_ORDER_10);
  sprintf(buff,"%s HOS_INTERP_ORDER_11:%x", buff, reg->bitfields.HOS_INTERP_ORDER_11);
  sprintf(buff,"%s HOS_INTERP_ORDER_12:%x", buff, reg->bitfields.HOS_INTERP_ORDER_12);
  sprintf(buff,"%s HOS_INTERP_ORDER_13:%x", buff, reg->bitfields.HOS_INTERP_ORDER_13);
  sprintf(buff,"%s HOS_INTERP_ORDER_14:%x", buff, reg->bitfields.HOS_INTERP_ORDER_14);
  sprintf(buff,"%s HOS_INTERP_ORDER_15:%x", buff, reg->bitfields.HOS_INTERP_ORDER_15);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SE_TCL_FPU_LATENCY_R2 regSE_TCL_FPU_LATENCY_R2;

__inline void dump_SE_TCL_FPU_LATENCY_R2(__in  unsigned int *dwreg, __in  char *buff)
{
  regSE_TCL_FPU_LATENCY_R2 *reg = (regSE_TCL_FPU_LATENCY_R2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VE_ENG_LATENCY:%x", buff, reg->bitfields.VE_ENG_LATENCY);
  sprintf(buff,"%s VE_MULT_LATENCY:%x", buff, reg->bitfields.VE_MULT_LATENCY);
  sprintf(buff,"%s VE_ACCUM_LATENCY:%x", buff, reg->bitfields.VE_ACCUM_LATENCY);
  sprintf(buff,"%s SC_ENG_LATENCY:%x", buff, reg->bitfields.SC_ENG_LATENCY);
  sprintf(buff,"%s VE_OUT_LATENCY:%x", buff, reg->bitfields.VE_OUT_LATENCY);
  sprintf(buff,"%s SC_MATH_LATENCY:%x", buff, reg->bitfields.SC_MATH_LATENCY);
  sprintf(buff,"%s RSVD_LTNCY_2BIT:%x", buff, reg->bitfields.RSVD_LTNCY_2BIT);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_HIZOFFSET regRE_HIZOFFSET;

__inline void dump_RE_HIZOFFSET(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_HIZOFFSET *reg = (regRE_HIZOFFSET *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_HIZ_WRINDEX regRE_HIZ_WRINDEX;

__inline void dump_RE_HIZ_WRINDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_HIZ_WRINDEX *reg = (regRE_HIZ_WRINDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_HIZ_RDINDEX regRE_HIZ_RDINDEX;

__inline void dump_RE_HIZ_RDINDEX(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_HIZ_RDINDEX *reg = (regRE_HIZ_RDINDEX *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RE_HIZ_DWORD regRE_HIZ_DWORD;

__inline void dump_RE_HIZ_DWORD(__in  unsigned int *dwreg, __in  char *buff)
{
  regRE_HIZ_DWORD *reg = (regRE_HIZ_DWORD *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250PP_TXPITCH_0 regrv250PP_TXPITCH_0;

__inline void dump_rv250PP_TXPITCH_0(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250PP_TXPITCH_0 *reg = (regrv250PP_TXPITCH_0 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXPITCH:%x", buff, reg->bitfields.TXPITCH);
  sprintf(buff,"%s TEX_TAG_CNTL:%x", buff, reg->bitfields.TEX_TAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250PP_TXPITCH_1 regrv250PP_TXPITCH_1;

__inline void dump_rv250PP_TXPITCH_1(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250PP_TXPITCH_1 *reg = (regrv250PP_TXPITCH_1 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXPITCH:%x", buff, reg->bitfields.TXPITCH);
  sprintf(buff,"%s TEX_TAG_CNTL:%x", buff, reg->bitfields.TEX_TAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250PP_TXPITCH_2 regrv250PP_TXPITCH_2;

__inline void dump_rv250PP_TXPITCH_2(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250PP_TXPITCH_2 *reg = (regrv250PP_TXPITCH_2 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXPITCH:%x", buff, reg->bitfields.TXPITCH);
  sprintf(buff,"%s TEX_TAG_CNTL:%x", buff, reg->bitfields.TEX_TAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250PP_TXPITCH_3 regrv250PP_TXPITCH_3;

__inline void dump_rv250PP_TXPITCH_3(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250PP_TXPITCH_3 *reg = (regrv250PP_TXPITCH_3 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXPITCH:%x", buff, reg->bitfields.TXPITCH);
  sprintf(buff,"%s TEX_TAG_CNTL:%x", buff, reg->bitfields.TEX_TAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250PP_TXPITCH_4 regrv250PP_TXPITCH_4;

__inline void dump_rv250PP_TXPITCH_4(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250PP_TXPITCH_4 *reg = (regrv250PP_TXPITCH_4 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXPITCH:%x", buff, reg->bitfields.TXPITCH);
  sprintf(buff,"%s TEX_TAG_CNTL:%x", buff, reg->bitfields.TEX_TAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union rv250PP_TXPITCH_5 regrv250PP_TXPITCH_5;

__inline void dump_rv250PP_TXPITCH_5(__in  unsigned int *dwreg, __in  char *buff)
{
  regrv250PP_TXPITCH_5 *reg = (regrv250PP_TXPITCH_5 *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s TXPITCH:%x", buff, reg->bitfields.TXPITCH);
  sprintf(buff,"%s TEX_TAG_CNTL:%x", buff, reg->bitfields.TEX_TAG_CNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union RB3D_ZSTENCILCNTL regRB3D_ZSTENCILCNTL;

__inline void dump_RB3D_ZSTENCILCNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regRB3D_ZSTENCILCNTL *reg = (regRB3D_ZSTENCILCNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s DEPTHFORMAT:%x", buff, reg->bitfields.DEPTHFORMAT);
  sprintf(buff,"%s ZFUNC:%x", buff, reg->bitfields.ZFUNC);
  sprintf(buff,"%s HIERARCHYENABLE:%x", buff, reg->bitfields.HIERARCHYENABLE);
  sprintf(buff,"%s STENCILFUNC:%x", buff, reg->bitfields.STENCILFUNC);
  sprintf(buff,"%s STENCILFAIL:%x", buff, reg->bitfields.STENCILFAIL);
  sprintf(buff,"%s STENCILZPASS:%x", buff, reg->bitfields.STENCILZPASS);
  sprintf(buff,"%s STENCILZFAIL:%x", buff, reg->bitfields.STENCILZFAIL);
  sprintf(buff,"%s FORCEZCLEAR:%x", buff, reg->bitfields.FORCEZCLEAR);
  sprintf(buff,"%s ZCOMPRESSION:%x", buff, reg->bitfields.ZCOMPRESSION);
  sprintf(buff,"%s FORCEZDIRTY:%x", buff, reg->bitfields.FORCEZDIRTY);
  sprintf(buff,"%s ZWRITEENABLE:%x", buff, reg->bitfields.ZWRITEENABLE);
  sprintf(buff,"%s ZDECOMPRESSION:%x", buff, reg->bitfields.ZDECOMPRESSION);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TVOUT_0_SCRATCH regTVOUT_0_SCRATCH;

__inline void dump_TVOUT_0_SCRATCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regTVOUT_0_SCRATCH *reg = (regTVOUT_0_SCRATCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union TVOUT_1_SCRATCH regTVOUT_1_SCRATCH;

__inline void dump_TVOUT_1_SCRATCH(__in  unsigned int *dwreg, __in  char *buff)
{
  regTVOUT_1_SCRATCH *reg = (regTVOUT_1_SCRATCH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s %x", buff, *dwreg);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CONFIG_XSTRAP regCONFIG_XSTRAP;

__inline void dump_CONFIG_XSTRAP(__in  unsigned int *dwreg, __in  char *buff)
{
  regCONFIG_XSTRAP *reg = (regCONFIG_XSTRAP *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VGA_DISABLE:%x", buff, reg->bitfields.VGA_DISABLE);
  sprintf(buff,"%s BLANK_ROM:%x", buff, reg->bitfields.BLANK_ROM);
  sprintf(buff,"%s ENINTB:%x", buff, reg->bitfields.ENINTB);
  sprintf(buff,"%s EXT_MEM_EN:%x", buff, reg->bitfields.EXT_MEM_EN);
  sprintf(buff,"%s AGPSKEW:%x", buff, reg->bitfields.AGPSKEW);
  sprintf(buff,"%s X1CLK_SKEW:%x", buff, reg->bitfields.X1CLK_SKEW);
  sprintf(buff,"%s VIP_DEVICE:%x", buff, reg->bitfields.VIP_DEVICE);
  sprintf(buff,"%s ID_DISABLE:%x", buff, reg->bitfields.ID_DISABLE);
  sprintf(buff,"%s AP_SIZE:%x", buff, reg->bitfields.AP_SIZE);
  sprintf(buff,"%s ROMIDCFG_R2:%x", buff, reg->bitfields.ROMIDCFG_R2);
  sprintf(buff,"%s BUSCFG:%x", buff, reg->bitfields.BUSCFG);
  sprintf(buff,"%s WSEN:%x", buff, reg->bitfields.WSEN);
  sprintf(buff,"%s WSDEGRADE:%x", buff, reg->bitfields.WSDEGRADE);
  sprintf(buff,"%s HDCP_DISABLE:%x", buff, reg->bitfields.HDCP_DISABLE);
  sprintf(buff,"%s FAST_WT_DISABLE:%x", buff, reg->bitfields.FAST_WT_DISABLE);
  sprintf(buff,"%s MV_DISABLE:%x", buff, reg->bitfields.MV_DISABLE);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPPAD_STRENGTH regVIPPAD_STRENGTH;

__inline void dump_VIPPAD_STRENGTH(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPPAD_STRENGTH *reg = (regVIPPAD_STRENGTH *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s I2C_STRENGTH:%x", buff, reg->bitfields.I2C_STRENGTH);
  sprintf(buff,"%s VIPHDAT_STRENGTH:%x", buff, reg->bitfields.VIPHDAT_STRENGTH);
  sprintf(buff,"%s VIPHCLK_STRENGTH:%x", buff, reg->bitfields.VIPHCLK_STRENGTH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPPAD_MASK regVIPPAD_MASK;

__inline void dump_VIPPAD_MASK(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPPAD_MASK *reg = (regVIPPAD_MASK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPPAD_MASK_TVODATA:%x", buff, reg->bitfields.VIPPAD_MASK_TVODATA);
  sprintf(buff,"%s VIPPAD_MASK_TVOCLKO:%x", buff, reg->bitfields.VIPPAD_MASK_TVOCLKO);
  sprintf(buff,"%s VIPPAD_MASK_ROMCSb:%x", buff, reg->bitfields.VIPPAD_MASK_ROMCSb);
  sprintf(buff,"%s VIPPAD_MASK_VHAD:%x", buff, reg->bitfields.VIPPAD_MASK_VHAD);
  sprintf(buff,"%s VIPPAD_MASK_VPHCTL:%x", buff, reg->bitfields.VIPPAD_MASK_VPHCTL);
  sprintf(buff,"%s VIPPAD_MASK_VIPCLK:%x", buff, reg->bitfields.VIPPAD_MASK_VIPCLK);
  sprintf(buff,"%s VIPPAD_MASK_SI:%x", buff, reg->bitfields.VIPPAD_MASK_SI);
  sprintf(buff,"%s VIPPAD_MASK_SO:%x", buff, reg->bitfields.VIPPAD_MASK_SO);
  sprintf(buff,"%s VIPPAD_MASK_SCK:%x", buff, reg->bitfields.VIPPAD_MASK_SCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPPAD_A regVIPPAD_A;

__inline void dump_VIPPAD_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPPAD_A *reg = (regVIPPAD_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPPAD_A_TVODATA:%x", buff, reg->bitfields.VIPPAD_A_TVODATA);
  sprintf(buff,"%s VIPPAD_A_TVOCLKO:%x", buff, reg->bitfields.VIPPAD_A_TVOCLKO);
  sprintf(buff,"%s VIPPAD_A_ROMCSb:%x", buff, reg->bitfields.VIPPAD_A_ROMCSb);
  sprintf(buff,"%s VIPPAD_A_VHAD:%x", buff, reg->bitfields.VIPPAD_A_VHAD);
  sprintf(buff,"%s VIPPAD_A_VPHCTL:%x", buff, reg->bitfields.VIPPAD_A_VPHCTL);
  sprintf(buff,"%s VIPPAD_A_VIPCLK:%x", buff, reg->bitfields.VIPPAD_A_VIPCLK);
  sprintf(buff,"%s VIPPAD_A_SI:%x", buff, reg->bitfields.VIPPAD_A_SI);
  sprintf(buff,"%s VIPPAD_A_SO:%x", buff, reg->bitfields.VIPPAD_A_SO);
  sprintf(buff,"%s VIPPAD_A_SCK:%x", buff, reg->bitfields.VIPPAD_A_SCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPPAD_EN regVIPPAD_EN;

__inline void dump_VIPPAD_EN(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPPAD_EN *reg = (regVIPPAD_EN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPPAD_EN_TVODATA:%x", buff, reg->bitfields.VIPPAD_EN_TVODATA);
  sprintf(buff,"%s VIPPAD_EN_TVOCLKO:%x", buff, reg->bitfields.VIPPAD_EN_TVOCLKO);
  sprintf(buff,"%s VIPPAD_EN_ROMCSb:%x", buff, reg->bitfields.VIPPAD_EN_ROMCSb);
  sprintf(buff,"%s VIPPAD_EN_VHAD:%x", buff, reg->bitfields.VIPPAD_EN_VHAD);
  sprintf(buff,"%s VIPPAD_EN_VPHCTL:%x", buff, reg->bitfields.VIPPAD_EN_VPHCTL);
  sprintf(buff,"%s VIPPAD_EN_VIPCLK:%x", buff, reg->bitfields.VIPPAD_EN_VIPCLK);
  sprintf(buff,"%s VIPPAD_EN_SI:%x", buff, reg->bitfields.VIPPAD_EN_SI);
  sprintf(buff,"%s VIPPAD_EN_SO:%x", buff, reg->bitfields.VIPPAD_EN_SO);
  sprintf(buff,"%s VIPPAD_EN_SCK:%x", buff, reg->bitfields.VIPPAD_EN_SCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPPAD_Y regVIPPAD_Y;

__inline void dump_VIPPAD_Y(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPPAD_Y *reg = (regVIPPAD_Y *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPPAD_Y_TVODATA:%x", buff, reg->bitfields.VIPPAD_Y_TVODATA);
  sprintf(buff,"%s VIPPAD_Y_TVOCLKO:%x", buff, reg->bitfields.VIPPAD_Y_TVOCLKO);
  sprintf(buff,"%s VIPPAD_Y_ROMCSb:%x", buff, reg->bitfields.VIPPAD_Y_ROMCSb);
  sprintf(buff,"%s VIPPAD_Y_VHAD:%x", buff, reg->bitfields.VIPPAD_Y_VHAD);
  sprintf(buff,"%s VIPPAD_Y_VPHCTL:%x", buff, reg->bitfields.VIPPAD_Y_VPHCTL);
  sprintf(buff,"%s VIPPAD_Y_VIPCLK:%x", buff, reg->bitfields.VIPPAD_Y_VIPCLK);
  sprintf(buff,"%s VIPPAD_Y_SI:%x", buff, reg->bitfields.VIPPAD_Y_SI);
  sprintf(buff,"%s VIPPAD_Y_SO:%x", buff, reg->bitfields.VIPPAD_Y_SO);
  sprintf(buff,"%s VIPPAD_Y_SCK:%x", buff, reg->bitfields.VIPPAD_Y_SCK);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPPAD1_MASK regVIPPAD1_MASK;

__inline void dump_VIPPAD1_MASK(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPPAD1_MASK *reg = (regVIPPAD1_MASK *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPPAD_MASK_VID:%x", buff, reg->bitfields.VIPPAD_MASK_VID);
  sprintf(buff,"%s VIPPAD_MASK_VPCLK0:%x", buff, reg->bitfields.VIPPAD_MASK_VPCLK0);
  sprintf(buff,"%s VIPPAD_MASK_DVALID:%x", buff, reg->bitfields.VIPPAD_MASK_DVALID);
  sprintf(buff,"%s VIPPAD_MASK_PSYNC:%x", buff, reg->bitfields.VIPPAD_MASK_PSYNC);
  sprintf(buff,"%s GPIO_SYNC_OUTPUT_EN:%x", buff, reg->bitfields.GPIO_SYNC_OUTPUT_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPPAD1_A regVIPPAD1_A;

__inline void dump_VIPPAD1_A(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPPAD1_A *reg = (regVIPPAD1_A *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPPAD_A_VID:%x", buff, reg->bitfields.VIPPAD_A_VID);
  sprintf(buff,"%s VIPPAD_A_VPCLK0:%x", buff, reg->bitfields.VIPPAD_A_VPCLK0);
  sprintf(buff,"%s VIPPAD_A_DVALID:%x", buff, reg->bitfields.VIPPAD_A_DVALID);
  sprintf(buff,"%s VIPPAD_A_PSYNC:%x", buff, reg->bitfields.VIPPAD_A_PSYNC);
  sprintf(buff,"%s VIPPAD_A_DVODATA:%x", buff, reg->bitfields.VIPPAD_A_DVODATA);
  sprintf(buff,"%s VIPPAD_A_DVOCNTL:%x", buff, reg->bitfields.VIPPAD_A_DVOCNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPPAD1_EN regVIPPAD1_EN;

__inline void dump_VIPPAD1_EN(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPPAD1_EN *reg = (regVIPPAD1_EN *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPPAD_EN_VID:%x", buff, reg->bitfields.VIPPAD_EN_VID);
  sprintf(buff,"%s VIPPAD_EN_VPCLK0:%x", buff, reg->bitfields.VIPPAD_EN_VPCLK0);
  sprintf(buff,"%s VIPPAD_EN_DVALID:%x", buff, reg->bitfields.VIPPAD_EN_DVALID);
  sprintf(buff,"%s VIPPAD_EN_PSYNC:%x", buff, reg->bitfields.VIPPAD_EN_PSYNC);
  sprintf(buff,"%s VIPPAD_EN_DVODATA:%x", buff, reg->bitfields.VIPPAD_EN_DVODATA);
  sprintf(buff,"%s VIPPAD_EN_DVOCNTL:%x", buff, reg->bitfields.VIPPAD_EN_DVOCNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VIPPAD1_Y regVIPPAD1_Y;

__inline void dump_VIPPAD1_Y(__in  unsigned int *dwreg, __in  char *buff)
{
  regVIPPAD1_Y *reg = (regVIPPAD1_Y *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s VIPPAD_Y_VID:%x", buff, reg->bitfields.VIPPAD_Y_VID);
  sprintf(buff,"%s VIPPAD_Y_VPCLK0:%x", buff, reg->bitfields.VIPPAD_Y_VPCLK0);
  sprintf(buff,"%s VIPPAD_Y_DVALID:%x", buff, reg->bitfields.VIPPAD_Y_DVALID);
  sprintf(buff,"%s VIPPAD_Y_PSYNC:%x", buff, reg->bitfields.VIPPAD_Y_PSYNC);
  sprintf(buff,"%s VIPPAD_Y_DVODATA:%x", buff, reg->bitfields.VIPPAD_Y_DVODATA);
  sprintf(buff,"%s VIPPAD_Y_DVOCNTL:%x", buff, reg->bitfields.VIPPAD_Y_DVOCNTL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MAXX_PWM regMAXX_PWM;

__inline void dump_MAXX_PWM(__in  unsigned int *dwreg, __in  char *buff)
{
  regMAXX_PWM *reg = (regMAXX_PWM *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s PWM_INC:%x", buff, reg->bitfields.PWM_INC);
  sprintf(buff,"%s PWM_CLK_DIV:%x", buff, reg->bitfields.PWM_CLK_DIV);
  sprintf(buff,"%s PWM_OUT_EN:%x", buff, reg->bitfields.PWM_OUT_EN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union VID_BUFFER_CONTROL regVID_BUFFER_CONTROL;

__inline void dump_VID_BUFFER_CONTROL(__in  unsigned int *dwreg, __in  char *buff)
{
  regVID_BUFFER_CONTROL *reg = (regVID_BUFFER_CONTROL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP0_BUFFER_WATER_MARK_R2:%x", buff, reg->bitfields.CAP0_BUFFER_WATER_MARK_R2);
  sprintf(buff,"%s FULL_BUFFER_EN:%x", buff, reg->bitfields.FULL_BUFFER_EN);
  sprintf(buff,"%s CAP0_ANC_VBI_QUAD_BUF:%x", buff, reg->bitfields.CAP0_ANC_VBI_QUAD_BUF);
  sprintf(buff,"%s VID_BUFFER_RESET:%x", buff, reg->bitfields.VID_BUFFER_RESET);
  sprintf(buff,"%s CAP_SWAP:%x", buff, reg->bitfields.CAP_SWAP);
  sprintf(buff,"%s CAP0_BUFFER_EMPTY:%x", buff, reg->bitfields.CAP0_BUFFER_EMPTY);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CAP0_CONFIG regCAP0_CONFIG;

__inline void dump_CAP0_CONFIG(__in  unsigned int *dwreg, __in  char *buff)
{
  regCAP0_CONFIG *reg = (regCAP0_CONFIG *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s CAP_INPUT_MODE:%x", buff, reg->bitfields.CAP_INPUT_MODE);
  sprintf(buff,"%s CAP_START_FIELD:%x", buff, reg->bitfields.CAP_START_FIELD);
  sprintf(buff,"%s CAP_START_BUF_R:%x", buff, reg->bitfields.CAP_START_BUF_R);
  sprintf(buff,"%s CAP_START_BUF_W:%x", buff, reg->bitfields.CAP_START_BUF_W);
  sprintf(buff,"%s CAP_BUF_TYPE:%x", buff, reg->bitfields.CAP_BUF_TYPE);
  sprintf(buff,"%s CAP_ONESHOT_MODE:%x", buff, reg->bitfields.CAP_ONESHOT_MODE);
  sprintf(buff,"%s CAP_BUF_MODE:%x", buff, reg->bitfields.CAP_BUF_MODE);
  sprintf(buff,"%s CAP_MIRROR_EN:%x", buff, reg->bitfields.CAP_MIRROR_EN);
  sprintf(buff,"%s CAP_ONESHOT_MIRROR_EN:%x", buff, reg->bitfields.CAP_ONESHOT_MIRROR_EN);
  sprintf(buff,"%s CAP_VIDEO_SIGNED_UV:%x", buff, reg->bitfields.CAP_VIDEO_SIGNED_UV);
  sprintf(buff,"%s CAP_ANC_DECODE_EN:%x", buff, reg->bitfields.CAP_ANC_DECODE_EN);
  sprintf(buff,"%s CAP_VBI_EN:%x", buff, reg->bitfields.CAP_VBI_EN);
  sprintf(buff,"%s CAP_SOFT_PULL_DOWN_EN:%x", buff, reg->bitfields.CAP_SOFT_PULL_DOWN_EN);
  sprintf(buff,"%s CAP_VIP_EXTEND_FLAG_EN:%x", buff, reg->bitfields.CAP_VIP_EXTEND_FLAG_EN);
  sprintf(buff,"%s CAP_FAKE_FIELD_EN:%x", buff, reg->bitfields.CAP_FAKE_FIELD_EN);
  sprintf(buff,"%s CAP_FIELD_START_LINE_DIFF:%x", buff, reg->bitfields.CAP_FIELD_START_LINE_DIFF);
  sprintf(buff,"%s CAP_HORZ_DOWN:%x", buff, reg->bitfields.CAP_HORZ_DOWN);
  sprintf(buff,"%s CAP_VERT_DOWN:%x", buff, reg->bitfields.CAP_VERT_DOWN);
  sprintf(buff,"%s CAP_STREAM_FORMAT:%x", buff, reg->bitfields.CAP_STREAM_FORMAT);
  sprintf(buff,"%s CAP_HDWNS_DEC:%x", buff, reg->bitfields.CAP_HDWNS_DEC);
  sprintf(buff,"%s CAP_VIDEO_IN_FORMAT:%x", buff, reg->bitfields.CAP_VIDEO_IN_FORMAT);
  sprintf(buff,"%s VBI_HORZ_DOWN:%x", buff, reg->bitfields.VBI_HORZ_DOWN);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union r200SPLL_AUX_CNTL regr200SPLL_AUX_CNTL;

__inline void dump_r200SPLL_AUX_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regr200SPLL_AUX_CNTL *reg = (regr200SPLL_AUX_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SPLL_PDC_C:%x", buff, reg->bitfields.SPLL_PDC_C);
  sprintf(buff,"%s SPLL_CKINVA:%x", buff, reg->bitfields.SPLL_CKINVA);
  sprintf(buff,"%s SPLL_CKINVC:%x", buff, reg->bitfields.SPLL_CKINVC);
  sprintf(buff,"%s SPLL_X3_CLK_SKEW:%x", buff, reg->bitfields.SPLL_X3_CLK_SKEW);
  sprintf(buff,"%s SPLL_MODEC:%x", buff, reg->bitfields.SPLL_MODEC);
  sprintf(buff,"%s TRANSIT_DONE_LENGTH:%x", buff, reg->bitfields.TRANSIT_DONE_LENGTH);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union SCLK_CNTL regSCLK_CNTL;

__inline void dump_SCLK_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regSCLK_CNTL *reg = (regSCLK_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SCLK_SRC_SEL:%x", buff, reg->bitfields.SCLK_SRC_SEL);
  sprintf(buff,"%s CP_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.CP_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s HDP_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.HDP_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s E2_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.E2_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s SE_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.SE_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s IDCT_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.IDCT_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s VIP_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.VIP_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s RE_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.RE_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s PB_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.PB_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s TAM_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.TAM_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s TDM_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.TDM_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s RB_MAX_DYN_STOP_LAT:%x", buff, reg->bitfields.RB_MAX_DYN_STOP_LAT);
  sprintf(buff,"%s FORCE_DISP2:%x", buff, reg->bitfields.FORCE_DISP2);
  sprintf(buff,"%s FORCE_CP:%x", buff, reg->bitfields.FORCE_CP);
  sprintf(buff,"%s FORCE_HDP:%x", buff, reg->bitfields.FORCE_HDP);
  sprintf(buff,"%s FORCE_DISP1:%x", buff, reg->bitfields.FORCE_DISP1);
  sprintf(buff,"%s FORCE_TOP:%x", buff, reg->bitfields.FORCE_TOP);
  sprintf(buff,"%s FORCE_E2:%x", buff, reg->bitfields.FORCE_E2);
  sprintf(buff,"%s FORCE_SE:%x", buff, reg->bitfields.FORCE_SE);
  sprintf(buff,"%s FORCE_IDCT:%x", buff, reg->bitfields.FORCE_IDCT);
  sprintf(buff,"%s FORCE_VIP:%x", buff, reg->bitfields.FORCE_VIP);
  sprintf(buff,"%s FORCE_RE:%x", buff, reg->bitfields.FORCE_RE);
  sprintf(buff,"%s FORCE_PB:%x", buff, reg->bitfields.FORCE_PB);
  sprintf(buff,"%s FORCE_TAM:%x", buff, reg->bitfields.FORCE_TAM);
  sprintf(buff,"%s FORCE_TDM:%x", buff, reg->bitfields.FORCE_TDM);
  sprintf(buff,"%s FORCE_RB:%x", buff, reg->bitfields.FORCE_RB);
  sprintf(buff,"%s FORCE_SUBPIC:%x", buff, reg->bitfields.FORCE_SUBPIC);
  sprintf(buff,"%s FORCE_OV0:%x", buff, reg->bitfields.FORCE_OV0);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union CLK_PWRMGT_CNTL regCLK_PWRMGT_CNTL;

__inline void dump_CLK_PWRMGT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regCLK_PWRMGT_CNTL *reg = (regCLK_PWRMGT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MPLL_PWRMGT_OFF:%x", buff, reg->bitfields.MPLL_PWRMGT_OFF);
  sprintf(buff,"%s SPLL_PWRMGT_OFF:%x", buff, reg->bitfields.SPLL_PWRMGT_OFF);
  sprintf(buff,"%s PPLL_PWRMGT_OFF:%x", buff, reg->bitfields.PPLL_PWRMGT_OFF);
  sprintf(buff,"%s P2PLL_PWRMGT_OFF:%x", buff, reg->bitfields.P2PLL_PWRMGT_OFF);
  sprintf(buff,"%s MCLK_TURNOFF:%x", buff, reg->bitfields.MCLK_TURNOFF);
  sprintf(buff,"%s SCLK_TURNOFF:%x", buff, reg->bitfields.SCLK_TURNOFF);
  sprintf(buff,"%s PCLK_TURNOFF:%x", buff, reg->bitfields.PCLK_TURNOFF);
  sprintf(buff,"%s P2CLK_TURNOFF:%x", buff, reg->bitfields.P2CLK_TURNOFF);
  sprintf(buff,"%s MC_CH_MODE:%x", buff, reg->bitfields.MC_CH_MODE);
  sprintf(buff,"%s TEST_MODE:%x", buff, reg->bitfields.TEST_MODE);
  sprintf(buff,"%s GLOBAL_PMAN_EN:%x", buff, reg->bitfields.GLOBAL_PMAN_EN);
  sprintf(buff,"%s ENGINE_DYNCLK_MODE:%x", buff, reg->bitfields.ENGINE_DYNCLK_MODE);
  sprintf(buff,"%s ACTIVE_HILO_LAT:%x", buff, reg->bitfields.ACTIVE_HILO_LAT);
  sprintf(buff,"%s DISP_DYN_STOP_LAT:%x", buff, reg->bitfields.DISP_DYN_STOP_LAT);
  sprintf(buff,"%s MC_BUSY:%x", buff, reg->bitfields.MC_BUSY);
  sprintf(buff,"%s MC_INT_CNTL:%x", buff, reg->bitfields.MC_INT_CNTL);
  sprintf(buff,"%s MC_SWITCH:%x", buff, reg->bitfields.MC_SWITCH);
  sprintf(buff,"%s DLL_READY:%x", buff, reg->bitfields.DLL_READY);
  sprintf(buff,"%s DISP_PM:%x", buff, reg->bitfields.DISP_PM);
  sprintf(buff,"%s DYN_STOP_MODE:%x", buff, reg->bitfields.DYN_STOP_MODE);
  sprintf(buff,"%s CG_NO1_DEBUG:%x", buff, reg->bitfields.CG_NO1_DEBUG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union r200PLL_PWRMGT_CNTL regr200PLL_PWRMGT_CNTL;

__inline void dump_r200PLL_PWRMGT_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regr200PLL_PWRMGT_CNTL *reg = (regr200PLL_PWRMGT_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MPLL_TURNOFF:%x", buff, reg->bitfields.MPLL_TURNOFF);
  sprintf(buff,"%s SPLL_TURNOFF:%x", buff, reg->bitfields.SPLL_TURNOFF);
  sprintf(buff,"%s PPLL_TURNOFF:%x", buff, reg->bitfields.PPLL_TURNOFF);
  sprintf(buff,"%s P2PLL_TURNOFF:%x", buff, reg->bitfields.P2PLL_TURNOFF);
  sprintf(buff,"%s AGPCLK_DYN_STOP_LAT:%x", buff, reg->bitfields.AGPCLK_DYN_STOP_LAT);
  sprintf(buff,"%s APM_POWER_STATE:%x", buff, reg->bitfields.APM_POWER_STATE);
  sprintf(buff,"%s APM_PWRSTATE_RD:%x", buff, reg->bitfields.APM_PWRSTATE_RD);
  sprintf(buff,"%s PM_MODE_SEL:%x", buff, reg->bitfields.PM_MODE_SEL);
  sprintf(buff,"%s EN_PWRSEQ_DONE_COND:%x", buff, reg->bitfields.EN_PWRSEQ_DONE_COND);
  sprintf(buff,"%s EN_DISP_PARKED_COND:%x", buff, reg->bitfields.EN_DISP_PARKED_COND);
  sprintf(buff,"%s MOBILE_SU:%x", buff, reg->bitfields.MOBILE_SU);
  sprintf(buff,"%s SU_SCLK_USE_BCLK:%x", buff, reg->bitfields.SU_SCLK_USE_BCLK);
  sprintf(buff,"%s SU_MCLK_USE_BCLK:%x", buff, reg->bitfields.SU_MCLK_USE_BCLK);
  sprintf(buff,"%s SU_SUSTAIN_DISABLE:%x", buff, reg->bitfields.SU_SUSTAIN_DISABLE);
  sprintf(buff,"%s TCL_BYPASS_DISABLE:%x", buff, reg->bitfields.TCL_BYPASS_DISABLE);
  sprintf(buff,"%s TCL_CLOCK_ACTIVE_RD:%x", buff, reg->bitfields.TCL_CLOCK_ACTIVE_RD);
  sprintf(buff,"%s CG_NO2_DEBUG:%x", buff, reg->bitfields.CG_NO2_DEBUG);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union M_SPLL_REF_FB_DIV regM_SPLL_REF_FB_DIV;

__inline void dump_M_SPLL_REF_FB_DIV(__in  unsigned int *dwreg, __in  char *buff)
{
  regM_SPLL_REF_FB_DIV *reg = (regM_SPLL_REF_FB_DIV *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s M_SPLL_REF_DIV:%x", buff, reg->bitfields.M_SPLL_REF_DIV);
  sprintf(buff,"%s MPLL_FB_DIV:%x", buff, reg->bitfields.MPLL_FB_DIV);
  sprintf(buff,"%s SPLL_FB_DIV:%x", buff, reg->bitfields.SPLL_FB_DIV);
  sprintf(buff,"%s MPLL_REF_SRC_SEL:%x", buff, reg->bitfields.MPLL_REF_SRC_SEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union r200MPLL_AUX_CNTL regr200MPLL_AUX_CNTL;

__inline void dump_r200MPLL_AUX_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regr200MPLL_AUX_CNTL *reg = (regr200MPLL_AUX_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MPLL_PDC_C:%x", buff, reg->bitfields.MPLL_PDC_C);
  sprintf(buff,"%s MPLL_CKINVA:%x", buff, reg->bitfields.MPLL_CKINVA);
  sprintf(buff,"%s MPLL_CKINVC:%x", buff, reg->bitfields.MPLL_CKINVC);
  sprintf(buff,"%s MPLL_X3_CLK_SKEW:%x", buff, reg->bitfields.MPLL_X3_CLK_SKEW);
  sprintf(buff,"%s MPLL_MODEC:%x", buff, reg->bitfields.MPLL_MODEC);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union MCLK_CNTL regMCLK_CNTL;

__inline void dump_MCLK_CNTL(__in  unsigned int *dwreg, __in  char *buff)
{
  regMCLK_CNTL *reg = (regMCLK_CNTL *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s MCLKA_SRC_SEL:%x", buff, reg->bitfields.MCLKA_SRC_SEL);
  sprintf(buff,"%s YCLKA_SRC_SEL:%x", buff, reg->bitfields.YCLKA_SRC_SEL);
  sprintf(buff,"%s MCLKB_SRC_SEL:%x", buff, reg->bitfields.MCLKB_SRC_SEL);
  sprintf(buff,"%s YCLKB_SRC_SEL:%x", buff, reg->bitfields.YCLKB_SRC_SEL);
  sprintf(buff,"%s FORCE_MCLKA:%x", buff, reg->bitfields.FORCE_MCLKA);
  sprintf(buff,"%s FORCE_MCLKB:%x", buff, reg->bitfields.FORCE_MCLKB);
  sprintf(buff,"%s FORCE_YCLKA:%x", buff, reg->bitfields.FORCE_YCLKA);
  sprintf(buff,"%s FORCE_YCLKB:%x", buff, reg->bitfields.FORCE_YCLKB);
  sprintf(buff,"%s FORCE_MC:%x", buff, reg->bitfields.FORCE_MC);
  sprintf(buff,"%s FORCE_AIC:%x", buff, reg->bitfields.FORCE_AIC);
  sprintf(buff,"%s MRDCKA0_SOUTSEL:%x", buff, reg->bitfields.MRDCKA0_SOUTSEL);
  sprintf(buff,"%s MRDCKA1_SOUTSEL:%x", buff, reg->bitfields.MRDCKA1_SOUTSEL);
  sprintf(buff,"%s MRDCKB0_SOUTSEL:%x", buff, reg->bitfields.MRDCKB0_SOUTSEL);
  sprintf(buff,"%s MRDCKB1_SOUTSEL:%x", buff, reg->bitfields.MRDCKB1_SOUTSEL);
  strcat (buff, " }");
}
///////////////////////////////////////////////////////////////
typedef union r200MCLK_MISC regr200MCLK_MISC;

__inline void dump_r200MCLK_MISC(__in  unsigned int *dwreg, __in  char *buff)
{
  regr200MCLK_MISC *reg = (regr200MCLK_MISC *) dwreg;
  buff[0] = '\0';
  strcat (buff, "{");
  sprintf(buff,"%s SCLK_SOURCED_FROM_MPLL_SEL:%x", buff, reg->bitfields.SCLK_SOURCED_FROM_MPLL_SEL);
  sprintf(buff,"%s MCLK_FROM_SPLL_DIV_SEL:%x", buff, reg->bitfields.MCLK_FROM_SPLL_DIV_SEL);
  sprintf(buff,"%s ENABLE_SCLK_FROM_MPLL:%x", buff, reg->bitfields.ENABLE_SCLK_FROM_MPLL);
  sprintf(buff,"%s MPLL_MODEA_MODEC_HW_SEL_EN:%x", buff, reg->bitfields.MPLL_MODEA_MODEC_HW_SEL_EN);
  sprintf(buff,"%s DLL_READY_LAT:%x", buff, reg->bitfields.DLL_READY_LAT);
  sprintf(buff,"%s CGM_CLK_TO_OUTPIN:%x", buff, reg->bitfields.CGM_CLK_TO_OUTPIN);
  sprintf(buff,"%s CLK_OR_COUNT_SEL:%x", buff, reg->bitfields.CLK_OR_COUNT_SEL);
  sprintf(buff,"%s EN_MCLK_TRISTATE_IN_SUSPEND:%x", buff, reg->bitfields.EN_MCLK_TRISTATE_IN_SUSPEND);
  sprintf(buff,"%s CGM_SPARE_RD:%x", buff, reg->bitfields.CGM_SPARE_RD);
  strcat (buff, " }");
}

#pragma prefast( enable: __WARNING_BANNED_API_USAGE )

#endif // DEBUG

///////////////////////////////////////////////////////////////

#endif // CHAPLIN_BF_DUMP_H

