#line 1 "e:\\SDK\\WDK_6001\\inc\\api\\msxml.idl"










cpp_quote("//+-------------------------------------------------------------------------")
cpp_quote("//")
cpp_quote("//  Microsoft Windows")
cpp_quote("//  Copyright (C) Microsoft Corporation, 1997-1998.")
cpp_quote("//")
cpp_quote("//--------------------------------------------------------------------------")


#line 1 "e:\\sdk\\wdk_6001\\inc\\api\\msxmldid.h"





























































#line 63 "e:\\sdk\\wdk_6001\\inc\\api\\msxmldid.h"

#line 20 "e:\\SDK\\WDK_6001\\inc\\api\\msxml.idl"


import "unknwn.idl";
import "wtypes.idl";
import "objidl.idl";
import "oaidl.idl";
#line 27 "e:\\SDK\\WDK_6001\\inc\\api\\msxml.idl"

typedef struct _xml_error {
    unsigned        _nLine;         
    BSTR            _pchBuf;        
    unsigned        _cchBuf;        
    unsigned        _ich;           
    BSTR            _pszFound;      
    BSTR            _pszExpected;   
    DWORD           _reserved1;     
    DWORD           _reserved2;     
} XML_ERROR;

[
    uuid(d63e0ce2-a0a2-11d0-9c02-00c04fc99c8e),     
    helpstring("Microsoft XML, version 2.0"),
    lcid(0x0000),
    version(2.0)
]

library MSXML
{

importlib("stdole32.tlb");
importlib("stdole2.tlb");

#line 1 "e:\\sdk\\wdk_6001\\inc\\api\\xmldom.idl"













cpp_quote("//+-------------------------------------------------------------------------")
cpp_quote("//")
cpp_quote("//  Microsoft Windows")
cpp_quote("//  Copyright (C) Microsoft Corporation, 1998.")
cpp_quote("//")
cpp_quote("//--------------------------------------------------------------------------")

#line 1 "e:\\sdk\\wdk_6001\\inc\\api\\xmldomdid.h"




































































































































































































































#line 230 "e:\\sdk\\wdk_6001\\inc\\api\\xmldomdid.h"

#line 22 "e:\\sdk\\wdk_6001\\inc\\api\\xmldom.idl"
#line 1 "e:\\SDK\\WDK_6001\\inc\\api\\idispids.h"



















#line 21 "e:\\SDK\\WDK_6001\\inc\\api\\idispids.h"

#line 23 "e:\\sdk\\wdk_6001\\inc\\api\\xmldom.idl"

interface IXMLDOMImplementation;
interface IXMLDOMNode;
interface IXMLDOMDocumentFragment;
interface IXMLDOMDocument;
interface IXMLDOMNodeList;
interface IXMLDOMNamedNodeMap;
interface IXMLDOMCharacterData;
interface IXMLDOMAttribute;
interface IXMLDOMElement;
interface IXMLDOMText;
interface IXMLDOMComment;
interface IXMLDOMProcessingInstruction;
interface IXMLDOMCDATASection;
interface IXMLDOMDocumentType;
interface IXMLDOMNotation;
interface IXMLDOMEntity;
interface IXMLDOMEntityReference;
interface IXMLDOMParseError;
interface IXTLRuntime;



typedef [
helpstring("Constants that define a node's type")
] enum tagDOMNodeType 
{  
    NODE_INVALID, 
    NODE_ELEMENT, 
    NODE_ATTRIBUTE, 
    NODE_TEXT, 
    NODE_CDATA_SECTION, 
    NODE_ENTITY_REFERENCE, 
    NODE_ENTITY, 
    NODE_PROCESSING_INSTRUCTION, 
    NODE_COMMENT, 
    NODE_DOCUMENT, 
    NODE_DOCUMENT_TYPE, 
    NODE_DOCUMENT_FRAGMENT, 
    NODE_NOTATION 
} DOMNodeType; 

[
    local, object,
    uuid(2933BF80-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    helpstring("Core DOM node interface"),
    pointer_default(unique)
]
interface IXMLDOMNode : IDispatch
{
    
    [propget, id(((0x00000001) + 1)), 
     helpstring("name of the node")]
    HRESULT nodeName(
        [out, retval] BSTR * name);

    
    [propget, id(((0x00000001) + 2)), 
     helpstring("value stored in the node")]
    HRESULT nodeValue(
        [out, retval] VARIANT * value);

    [propput, id(((0x00000001) + 2)), 
     helpstring("value stored in the node")]
    HRESULT nodeValue(
        [in] VARIANT value);

    
    [propget, id(((0x00000001) + 3)), 
     helpstring("the node's type")]
    HRESULT nodeType(
        [out, retval] DOMNodeType * type);

    
    [propget, id(((0x00000001) + 5)), 
     helpstring("parent of the node")]
    HRESULT parentNode(
        [out, retval] IXMLDOMNode ** parent);

    
    [propget, id(((0x00000001) + 6)), 
     helpstring("the collection of the node's children")]
    HRESULT childNodes(
        [out, retval] IXMLDOMNodeList ** childList);

    
    [propget,id(((0x00000001) + 7)),
     helpstring("first child of the node")]
    HRESULT firstChild(
        [out, retval] IXMLDOMNode ** firstChild);

    
    [propget,id(((0x00000001) + 8)),
     helpstring("first child of the node")]
    HRESULT lastChild(
        [out, retval] IXMLDOMNode ** lastChild);

    
    [propget,id(((0x00000001) + 9)),
     helpstring("left sibling of the node")]
    HRESULT previousSibling(
        [out, retval] IXMLDOMNode ** previousSibling);

    
    [propget,id(((0x00000001) + 10)),
     helpstring("right sibling of the node")]
    HRESULT nextSibling(
        [out, retval] IXMLDOMNode ** nextSibling);

    
    [propget, id(((0x00000001) + 11)), 
     helpstring("the collection of the node's attributes")]
    HRESULT attributes(
        [out, retval] IXMLDOMNamedNodeMap ** attributeMap);


    
    
    
    [id(((0x00000001) + 12)),
     helpstring("insert a child node")]
    HRESULT insertBefore(
        [in] IXMLDOMNode * newChild,
        [in] VARIANT refChild,
        [out, retval] IXMLDOMNode ** outNewChild);

    
    
    
    [id(((0x00000001) + 13)),
     helpstring("replace a child node")]
    HRESULT replaceChild(
        [in] IXMLDOMNode * newChild,
        [in] IXMLDOMNode * oldChild,
        [out, retval] IXMLDOMNode ** outOldChild);
  
    
    
    [id(((0x00000001) + 14)),
     helpstring("remove a child node")]
    HRESULT removeChild(
        [in] IXMLDOMNode * childNode,
        [out, retval] IXMLDOMNode ** oldChild);

    
    [id(((0x00000001) + 15)),
     helpstring("append a child node")]
    HRESULT appendChild(
        [in] IXMLDOMNode * newChild,
        [out, retval] IXMLDOMNode ** outNewChild);

    
    [id(((0x00000001) + 16)),
     helpstring("")]
    HRESULT hasChildNodes(
        [out, retval] VARIANT_BOOL * hasChild);

    
    [propget, id(((0x00000001) + 17)), 
     helpstring("document that contains the node")]
    HRESULT ownerDocument(
        [out, retval] IXMLDOMDocument ** DOMDocument);

    
    [id(((0x00000001) + 18)),
     helpstring("")]
    HRESULT cloneNode(
        [in] VARIANT_BOOL deep,
        [out, retval] IXMLDOMNode ** cloneRoot);

    [propget, id((((0x00000001) + 19) + 1)),
     helpstring("the type of node in string form")] 
    HRESULT nodeTypeString(
        [retval, out] BSTR * nodeType);

    [propget, id((((0x00000001) + 19) + 4)),
     helpstring("text content of the node and subtree")] 
    HRESULT text(
        [retval, out] BSTR * text);

    [propput, id((((0x00000001) + 19) + 4)),
     helpstring("text content of the node and subtree")] 
    HRESULT text(
        [in] BSTR text);

    [propget, id((((0x00000001) + 19) + 2)),
     helpstring("indicates whether node is a default value")]
    HRESULT specified(
        [out, retval] VARIANT_BOOL * isSpecified);

    
    [propget, id((((0x00000001) + 19) + 3)), 
     helpstring("pointer to the definition of the node in the DTD or schema")] 
    HRESULT definition(
        [retval,out] IXMLDOMNode ** definitionNode);

    [propget, id((((0x00000001) + 19) + 5)), 
     helpstring("get the strongly typed value of the node")] 
    HRESULT nodeTypedValue(
        [retval, out] VARIANT * typedValue);

    [propput, id((((0x00000001) + 19) + 5)), 
     helpstring("get the strongly typed value of the node")] 
    HRESULT nodeTypedValue(
        [in] VARIANT typedValue);

    [propget, id((((0x00000001) + 19) + 6)), 
     helpstring("the data type of the node")] 
    HRESULT dataType(
        [retval, out] VARIANT * dataTypeName); 

    [propput, id((((0x00000001) + 19) + 6)), 
     helpstring("the data type of the node")] 
    HRESULT dataType(
        [in] BSTR dataTypeName);

    [propget, id((((0x00000001) + 19) + 7)), 
     helpstring("return the XML source for the node and each of its descendants")] 
    HRESULT xml(
        [retval, out] BSTR * xmlString);

    [id((((0x00000001) + 19) + 8)), 
     helpstring("apply the stylesheet to the subtree")] 
    HRESULT transformNode(
        [in] IXMLDOMNode * stylesheet,
        [retval, out] BSTR * xmlString);

    [id((((0x00000001) + 19) + 9)), 
     helpstring("execute query on the subtree")]
    HRESULT selectNodes(
        [in] BSTR queryString,
        [retval, out] IXMLDOMNodeList** resultList);

    [id((((0x00000001) + 19) + 10)), 
     helpstring("execute query on the subtree")]
    HRESULT selectSingleNode(
        [in] BSTR queryString,
        [retval, out] IXMLDOMNode** resultNode);

    [propget,id((((0x00000001) + 19) + 11)), 
     helpstring("has sub-tree been completely parsed")]
	HRESULT parsed(
        [retval, out] VARIANT_BOOL * isParsed);

    [propget, id((((0x00000001) + 19) + 12)), 
     helpstring("the URI for the namespace applying to the node")] 
    HRESULT namespaceURI(
        [retval, out] BSTR * namespaceURI);

    [propget, id((((0x00000001) + 19) + 13)), 
     helpstring("the prefix for the namespace applying to the node")] 
    HRESULT prefix(
        [retval, out] BSTR * prefixString);

    [propget, id((((0x00000001) + 19) + 14)), 
     helpstring("the base name of the node (nodename with the prefix stripped off)")] 
    HRESULT baseName(
        [retval, out] BSTR * nameString);

    [id((((0x00000001) + 19) + 15)), 
     helpstring("apply the stylesheet to the subtree, returning the result through a document or a stream")] 
    HRESULT transformNodeToObject(
        [in] IXMLDOMNode * stylesheet,
        [in] VARIANT outputObject);

};

[
    local, object,
    uuid(2933BF81-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMDocument : IXMLDOMNode 
{
    
    [propget, id((((((0x00000001) + 19) + 16) + 1) + 1)),
     helpstring("node corresponding to the DOCTYPE")]
    HRESULT doctype(
        [out, retval] IXMLDOMDocumentType ** documentType); 

    
    [propget, id((((((0x00000001) + 19) + 16) + 1) + 2)),
     helpstring("info on this DOM implementation")]
    HRESULT implementation(
        [out, retval] IXMLDOMImplementation ** impl);

    
    [propget, id((((((0x00000001) + 19) + 16) + 1) + 3)),
     helpstring("the root of the tree")]
    HRESULT documentElement(
        [out, retval] IXMLDOMElement ** DOMElement);

    [propputref, id((((((0x00000001) + 19) + 16) + 1) + 3)),
     helpstring("the root of the tree")]
    HRESULT documentElement(
        [in] IXMLDOMElement * DOMElement);

    
    [id((((((0x00000001) + 19) + 16) + 1) + 4)),
     helpstring("create an Element node")]
    HRESULT createElement(
        [in] BSTR tagName,
        [out, retval] IXMLDOMElement ** element);

    
    [id((((((0x00000001) + 19) + 16) + 1) + 5)),
     helpstring("create a DocumentFragment node")]
    HRESULT createDocumentFragment(
        [out, retval] IXMLDOMDocumentFragment ** docFrag );

    
    [id((((((0x00000001) + 19) + 16) + 1) + 6)),
     helpstring("create a text node")]
    HRESULT createTextNode(
        [in] BSTR data,
        [out, retval] IXMLDOMText ** text);

    
    [id((((((0x00000001) + 19) + 16) + 1) + 7)),
     helpstring("create a comment node")]
    HRESULT createComment(
        [in] BSTR data,
        [out, retval] IXMLDOMComment ** comment);

    
    [id((((((0x00000001) + 19) + 16) + 1) + 8)),
     helpstring("create a CDATA section node")]
    HRESULT createCDATASection(
        [in] BSTR data,
        [out, retval] IXMLDOMCDATASection ** cdata);

    
    
    [id((((((0x00000001) + 19) + 16) + 1) + 9)),
     helpstring("create a processing instruction node")]
    HRESULT createProcessingInstruction(
        [in] BSTR target,
        [in] BSTR data,
        [out, retval] IXMLDOMProcessingInstruction ** pi);

    
    [id((((((0x00000001) + 19) + 16) + 1) + 10)),
     helpstring("create an attribute node")]
    HRESULT createAttribute(
        [in] BSTR name,
        [out, retval] IXMLDOMAttribute ** attribute);

    
    [id((((((0x00000001) + 19) + 16) + 1) + 12)),
     helpstring("create an entity reference node")]
    HRESULT createEntityReference(
        [in] BSTR name,
        [out, retval] IXMLDOMEntityReference ** entityRef);

    
    [id((((((0x00000001) + 19) + 16) + 1) + 13)),
     helpstring("build a list of elements by name")]
    HRESULT getElementsByTagName(
        [in] BSTR tagName,
        [out, retval] IXMLDOMNodeList ** resultList);

    [id(((((((0x00000001) + 19) + 16) + 1) + 15) + 2)), 
     helpstring("create a node of the specified node type and name")] 
    HRESULT createNode(
        [in] VARIANT Type, 
        [in] BSTR name, 
        [in] BSTR namespaceURI,
        [retval, out] IXMLDOMNode ** node);

    [id(((((((0x00000001) + 19) + 16) + 1) + 15) + 4)), 
     helpstring("retrieve node from it's ID")]
    HRESULT nodeFromID( 
        [in] BSTR idString,
        [retval, out] IXMLDOMNode ** node);

    [id(((((((0x00000001) + 19) + 16) + 1) + 15) + 6)), 
     helpstring("load document from the specified XML source")] 
    HRESULT load(
        [in] VARIANT xmlSource,
        [out, retval] VARIANT_BOOL * isSuccessful);

    [propget, id((-525)), 
     helpstring("get the state of the XML document")] 
    HRESULT readyState(
        [retval, out] long * value);

    [propget, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 7)), 
     helpstring("get the last parser error")] 
    HRESULT parseError(
        [retval, out] IXMLDOMParseError ** errorObj);

    [propget, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 8)), 
     helpstring("get the URL for the loaded XML document")] 
    HRESULT url(
        [retval, out] BSTR * urlString);

    [propget, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 9)), 
     helpstring("flag for asynchronous download")] 
    HRESULT async(
        [retval, out] VARIANT_BOOL * isAsync);

    [propput, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 9)), 
     helpstring("flag for asynchronous download")] 
    HRESULT async(
        [in] VARIANT_BOOL isAsync);

    [id(((((((0x00000001) + 19) + 16) + 1) + 15) + 10)), 
     helpstring("abort an asynchronous download")] 
    HRESULT abort();

    [id(((((((0x00000001) + 19) + 16) + 1) + 15) + 11)), 
     helpstring("load the document from a string")] 
    HRESULT loadXML( 
        [in] BSTR bstrXML,
        [out, retval] VARIANT_BOOL * isSuccessful);

    [id(((((((0x00000001) + 19) + 16) + 1) + 15) + 12)), 
     helpstring("save the document to a specified desination")] 
    HRESULT save( 
        [in] VARIANT desination);

    [propget, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 13)), 
     helpstring("indicates whether the parser performs validation")] 
    HRESULT validateOnParse(
        [retval, out] VARIANT_BOOL * isValidating);

    [propput, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 13)), 
     helpstring("indicates whether the parser performs validation")] 
    HRESULT validateOnParse(
        [in] VARIANT_BOOL isValidating);

    [propget, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 14)),
     helpstring("indicates whether the parser resolves references to external DTD/Entities/Schema")]
    HRESULT resolveExternals(
        [retval,out] VARIANT_BOOL * isResolving);

    [propput, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 14)),
     helpstring("indicates whether the parser resolves references to external DTD/Entities/Schema")]
    HRESULT resolveExternals(
        [in] VARIANT_BOOL isResolving);

    [propget, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 15)),
     helpstring("indicates whether the parser preserves whitespace")]
    HRESULT preserveWhiteSpace(
        [retval,out] VARIANT_BOOL * isPreserving);

    [propput, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 15)),
     helpstring("indicates whether the parser preserves whitespace")]
    HRESULT preserveWhiteSpace(
        [in] VARIANT_BOOL isPreserving);

    [propput, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 16)), 
     helpstring("register a readystatechange event handler")]
    HRESULT onreadystatechange(
        [in] VARIANT readystatechangeSink);
 
    [propput, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 17)), 
     helpstring("register an ondataavailable event handler")]
    HRESULT ondataavailable(
        [in] VARIANT ondataavailableSink);

    [propput, id(((((((0x00000001) + 19) + 16) + 1) + 15) + 18)), 
     helpstring("register an ontransformnode event handler")]
    HRESULT ontransformnode(
        [in] VARIANT ontransformnodeSink);
};


[
    local, object,
    uuid(2933BF82-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMNodeList : IDispatch
{
    
    [propget, id(DISPID_VALUE),
     helpstring("collection of nodes")]
    HRESULT item(
        [in] long index,
        [out, retval] IXMLDOMNode ** listItem);

    
    [propget, id(((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 2)),
     helpstring("number of nodes in the collection")]
    HRESULT length(
        [out, retval] long * listLength);

    [id((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 1)),
     helpstring("get next node from iterator")]
    HRESULT nextNode(
        [out, retval] IXMLDOMNode ** nextItem);

    [id((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 2)),
     helpstring("reset the position of iterator")]
    HRESULT reset();

    [propget, restricted, hidden, 
     id(DISPID_NEWENUM)] 
    HRESULT _newEnum(
        [retval, out] IUnknown ** ppUnk);
};


[
    local, object,
    uuid(2933BF83-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMNamedNodeMap : IDispatch
{
    
    [id((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 3)),
     helpstring("lookup item by name")]
    HRESULT getNamedItem(
        [in] BSTR name,
        [out, retval] IXMLDOMNode ** namedItem);

    
    [id((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 4)),
     helpstring("set item by name")]
    HRESULT setNamedItem(
        [in] IXMLDOMNode * newItem,
        [out, retval] IXMLDOMNode ** nameItem);

    
    [id((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 5)),
     helpstring("remove item by name")]
    HRESULT removeNamedItem(
        [in] BSTR name,
        [out, retval] IXMLDOMNode ** namedItem);

    
    [propget, id(DISPID_VALUE),
     helpstring("collection of nodes")]
    HRESULT item(
        [in] long index,
        [out, retval] IXMLDOMNode ** listItem);

    
    [propget, id(((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 2)),
     helpstring("number of nodes in the collection")]
    HRESULT length(
        [out, retval] long * listLength);

    
    [id(((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 1)),
     helpstring("lookup the item by name and namespace")]
    HRESULT getQualifiedItem(
        [in] BSTR baseName,
        [in] BSTR namespaceURI,
        [out, retval] IXMLDOMNode ** qualifiedItem);

    
    [id(((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 2)),
     helpstring("remove the item by name and namespace")]
    HRESULT removeQualifiedItem(
        [in] BSTR baseName,
        [in] BSTR namespaceURI,
        [out, retval] IXMLDOMNode ** qualifiedItem);

    [id(((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 3)),
     helpstring("get next node from iterator")]
    HRESULT nextNode(
        [out, retval] IXMLDOMNode ** nextItem);

    [id(((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 4)),
     helpstring("reset the position of iterator")]
    HRESULT reset();

    [propget, restricted, hidden, 
     id(DISPID_NEWENUM)] 
    HRESULT _newEnum(
        [retval, out] IUnknown ** ppUnk);
};


[
    local, object,
    uuid(3efaa413-272f-11d2-836f-0000f87a7782), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMDocumentFragment : IXMLDOMNode 
{
};


[
    local, object,
    uuid(2933BF84-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMCharacterData : IXMLDOMNode 
{
    
    [propget, id((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 1)),
     helpstring("value of the node")]
    HRESULT data(
        [out, retval] BSTR * data);

    [propput, id((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 1)),
     helpstring("value of the node")]
    HRESULT data(
        [in] BSTR data);
    
    
    [propget, id((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 2)),
     helpstring("number of characters in value")]
    HRESULT length(
        [out, retval] long * dataLength);

    
    
    
    [id((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 3)),
     helpstring("retrieve substring of value")]
    HRESULT substringData(
        [in] long offset,
        [in] long count,
        [out, retval] BSTR * data);

    
    [id((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 4)),
     helpstring("append string to value")]
    HRESULT appendData(
        [in] BSTR data);

    
    
    
    [id((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 5)),
     helpstring("insert string into value")]
    HRESULT insertData(
        [in] long offset,
        [in] BSTR data);

    
    
    
    [id((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 6)),
     helpstring("delete string within the value")]
    HRESULT deleteData(
        [in] long offset,
        [in] long count);

    
    
    
    
    [id((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 7)),
     helpstring("replace string within the value")]
    HRESULT replaceData(
        [in] long offset,
        [in] long count,
        [in] BSTR data);
};


[
    local, object,
    uuid(2933BF85-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMAttribute : IXMLDOMNode 
{
    
    [propget, id((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 1)),
     helpstring("get name of the attribute")]
    HRESULT name(
        [out, retval] BSTR * attributeName);

    
    

    
    [propget, id((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 3)),
     helpstring("string value of the attribute")]
    HRESULT value(
        [out, retval] VARIANT * attributeValue);

    [propput, id((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 3)),
     helpstring("string value of the attribute")]
    HRESULT value(
        [in] VARIANT attributeValue);
};


[
    local, object,
    uuid(2933BF86-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMElement : IXMLDOMNode 
{
    
    [propget, id((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 1)),
     helpstring("get the tagName of the element")]
    HRESULT tagName(
        [out, retval] BSTR * tagName);

    
    [id((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 3)),
     helpstring("look up the string value of an attribute by name")]
    HRESULT getAttribute(
        [in] BSTR name,
        [out, retval] VARIANT * value);

    
    
    [id((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 4)),
     helpstring("set the string value of an attribute by name")]
    HRESULT setAttribute(
        [in] BSTR name,
        [in] VARIANT value);

    
    [id((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 5)),
     helpstring("remove an attribute by name")]
    HRESULT removeAttribute(
        [in] BSTR name);

    
    [id((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 6)),
     helpstring("look up the attribute node by name")]
    HRESULT getAttributeNode(
        [in] BSTR name,
        [out, retval] IXMLDOMAttribute ** attributeNode);

    
    [id((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 7)),
     helpstring("set the specified attribute on the element")]
    HRESULT setAttributeNode(
        [in] IXMLDOMAttribute * DOMAttribute,
        [out, retval] IXMLDOMAttribute ** attributeNode);

    
    [id((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 8)),
     helpstring("remove the specified attribute")]
    HRESULT removeAttributeNode(
        [in] IXMLDOMAttribute * DOMAttribute,
        [out, retval] IXMLDOMAttribute ** attributeNode);

    
    [id((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 9)),
     helpstring("build a list of elements by name")]
    HRESULT getElementsByTagName(
        [in] BSTR tagName,
        [out, retval] IXMLDOMNodeList ** resultList);

    
    [id((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 10)),
     helpstring("collapse all adjacent text nodes in sub-tree")]
    HRESULT normalize();
};


[
    local, object,
    uuid(2933BF87-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMText : IXMLDOMCharacterData 
{
    
    [id((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 1)),
     helpstring("split the text node into two text nodes at the position specified")]
    HRESULT splitText(
        [in] long offset,
        [out, retval] IXMLDOMText ** rightHandTextNode);
};


[
    local, object,
    uuid(2933BF88-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMComment : IXMLDOMCharacterData 
{
};


[
    local, object,
    uuid(2933BF89-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMProcessingInstruction : IXMLDOMNode 
{
    
    [propget, id((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 1)),
     helpstring("the target")]
    HRESULT target(
        [out, retval] BSTR * name);

    
    [propget, id((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 2)),
     helpstring("the data")]
    HRESULT data(
        [out, retval] BSTR * value);

    [propput, id((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 2)),
     helpstring("the data")]
    HRESULT data(
        [in] BSTR value);
};


[
    local, object,
    uuid(2933BF8A-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMCDATASection : IXMLDOMText 
{
};


[
    local, object,
    uuid(2933BF8B-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMDocumentType : IXMLDOMNode 
{
    
    [propget, id((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 1)),
     helpstring("name of the document type (root of the tree)")]
    HRESULT name(
        [out, retval] BSTR * rootName);

    
    [propget, id((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 2)),
     helpstring("a list of entities in the document")]
    HRESULT entities(
        [out, retval] IXMLDOMNamedNodeMap ** entityMap);

    
    [propget, id((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 3)),
     helpstring("a list of notations in the document")]
    HRESULT notations(
        [out, retval] IXMLDOMNamedNodeMap ** notationMap);
};


[
    local, object,
    uuid(2933BF8C-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMNotation : IXMLDOMNode 
{
    
    [propget, id((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 1)),
     helpstring("the public ID")]
    HRESULT publicId(
        [out, retval] VARIANT * publicID);

    
    [propget, id((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 2)),
     helpstring("the system ID")]
    HRESULT systemId(
        [out, retval] VARIANT * systemID);
};


[
    local, object,
    uuid(2933BF8D-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMEntity : IXMLDOMNode 
{
    
    [propget, id((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 1)),
     helpstring("the public ID")]
    HRESULT publicId(
        [out, retval] VARIANT * publicID);

    
    [propget, id((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 2)),
     helpstring("the system ID")]
    HRESULT systemId(
        [out, retval] VARIANT * systemID);

    
    [propget, id((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 3)),
     helpstring("the name of the notation")]
    HRESULT notationName(
        [out, retval] BSTR * name);
};


[
    local, object,
    uuid(2933BF8E-7B36-11d2-B20E-00C04F983E60), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    pointer_default(unique)
]
interface IXMLDOMEntityReference : IXMLDOMNode 
{
};

[
    local, object,
    nonextensible,
    pointer_default(unique),
    odl,
    oleautomation,
    dual,
    uuid(2933BF8F-7B36-11d2-B20E-00C04F983E60) 
]
interface IXMLDOMImplementation : IDispatch
{
    
    
    [id(((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 1))]
    HRESULT hasFeature(
        [in] BSTR feature,
        [in] BSTR version,
        [out, retval] VARIANT_BOOL * hasFeature);
};


[
    local, object,
    uuid(3efaa425-272f-11d2-836f-0000f87a7782), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    helpstring("XTL runtime object"),
    pointer_default(unique)
]
interface IXTLRuntime : IXMLDOMNode 
{
    [id(((((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 8) + 1) + 1)),
     helpstring("")] 
    HRESULT uniqueID(
        [in]IXMLDOMNode *pNode, 
        [out,retval]long *pID);

    [id(((((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 8) + 1) + 2)),
     helpstring("")]
    HRESULT depth(
        [in] IXMLDOMNode *pNode, 
        [out,retval]long * pDepth);

    [id(((((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 8) + 1) + 3)),
     helpstring("")] 
    HRESULT childNumber(
        [in]IXMLDOMNode *pNode, 
        [out,retval] long *pNumber);

    [id(((((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 8) + 1) + 4)),
     helpstring("")] 
    HRESULT ancestorChildNumber(
        [in]BSTR bstrNodeName, 
        [in]IXMLDOMNode *pNode, 
        [out,retval]long *pNumber);

    [id(((((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 8) + 1) + 5)),
     helpstring("")] 
    HRESULT absoluteChildNumber(
        [in]IXMLDOMNode *pNode, 
        [out,retval]long *pNumber);

    [id(((((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 8) + 1) + 6)),
     helpstring("")] 
	HRESULT formatIndex(
        [in] long lIndex, 
        [in] BSTR bstrFormat, 
        [out, retval]BSTR *pbstrFormattedString);

    [id(((((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 8) + 1) + 7)),
     helpstring("")] 
	HRESULT formatNumber(
        [in] double dblNumber, 
        [in] BSTR bstrFormat, 
        [out, retval]BSTR *pbstrFormattedString);

    [id(((((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 8) + 1) + 8)),
     helpstring("")] 
	HRESULT formatDate(
        [in] VARIANT varDate, 
        [in] BSTR bstrFormat, 
        [in,optional] VARIANT varDestLocale,
        [out, retval]BSTR *pbstrFormattedString);

    [id(((((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 8) + 1) + 9)),
     helpstring("")] 
	HRESULT formatTime(
        [in] VARIANT varTime, 
        [in] BSTR bstrFormat, 
        [in,optional] VARIANT varDestLocale,
        [out, retval]BSTR *pbstrFormattedString);
};

[
    local, object,
    uuid(3efaa426-272f-11d2-836f-0000f87a7782), 
    odl, 
    dual,
    oleautomation,
    nonextensible,
    helpstring("structure for reporting parser errors"),
    pointer_default(unique)
]
interface IXMLDOMParseError : IDispatch
{
    [propget, id(DISPID_VALUE), 
     helpstring("the error code")] 
    HRESULT errorCode(
        [retval, out] long * errorCode);

    [propget, id(((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 2)), 
     helpstring("the URL of the XML document containing the error")] 
    HRESULT url(
        [retval, out] BSTR * urlString);

    [propget, id(((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 3)), 
     helpstring("the cause of the error")] 
    HRESULT reason(
        [retval, out] BSTR * reasonString);

    [propget, id(((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 4)), 
     helpstring("the data where the error occurred")] 
    HRESULT srcText(
        [retval, out] BSTR * sourceString);

    [propget, id(((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 5)), 
     helpstring("the line number in the XML document where the error occurred")] 
    HRESULT line(
        [retval, out] long * lineNumber);

    [propget, id(((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 6)),
     helpstring("the character position in the line containing the error")] 
    HRESULT linepos(
        [retval, out] long * linePosition);

    [propget, id(((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 7)), 
     helpstring("the absolute file position in the XML document containing the error")]
    HRESULT filepos(
        [retval, out] long * filePosition);
};


[
    hidden,
    uuid(3efaa427-272f-11d2-836f-0000f87a7782), 
]
dispinterface XMLDOMDocumentEvents 
{
    properties:
    methods:
    [id (((((((((((((((((((((((((((((((((((((((((0x00000001) + 19) + 16) + 1) + 15) + 19) + 1) + 3) + 4) + 1) + 6) + 6) + 1) + 1) + 1) + 1) + 11) + 1) + 8) + 1) + 4) + 1) + 3) + 1) + 3) + 1) + 4) + 1) + 3) + 1) + 4)) + 1) + 0x20) + 1) + 8) + 1) + 10) + 1) + 1))]  
    HRESULT ondataavailable(void);
 
    [id (((-609)))] 
    HRESULT onreadystatechange(void);
};


 
[
    uuid(2933BF90-7B36-11d2-B20E-00C04F983E60), 
    helpstring("W3C-DOM XML Document")
]
coclass DOMDocument
{
    [default] interface IXMLDOMDocument;
    [default, source] dispinterface XMLDOMDocumentEvents;
};

 
[
    uuid(2933BF91-7B36-11d2-B20E-00C04F983E60), 
    helpstring("W3C-DOM XML Document (Apartment)")
]
coclass DOMFreeThreadedDocument
{
    [default] interface IXMLDOMDocument;
    [default, source] dispinterface XMLDOMDocumentEvents;
};


[
	object,
	uuid(ED8C108D-4349-11D2-91A4-00C04F7969E8),
	odl,
	dual,
	oleautomation,
	helpstring("IXMLHttpRequest Interface"),
	pointer_default(unique)
]
interface IXMLHttpRequest : IDispatch
{
	[id(1), helpstring("Open HTTP connection")] HRESULT open([in] BSTR bstrMethod, [in] BSTR bstrUrl, [in,optional] VARIANT varAsync, [in,optional] VARIANT bstrUser, [in,optional] VARIANT bstrPassword);
	[id(2), helpstring("Add HTTP request header")] HRESULT setRequestHeader([in] BSTR bstrHeader, [in] BSTR bstrValue);
	[id(3), helpstring("Get HTTP response header")] HRESULT getResponseHeader([in] BSTR bstrHeader, [out, retval] BSTR * pbstrValue);
	[id(4), helpstring("Get all HTTP response headers")] HRESULT getAllResponseHeaders([out, retval] BSTR * pbstrHeaders);
	[id(5), helpstring("Send HTTP request")] HRESULT send([in, optional] VARIANT varBody);
	[id(6), helpstring("Abort HTTP request")] HRESULT abort();
	[propget, id(7),  helpstring("Get HTTP status code")] HRESULT status([out, retval] long * plStatus);
	[propget, id(8),  helpstring("Get HTTP status text")] HRESULT statusText([out, retval] BSTR * pbstrStatus);
	[propget, id(9),  helpstring("Get response body")] HRESULT responseXML([out, retval] IDispatch ** ppBody);
	[propget, id(10),  helpstring("Get response body")] HRESULT responseText([out, retval] BSTR * pbstrBody);
	[propget, id(11), helpstring("Get response body")] HRESULT responseBody([out, retval] VARIANT * pvarBody);
	[propget, id(12), helpstring("Get response body")] HRESULT responseStream([out, retval] VARIANT * pvarBody);
	[propget, id(13), helpstring("Get ready state")] HRESULT readyState([out, retval] long * plState);
	[propput, id(14), helpstring("Register a complete event handler")] HRESULT onreadystatechange([in] IDispatch * pReadyStateSink);
};


[
    uuid(ED8C108E-4349-11D2-91A4-00C04F7969E8), 
    helpstring("XML HTTP Request class.")
]
coclass XMLHTTPRequest
{
    [default] interface IXMLHttpRequest;
};


#line 53 "e:\\SDK\\WDK_6001\\inc\\api\\msxml.idl"
#line 1 "e:\\sdk\\wdk_6001\\inc\\api\\xmldso.idl"













cpp_quote("//+-------------------------------------------------------------------------")
cpp_quote("//")
cpp_quote("//  Microsoft Windows")
cpp_quote("//  Copyright (C) Microsoft Corporation, 1998.")
cpp_quote("//")
cpp_quote("//--------------------------------------------------------------------------")

#line 1 "e:\\SDK\\WDK_6001\\inc\\api\\idispids.h"





















#line 22 "e:\\sdk\\wdk_6001\\inc\\api\\xmldso.idl"
#line 1 "e:\\sdk\\wdk_6001\\inc\\api\\xmldsodid.h"



























#line 29 "e:\\sdk\\wdk_6001\\inc\\api\\xmldsodid.h"


#line 23 "e:\\sdk\\wdk_6001\\inc\\api\\xmldso.idl"

interface IXMLDOMDocument;

[
	local, object,
	uuid(310afa62-0575-11d2-9ca9-0060b0ec3d39),
    odl,
    dual,
    oleautomation,
    nonextensible,
    hidden, 
	helpstring("XML DSO Control"),
	pointer_default(unique)
]
interface IXMLDSOControl : IDispatch
{
	[propget,id(0x00010000 + 1)] 
        HRESULT XMLDocument([out, retval] IXMLDOMDocument** ppDoc);
	[propput,id(0x00010000 + 1)] 
        HRESULT XMLDocument([in] IXMLDOMDocument* ppDoc);

	[propget,id(0x00010000 + 1 + 1)] 
        HRESULT JavaDSOCompatible([out, retval] BOOL* fJavaDSOCompatible);
	[propput,id(0x00010000 + 1 + 1)] 
        HRESULT JavaDSOCompatible([in]  BOOL fJavaDSOCompatible);

	[propget, id((-525))] 
        HRESULT readyState([out, retval] long *state);
};

[
	uuid(550dda30-0541-11d2-9ca9-0060b0ec3d39),
	helpstring("XML Data Source Object")
]
coclass XMLDSOControl
{
	[default] interface IXMLDSOControl;
};



#line 54 "e:\\SDK\\WDK_6001\\inc\\api\\msxml.idl"


interface IXMLElementCollection;
interface IXMLDocument;
interface IXMLDocument2;
interface IXMLElement;
interface IXMLElement2;
interface IXMLAttribute;
interface IXMLError;
interface IXMLElementNotificationSink;

typedef [
helpstring("Constants that define types for IXMLElement.")
] enum tagXMLEMEM_TYPE
{
    XMLELEMTYPE_ELEMENT,
    XMLELEMTYPE_TEXT,
    XMLELEMTYPE_COMMENT,
    XMLELEMTYPE_DOCUMENT,
    XMLELEMTYPE_DTD,
    XMLELEMTYPE_PI,
    XMLELEMTYPE_OTHER
} XMLELEM_TYPE;

[
    local, object,
    uuid(65725580-9B5D-11d0-9BFE-00C04FC99C8E), 
    odl, 
	dual,
	oleautomation,
	hidden, 
	helpstring("IXMLElementCollection helps to enumerate through a XML document tree.")
]
interface IXMLElementCollection : IDispatch
{
    [propput, restricted, hidden, id(0x00010000 + 1)] HRESULT length([in] long v);
    [propget, id(0x00010000 + 1), helpstring("get number of elements in this IXMLElementCollection.")] HRESULT length([retval, out] long * p);
    [propget, restricted, hidden, id(DISPID_NEWENUM)] HRESULT _newEnum([retval, out] IUnknown ** ppUnk);
    [id(0x00010000 + 3), helpstring("get current item, or (optional) by index and name.")] HRESULT item([optional, in] VARIANT var1,[optional, in] VARIANT var2,[retval, out] IDispatch ** ppDisp);
};


[
    local, object,
    uuid(F52E2B61-18A1-11d1-B105-00805F49916B), 
    odl, 
	dual,
	oleautomation,
	hidden, 
	helpstring("IXMLDocument loads and saves XML document. This is obsolete. You should use IDOMDocument or IXMLDOMDocument.")
]
interface IXMLDocument : IDispatch
{
    [propget, id(0x00010000 + 100 + 1), helpstring("get root IXMLElement of the XML document.")] HRESULT root ([retval, out] IXMLElement * * p);
    [propget, restricted, hidden, id(0x00010000 + 100 + 2)] HRESULT fileSize([retval, out] BSTR * p);
    [propget, restricted, hidden, id(0x00010000 + 100 + 3)] HRESULT fileModifiedDate([retval, out] BSTR * p);
    [propget, restricted, hidden, id(0x00010000 + 100 + 4)] HRESULT fileUpdatedDate([retval, out] BSTR * p);
    [propget, id(0x00010000 + 100 + 5), helpstring("set URL to load an XML document from the URL.")] HRESULT URL([retval, out] BSTR * p);
    [propput, id(0x00010000 + 100 + 5), helpstring("get url.")] HRESULT URL([in] BSTR p);
    [propget, restricted, hidden, id(0x00010000 + 100 + 6)] HRESULT mimeType([retval, out] BSTR * p);
    [propget, id(0x00010000 + 100 + 7), helpstring("get ready state.")] HRESULT readyState([retval, out]long *pl);
    [propget, id(0x00010000 + 100 + 9), helpstring("get encoding.")]  HRESULT charset([retval, out]BSTR *p);
    [propput, id(0x00010000 + 100 + 9), helpstring("set encoding.")]  HRESULT charset([in]BSTR p);
    [propget, id(0x00010000 + 100 + 10), helpstring("get XML version number.")]  HRESULT version([retval, out]BSTR *p);
    [propget, id(0x00010000 + 100 + 11), helpstring("get document type.")]  HRESULT doctype([retval, out]BSTR *p);
    [propget, restricted, hidden, id(0x00010000 + 100 + 12)]   HRESULT dtdURL([retval, out]BSTR *p);
    [id(0x00010000 + 100 + 8), helpstring("create different types of IXMLElements.")] HRESULT createElement([in] VARIANT vType, [optional, in] VARIANT var1, [retval, out] IXMLElement * * ppElem);
};


[
    local, object,
    uuid(2B8DE2FE-8D2D-11d1-B2FC-00C04FD915A9), 
    hidden  
]
interface IXMLDocument2 : IDispatch
{
    [propget, id(0x00010000 + 100 + 1), helpstring("get root IXMLElement of the XML document.")] HRESULT root ([retval, out] IXMLElement2 * * p);
    [propget, restricted, hidden, id(0x00010000 + 100 + 2)] HRESULT fileSize([retval, out] BSTR * p);
    [propget, restricted, hidden, id(0x00010000 + 100 + 3)] HRESULT fileModifiedDate([retval, out] BSTR * p);
    [propget, restricted, hidden, id(0x00010000 + 100 + 4)] HRESULT fileUpdatedDate([retval, out] BSTR * p);
    [propget, id(0x00010000 + 100 + 5), helpstring("set URL to load an XML document from the URL.")] HRESULT URL([retval, out] BSTR * p);
    [propput, id(0x00010000 + 100 + 5), helpstring("get url.")] HRESULT URL([in] BSTR p);
    [propget, restricted, hidden, id(0x00010000 + 100 + 6)] HRESULT mimeType([retval, out] BSTR * p);
    [propget, id(0x00010000 + 100 + 7), helpstring("get ready state.")] HRESULT readyState([retval, out]long *pl);
    [propget, id(0x00010000 + 100 + 9), helpstring("get encoding.")]  HRESULT charset([retval, out]BSTR *p);
    [propput, id(0x00010000 + 100 + 9), helpstring("set encoding.")]  HRESULT charset([in]BSTR p);
    [propget, id(0x00010000 + 100 + 10), helpstring("get XML version number.")]  HRESULT version([retval, out]BSTR *p);
    [propget, id(0x00010000 + 100 + 11), helpstring("get document type.")]  HRESULT doctype([retval, out]BSTR *p);
    [propget, restricted, hidden, id(0x00010000 + 100 + 12)]   HRESULT dtdURL([retval, out]BSTR *p);
    [id(0x00010000 + 100 + 8), helpstring("create different types of IXMLElements.")] HRESULT createElement([in] VARIANT vType, [optional, in] VARIANT var1, [retval, out] IXMLElement2 * * ppElem);
    [propget, id(0x00010000 + 100 + 13), helpstring("get asynchronous loading flag.")] HRESULT async([retval, out] VARIANT_BOOL * pf);
    [propput, id(0x00010000 + 100 + 13), helpstring("set flag to turn on/off asynchronous loading.")] HRESULT async([in] VARIANT_BOOL f);
};

[
    local, object,
    uuid(3F7F31AC-E15F-11d0-9C25-00C04FC99C8E), 
    odl, 
	dual,
	oleautomation,
	hidden, 
	helpstring("IXMLElement represents an element in the XML document tree.")
]
interface IXMLElement : IDispatch
{
    [propget, id(0x00010000 + 100 + 100 + 1), helpstring("get tag name.")] HRESULT tagName([retval, out] BSTR * p);
    [propput, id(0x00010000 + 100 + 100 + 1), helpstring("set tag name.")] HRESULT tagName([in] BSTR p);
    [propget, id(0x00010000 + 100 + 100 + 2), helpstring("get parent IXMLElement.")] HRESULT parent([retval, out]IXMLElement **ppParent);
    [id(0x00010000 + 100 + 100 + 3), helpstring("set attribute.")] HRESULT setAttribute([in] BSTR strPropertyName,[in] VARIANT PropertyValue);
    [id(0x00010000 + 100 + 100 + 4), helpstring("get attribute.")] HRESULT getAttribute([in] BSTR strPropertyName,[retval, out] VARIANT* PropertyValue);
    [id(0x00010000 + 100 + 100 + 5), helpstring("remove attribute.")] HRESULT removeAttribute([in] BSTR strPropertyName);
    [propget, id(0x00010000 + 100 + 100 + 6), helpstring("get a IXMLElementCollection of children.")] HRESULT children([retval, out] IXMLElementCollection * * pp);
    [propget, id(0x00010000 + 100 + 100 + 7), helpstring("get type of this IXMLElement.")] HRESULT type([retval, out] long *plType);
    [propget, id(0x00010000 + 100 + 100 + 8), helpstring("get text.")] HRESULT text([retval, out] BSTR *p);
    [propput, id(0x00010000 + 100 + 100 + 8), helpstring("set text.")] HRESULT text([in] BSTR p);
    [id(0x00010000 + 100 + 100 + 9), helpstring("add a child.")] HRESULT addChild([in] IXMLElement *pChildElem, long lIndex, long lReserved); 
    [id(0x00010000 + 100 + 100 + 10), helpstring("remove a child.")] HRESULT removeChild([in]IXMLElement *pChildElem);
}


[
    local, object,
    uuid(2B8DE2FF-8D2D-11d1-B2FC-00C04FD915A9), 
    odl, 
	dual,
	oleautomation,
	hidden, 
	helpstring("IXMLElement2 extends IXMLElement.")
]
interface IXMLElement2 : IDispatch
{
    [propget, id(0x00010000 + 100 + 100 + 1), helpstring("get tag name.")] HRESULT tagName([retval, out] BSTR * p);
    [propput, id(0x00010000 + 100 + 100 + 1), helpstring("set tag name.")] HRESULT tagName([in] BSTR p);
    [propget, id(0x00010000 + 100 + 100 + 2), helpstring("get parent IXMLElement.")] HRESULT parent([retval, out]IXMLElement2 **ppParent);
    [id(0x00010000 + 100 + 100 + 3), helpstring("set attribute.")] HRESULT setAttribute([in] BSTR strPropertyName,[in] VARIANT PropertyValue);
    [id(0x00010000 + 100 + 100 + 4), helpstring("get attribute.")] HRESULT getAttribute([in] BSTR strPropertyName,[retval, out] VARIANT* PropertyValue);
    [id(0x00010000 + 100 + 100 + 5), helpstring("remove attribute.")] HRESULT removeAttribute([in] BSTR strPropertyName);
    [propget, id(0x00010000 + 100 + 100 + 6), helpstring("get a IXMLElementCollection of all children.")] HRESULT children([retval, out] IXMLElementCollection * * pp);
    [propget, id(0x00010000 + 100 + 100 + 7), helpstring("get type of this IXMLElement.")] HRESULT type([retval, out] long *plType);
    [propget, id(0x00010000 + 100 + 100 + 8), helpstring("get text.")] HRESULT text([retval, out] BSTR *p);
    [propput, id(0x00010000 + 100 + 100 + 8), helpstring("set text.")] HRESULT text([in] BSTR p);
    [id(0x00010000 + 100 + 100 + 9), helpstring("add a child.")] HRESULT addChild([in] IXMLElement2 *pChildElem, long lIndex, long lReserved); 
    [id(0x00010000 + 100 + 100 + 10), helpstring("remove a child.")] HRESULT removeChild([in]IXMLElement2 *pChildElem);
    [propget, id(0x00010000 + 100 + 100 + 11), helpstring("get a IXMLElementCollection of all attributes.")] HRESULT attributes([retval, out] IXMLElementCollection ** pp); 
}

[
    local, object,
    uuid(D4D4A0FC-3B73-11d1-B2B4-00C04FB92596), 
    odl, 
	dual,
	oleautomation,
	hidden, 
	helpstring("IXMLAttribute allows to get attributes of an IXMLElement.")
]
interface IXMLAttribute : IDispatch
{
    [propget, id(0x00010000 + 100 + 100 + 100 + 100 + 1), helpstring("get attribute name.")] HRESULT name([retval, out] BSTR* n);
    [propget, id(0x00010000 + 100 + 100 + 100 + 100 + 2), helpstring("get attribute value.")] HRESULT value([retval, out] BSTR* v);
};

[
    local, object,
    uuid(948C5AD3-C58D-11d0-9C0B-00C04FC99C8E), 
    odl, 
    hidden, 
	helpstring("Gets error info.")
]
interface IXMLError : IUnknown
{
    HRESULT GetErrorInfo(XML_ERROR *pErrorReturn);
}

 
[
    uuid(CFC399AF-D876-11d0-9C10-00C04FC99C8E), 
    helpstring("XMLDocument extends IXML Document.  It is obsolete.  You should use DOMDocument.  This object should not be confused with the XMLDocument property on the XML data island.")
]
coclass XMLDocument
{
    [default] interface IXMLDocument2;
}

}

