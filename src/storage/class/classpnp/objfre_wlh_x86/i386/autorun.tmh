//d62430bd29504db63933219a96a83b1b Generated File. Do not edit.
// File created by WPP compiler version 0.01-Wed Oct  4 11:12:25 2006
// on 05/04/2020 at 15:40:51 UTC from a template e:\SDK\WDK_6001\bin\wppconfig\rev1\km-default.tpl

//
// Define anything which is needs but missing from 
// older versions of the DDK.
//
#include <evntrace.h>
#include <stddef.h>
#include <stdarg.h>
#include <wmistr.h>

#if !defined(TRACE_LEVEL_NONE)
  #define TRACE_LEVEL_NONE        0  
  #define TRACE_LEVEL_CRITICAL    1  
  #define TRACE_LEVEL_FATAL       1  
  #define TRACE_LEVEL_ERROR       2  
  #define TRACE_LEVEL_WARNING     3  
  #define TRACE_LEVEL_INFORMATION 4  
  #define TRACE_LEVEL_VERBOSE     5  
  #define TRACE_LEVEL_RESERVED6   6
  #define TRACE_LEVEL_RESERVED7   7
  #define TRACE_LEVEL_RESERVED8   8
  #define TRACE_LEVEL_RESERVED9   9
#endif
    
#if !defined(TRACE_INFORMATION_CLASS_DEFINE)
typedef enum _TRACE_INFORMATION_CLASS {
    TraceIdClass,
    TraceHandleClass,
    TraceEnableFlagsClass,
    TraceEnableLevelClass,
    GlobalLoggerHandleClass,
    EventLoggerHandleClass,
    AllLoggerHandlesClass,
    TraceHandleByNameClass
} TRACE_INFORMATION_CLASS;
  
#define TRACE_MESSAGE_SEQUENCE               1
#define TRACE_MESSAGE_GUID                   2         
#define TRACE_MESSAGE_COMPONENTID            4           
#define TRACE_MESSAGE_TIMESTAMP              8         
#define TRACE_MESSAGE_PERFORMANCE_TIMESTAMP 16  
#define TRACE_MESSAGE_SYSTEMINFO            32          

#endif // !defined(TRACE_INFORMATION_CLASS_DEFINE)


//
// Advanced tracing APIs (XP and later) will be indirectly called.
//
typedef
LONG
(*PFN_WPPQUERYTRACEINFORMATION) (
    IN  TRACE_INFORMATION_CLASS TraceInformationClass,
    OUT PVOID  TraceInformation,
    IN  ULONG  TraceInformationLength,
    OUT PULONG RequiredLength OPTIONAL,
    IN  PVOID  Buffer OPTIONAL
    );

typedef
LONG
(*PFN_WPPTRACEMESSAGE)(
    IN ULONG64  LoggerHandle,
    IN ULONG   MessageFlags,
    IN LPGUID  MessageGuid,
    IN USHORT  MessageNumber,
    IN ...
    );

// template e:\SDK\WDK_6001\bin\wppconfig\rev1\km-header.tpl
#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE autorun_c

#ifndef WPP_ALREADY_INCLUDED

#define WPP_KERNEL_MODE 
#define WPP_THIS_FILE autorun_c

#if defined(__cplusplus)
extern "C" {
#endif

typedef enum _WPP_TRACE_API_SUITE {
    WppTraceDisabledSuite,
    WppTraceWin2K,
    WppTraceWinXP,
    WppTraceTraceLH,
    WppTraceMaxSuite
} WPP_TRACE_API_SUITE;


__declspec(selectany) PFN_WPPQUERYTRACEINFORMATION  pfnWppQueryTraceInformation = NULL;
__declspec(selectany) PFN_WPPTRACEMESSAGE           pfnWppTraceMessage          = NULL;
__declspec(selectany) WPP_TRACE_API_SUITE           WPPTraceSuite = WppTraceDisabledSuite;


#if !defined(_NTRTL_)
#if !defined(_NTHAL_) 
      // fake RTL_TIME_ZONE_INFORMATION //
    typedef int RTL_TIME_ZONE_INFORMATION;
#endif
#   define _WMIKM_  
#endif
#ifndef WPP_TRACE
#define WPP_TRACE pfnWppTraceMessage
#endif


VOID
WppLoadTracingSupport(
    VOID
    );

LONG
WppTraceCallback(
    __in UCHAR MinorFunction,
    __in_opt PVOID DataPath,
    __in ULONG BufferLength,
    __inout_bcount(BufferLength) PVOID Buffer,
    __in PVOID Context,
    __out PULONG Size
    );
#if !defined(WPP_TRACE_CONTROL_NULL_GUID)
DEFINE_GUID(WPP_TRACE_CONTROL_NULL_GUID, 0x00000000L, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
#endif
#define WPP_TRACE_CONTROL(Function,Buffer,BufferSize,ReturnSize) WppTraceCallback(Function,NULL,BufferSize,Buffer,&WPP_CB[0],&ReturnSize);
    

__inline ULONG64 WppQueryLogger(__in_opt PCWSTR LoggerName)
{

    if (WppTraceWinXP == WPPTraceSuite) {

        ULONG ReturnLength ;
        LONG Status ;
        ULONG64 TraceHandle ;
        UNICODE_STRING  Buffer  ;
           
        RtlInitUnicodeString(&Buffer, LoggerName ? LoggerName : L"stdout");

        Status = pfnWppQueryTraceInformation(
                                            TraceHandleByNameClass,
                                            (PVOID)&TraceHandle,
                                            sizeof(TraceHandle),
                                            &ReturnLength,
                                            (PVOID)&Buffer
                                            );
        if (Status != STATUS_SUCCESS) {
           return (ULONG64)0 ;
        }
        
        return TraceHandle ;
    } else {
        return (ULONG64) 0 ;
    }
}

typedef LONG (*WMIENTRY_NEW)(
    __in UCHAR MinorFunction,
    __in_opt PVOID DataPath,
    __in ULONG BufferLength,
    __inout_bcount(BufferLength) PVOID Buffer,
    __in PVOID Context,
    __out PULONG Size
    );

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    WMIENTRY_NEW                        Callback;
    LPCGUID                             ControlGuid;
    struct _WPP_TRACE_CONTROL_BLOCK    *Next;
    __int64                             Logger;
    PUNICODE_STRING                     RegistryPath;
    UCHAR                               FlagsLen; 
    UCHAR                               Level; 
    USHORT                              Reserved;
    ULONG                               Flags[1];
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;

VOID WppCleanupKm(__in_opt PDEVICE_OBJECT pDeviceObject);
#define WPP_CLEANUP(DrvObj) WppCleanupKm((PDEVICE_OBJECT) DrvObj)

#define WPP_IsValidSid RtlValidSid
#define WPP_GetLengthSid RtlLengthSid

//
// Callback routine to be defined by the driver, which will be called from WPP callback
// WPP will pass current valued of : GUID, Logger, Enable, Flags, and Level
// 
// To activate driver must define WPP_PRIVATE_ENABLE_CALLBACK in their code, sample below 
// #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback;
//
typedef
VOID
(*PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    __in LPCGUID Guid,   
    __in __int64 Logger, 
    __in BOOLEAN Enable, 
    __in ULONG Flags,    
    __in UCHAR Level);   

#if defined(__cplusplus)
};
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED


 
#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

// template e:\SDK\WDK_6001\bin\wppconfig\rev1\control.tpl
//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )        

#if defined(__cplusplus)
extern "C" {
#endif

#if !defined(WPP_NO_CONTROL_GUIDS)

#if defined(WPP_DEFAULT_CONTROL_GUID)
#  if defined(WPP_CONTROL_GUIDS)
#     pragma message(__FILE__ " : error : WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS")
#     stop
#  else
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif      
#endif

#if !defined(WPP_CONTROL_GUIDS)
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
stop.
#endif
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#if !defined(WPP_OLDCC)
#define WPP_FORCEINLINE __forceinline
#else
#define WPP_FORCEINLINE __inline
#endif
#endif


// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)), 
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#  define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;      
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;

 
extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

#ifndef WPP_USE_TRACE_LEVELS
// For historical reasons the use of LEVEL could imply flags, this was a bad choice but very difficult
// to undo.
#if !defined(WPP_LEVEL_LOGGER)
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger), 
#endif

#if !defined(WPP_LEVEL_ENABLED)
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL)) 
#endif
#else  //  #ifndef WPP_USE_TRACE_LEVELS
#if !defined(WPP_LEVEL_LOGGER)
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif

#if !defined(WPP_LEVEL_ENABLED)
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif
#endif  // #ifndef WPP_USE_TRACE_LEVELS

#if !defined(WPP_FLAG_LOGGER)
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger), 
#endif


#if !defined(WPP_FLAG_ENABLED)
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL)) 
#endif

#if !defined(WPP_LOGGER_ARG)
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#if !defined(WPP_GET_LOGGER)
#  define WPP_GET_LOGGER Logger
#endif

#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#if defined(__cplusplus)
};
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED



#if defined(__cplusplus)
extern "C" {
#endif

#ifndef WPP_ALREADY_INCLUDED

// template e:\SDK\WDK_6001\bin\wppconfig\rev1\tracemacro.tpl
//   expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING 1
#endif
#endif

#define WPP_EVAL(_value_) _value_
#define WPP_(Id) WPP_EVAL(WPP_) ## WPP_EVAL(Id) ## WPP_EVAL(_) ## WPP_EVAL(WPP_THIS_FILE) ## WPP_EVAL(__LINE__)

#if !defined(WPP_INLINE)
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#else   // #ifndef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids

#endif  // #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_NO_ANNOTATIONS)
#if !defined(WPP_ANSI_ANNOTATION)
# define WPP_ANNOTATE_autorun_c1032    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1032 32 \"%0ClasspMediaChangeDetectionCompletion - failed - srb status=%10!s!, sense=%11!s!/%12!s!/%13!s!.\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"DBGGETSRBSTATUSSTR(Srb), ItemString -- 10" , L"DBGGETSENSECODESTR(Srb), ItemString -- 11" , L"DBGGETADSENSECODESTR(Srb), ItemString -- 12" , L"DBGGETADSENSEQUALIFIERSTR(Srb), ItemString -- 13" , L"}")
# define WPP_ANNOTATE_autorun_c1049    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1049 33 \"%0ClasspMediaChangeDetectionCompletion - succeeded and GESN NOT supported, setting MediaPresent.\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1059    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1059 34 \"%0ClasspMediaChangeDetectionCompletion - succeeded (GESN supported).\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1066    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1066 35 \"%0ClasspMediaChangeDetectionCompletion - Overrun\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1071    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1071 36 \"%0ClasspMediaChangeDetectionCompletion: GESN failed with status %10!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"status, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c1127    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1127 37 \"%0ClasspMediaChangeDetectionCompletion: Disabling GESN for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c1178    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1178 38 \"%0ClasspMediaChangeDetectionCompletion - not retrying immediately\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1188    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1188 39 \"%0< ClasspMediaChangeDetectionCompletion\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1314    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1314 40 \"%0ClassSendTestUnitIrp: FdoExtension->TimeOutValue is set to zero?! -- resetting to 10\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1322    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1322 41 \"%0ClassSendTestUnitIrp: Someone set srb->TimeOutValue to zero?! -- resetting to %10!x!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->TimeOutValue * 2, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c1409    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1409 42 \"%0> ClasspSendMediaStateIrp\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1439    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1439 43 \"%0ClasspSendMediaStateIrp: irp in use for %10!x! seconds when synchronizing for MCD\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", L"{", L"timeInUse, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c1455    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1455 44 \"%0CdRom%10!d!: Media Change Notification has lost it's irp and doesn't know where to find it.  Leave it alone and it'll come home dragging it's stack behind it.\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceNumber, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c1460    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1460 45 \"%0< ClasspSendMediaStateIrp - irpInUse\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1469    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1469 46 \"%0ClassCheckMediaState: device %10!p! has  detection disabled \" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c1479    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1479 47 \"%0ClassCheckMediaState: device %10!p! is powered down and flags are set to let it sleep\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c1494    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1494 48 \"%0ClassCheckMediaState: device %10!p! needs to powerup to handle this io (may take a few extra seconds).\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c1506    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1506 49 \"%0ClassCheckMediaState: timer expired\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1510    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1510 50 \"%0ClassCheckMediaState: detection disabled\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1528    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1528 51 \"%0ClasspSendMediaStateIrp: Device %10!p! getting TUR  irp %11!p!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"irp, ItemPtr -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c1546    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1546 52 \"%0  ClasspSendMediaStateIrp - calling IoCallDriver.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1561    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1561 53 \"%0< ClasspSendMediaStateIrp\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1595    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1595 54 \"%0ClassCheckMediaState: detection not enabled\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c172    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c172 10 \"%0ClassSendEjectionNotification: media EJECT_REQUEST\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1768    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1768 55 \"%0ClasspInitializePolling: Testing for GESN\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c1773    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1773 56 \"%0ClasspInitializePolling: GESN available for %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c1783    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1783 57 \"%0ClasspInitializePolling: GESN *NOT* available for %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c1985    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c1985 58 \"%0Classpnp => GESN test failed %10!x! for fdo %11!p!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"status, ItemLong -- 10" , L"FdoExtension->DeviceObject, ItemPtr -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c2000    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2000 59 \"%0Classpnp => GESN test failed %10!x! for fdo %11!p!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"status, ItemLong -- 10" , L"FdoExtension->DeviceObject, ItemPtr -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c201    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c201 11 \"%0Error sending event: size too large! (%10!x!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"requiredSize, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2015    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2015 60 \"%0Classpnp => Fdo %10!p! supports event mask %11!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"header->SupportedEventClasses, ItemLong -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c2021    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2021 61 \"%0Classpnp => GESN supports MCN\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c2026    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2026 62 \"%0Classpnp => GESN supports DeviceBusy\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c2035    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2035 63 \"%0Classpnp => GESN supports OpChange, but must ignore these events for compatibility\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c2040    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2040 64 \"%0Classpnp => GESN supports OpChange\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c2080    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2080 65 \"%0Classpnp => GESN supported, but not mask we care about (%10!x!) for FDO %11!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"header->SupportedEventClasses, ItemLong -- 10" , L"FdoExtension->DeviceObject, ItemPtr -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c2087    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2087 66 \"%0Classpnp => GESN hack not required for FDO %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2093    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2093 67 \"%0Classpnp => GESN hack enabled for FDO %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2141    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2141 68 \"%0Classpnp => Enabling GESN support for fdo %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2155    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2155 69 \"%0Classpnp => GESN available but not enabled for fdo %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2163    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2163 70 \"%0Classpnp => GESN support detection failed  for fdo %10!p! with status %11!08x!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"status, ItemLong -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c2295    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2295 71 \"%0ClassInitializeMCN: Disabled due to hardwarelimitations for this device\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c2310    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2310 72 \"%0ClassInitializeMCN: Class    MCN is %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"(disabled ? 'disabled' : 'enabled'), ItemString -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2318    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2318 73 \"%0ClassInitializeMCN: Instance using default\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c2322    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2322 74 \"%0ClassInitializeMCN: Instance override: %10!s! MCN\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"(instanceOverride ? 'Enabling' : 'Disabling'), ItemString -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2328    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2328 75 \"%0ClassInitializeMCN: Instance MCN is %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"(disabled ? 'disabled' : 'enabled'), ItemString -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2401    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2401 76 \"%0ClassMediaChangeDeviceInstanceDisabled: Could not open device registry key [%10!x!]\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"status, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2423    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2423 77 \"%0ClassMediaChangeDeviceInstanceDisabled: subkey could not be created. %10!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"status, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2472    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2472 78 \"%0ClassMediaChangeDeviceInstanceDisabled: %10!s! selected\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"'Both Enable and Disable set -- DISABLE', ItemString -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2481    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2481 79 \"%0ClassMediaChangeDeviceInstanceDisabled: %10!s! selected\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"'DISABLE', ItemString -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2490    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2490 80 \"%0ClassMediaChangeDeviceInstanceDisabled: %10!s! selected\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"'ENABLE', ItemString -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2499    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2499 81 \"%0ClassMediaChangeDeviceInstanceDisabled: %10!s! selected\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"'DEFAULT', ItemString -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2644    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2644 82 \"%0ClassMediaChangeDisabledForHardware: Unable to alloc string buffer\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c2688    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2688 83 \"%0ClassMediaChangeDisabledForHardware: cannot convert to unicode %10!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"status, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2726    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2726 84 \"%0ClassMediaChangeDisabledForHardware: Device is on disable list\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c2809    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2809 85 \"%0ClassCheckServiceMCN: Defaulting to %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"(mcnRegistryValue ? 'Enabled' : 'Disabled'), ItemString -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2855    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2855 86 \"%0ClassCheckServiceMCN: <Service>/Autorun flag = %10!d!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"mcnRegistryValue, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2867    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2867 87 \"%0ClassCheckServiceMCN: <Service>/Parameters/Autorun flag = %10!d!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"mcnRegistryValue, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2877    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2877 88 \"%0ClassCheckServiceMCN: Autoplay for device %10!p! is %11!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"(mcnRegistryValue ? 'on' : 'off'), ItemString -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c2916    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2916 89 \"%0ClassEnableMediaChangeDetection: not initialized\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c2932    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2932 90 \"%0ClassEnableMediaChangeDetection: Disable count reduced to %10!d! -\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"info->MediaChangeDetectionDisableCount, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c2951    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2951 91 \"%0MCD is enabled\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c2955    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c2955 92 \"%0MCD still disabled\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c3011    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3011 93 \"%0ClassDisableMediaChangeDetection: disable count is %10!d!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"info->MediaChangeDetectionDisableCount, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c3203    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3203 94 \"%0ClasspMcnRegCB: already set to true\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c3209    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3209 95 \"%0ClasspMcnRegCB: NULL string should never be passed to registry call-back!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c3239    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3239 96 \"%0ClasspRegMcnCB: Match found\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c3241    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3241 97 \"%0ClasspRegMcnCB: DeviceString at %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"deviceString->Buffer, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c3243    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3243 98 \"%0ClasspRegMcnCB: KeyValue at %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"keyValue, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c3329    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3329 99 \"%0ClasspTimerTick: Send FP irp for %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c3345    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3345 100 \"%0ClassTimerTick: Couldn't allocate item - try again in one minute\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c3369    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3369 101 \"%0ClasspTimerTick: Failure Prediction work item is already active for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c3378    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3378 102 \"%0ClassTimerTick, SHHHH!!! device is %10!p! is sleeping\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c3436    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3436 103 \"%0ClasspEnableTimer: Once a second timer enabled for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c3441    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3441 104 \"%0ClasspEnableTimer: Device %10!p!, Status %11!x! initializing timer\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"DeviceObject, ItemPtr -- 10" , L"status, ItemLong -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c3485    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3485 105 \"%0ClasspDisableTimer: Once a second timer disabled for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c3489    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3489 106 \"%0ClasspDisableTimer: Timer never enabled\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c3529    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3529 107 \"%0ClasspFailurePredict: Polling for failure\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_WMI", L"{", L"}")
# define WPP_ANNOTATE_autorun_c3655    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3655 108 \"%0ClasspFailurePredictPollCompletion: Failure predicted for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_WMI", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c372    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c372 12 \"%0Classpnp => GESN::NONE: Compliant drive found, removing GESN hack (%10!x!, %11!x!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"thisEventBit, ItemLong -- 10" , L"info->Gesn.EventMask, ItemLong -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c3834    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3834 109 \"%0ClassEnableFailurePredictPoll: Enabled for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_WMI", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c3841    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c3841 110 \"%0ClassEnableFailurePredictPoll: Disabled for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_WMI", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c415    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c415 13 \"%0Classpnp => GESN returned only %10!x! bytes data for fdo %11!p!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"dataLength, ItemLong -- 10" , L"FdoExtension->DeviceObject, ItemPtr -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c422    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c422 14 \"%0Classpnp => GESN returned too many (%10!x!) bytes data for fdo %11!p!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"dataLength, ItemLong -- 10" , L"FdoExtension->DeviceObject, ItemPtr -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c491    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c491 15 \"%0Classpnp => GESN OpChange events are broken.  Working around this problem in software (for fdo %10!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c527    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c527 16 \"%0Classpnp => GESN says features added/changedfor fdo %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"FdoExtension->DeviceObject, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_autorun_c599    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c599 17 \"%0Classpnp => GESN::EXTERNAL: Event: %10!x! Status %11!x! Req %12!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"externalInfo->ExternalEvent, ItemLong -- 10" , L"externalInfo->ExternalStatus, ItemLong -- 11" , L"(externalInfo->Request[0] << 8) | externalInfo->Request[1], ItemLong -- 12" , L"}")
# define WPP_ANNOTATE_autorun_c610    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c610 18 \"%0ClasspInterpretGesnData: media DEVICE_EXTERNAL_REQUEST\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c625    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c625 19 \"%0Classpnp => GESN::MEDIA: Event: %10!x! Status %11!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"mediaInfo->MediaEvent, ItemLong -- 10" , L"mediaInfo->MediaStatus, ItemLong -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c656    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c656 20 \"%0Classpnp => GESN Ejection request received!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c691    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c691 21 \"%0Classpnp => GESN::BUSY: Event: %10!x! Status %11!x! Time %12!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"busyInfo->DeviceBusyEvent, ItemLong -- 10" , L"busyInfo->DeviceBusyStatus, ItemLong -- 11" , L"busyData.Estimated100msToReady, ItemLong -- 12" , L"}")
# define WPP_ANNOTATE_autorun_c701    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c701 22 \"%0ClasspInterpretGesnData: media BECOMING_READY\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c782    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c782 23 \"%0ClassSetMediaChangeState: State was unknown - this may not be a change\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c799    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c799 24 \"%0ClassSetMediaChangeState: MCN not enabled, state changed from %10!s! to %11!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"states[oldMediaState], ItemString -- 10" , L"states[NewState], ItemString -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c807    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c807 25 \"%0ClassSetMediaChangeState: State change from %10!s! to %11!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"states[oldMediaState], ItemString -- 10" , L"states[NewState], ItemString -- 11" , L"}")
# define WPP_ANNOTATE_autorun_c818    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c818 26 \"%0ClasspInternalSetMediaChangeState: media ARRIVAL\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c827    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c827 27 \"%0ClasspInternalSetMediaChangeState: media REMOVAL\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c887    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c887 28 \"%0> ClasspSetMediaChangeStateEx\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c921    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c921 29 \"%0ClasspSetMediaChangeStateEx - timed out waiting for mutex\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c933    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c933 30 \"%0< ClasspSetMediaChangeStateEx\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", L"{", L"}")
# define WPP_ANNOTATE_autorun_c997    __annotation(L"TMF:", L"bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", L"#typev  autorun_c997 31 \"%0> ClasspMediaChangeDetectionCompletion: Device %10!p! completed MCN irp %11!p!.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", L"{", L"DeviceObject, ItemPtr -- 10" , L"Irp, ItemPtr -- 11" , L"}")
#else
# define WPP_ANNOTATE_autorun_c1032    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1032 32 \"%0ClasspMediaChangeDetectionCompletion - failed - srb status=%10!s!, sense=%11!s!/%12!s!/%13!s!.\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "DBGGETSRBSTATUSSTR(Srb), ItemString -- 10" , "DBGGETSENSECODESTR(Srb), ItemString -- 11" , "DBGGETADSENSECODESTR(Srb), ItemString -- 12" , "DBGGETADSENSEQUALIFIERSTR(Srb), ItemString -- 13" , "}")
# define WPP_ANNOTATE_autorun_c1049    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1049 33 \"%0ClasspMediaChangeDetectionCompletion - succeeded and GESN NOT supported, setting MediaPresent.\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1059    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1059 34 \"%0ClasspMediaChangeDetectionCompletion - succeeded (GESN supported).\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1066    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1066 35 \"%0ClasspMediaChangeDetectionCompletion - Overrun\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1071    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1071 36 \"%0ClasspMediaChangeDetectionCompletion: GESN failed with status %10!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "status, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_autorun_c1127    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1127 37 \"%0ClasspMediaChangeDetectionCompletion: Disabling GESN for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c1178    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1178 38 \"%0ClasspMediaChangeDetectionCompletion - not retrying immediately\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1188    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1188 39 \"%0< ClasspMediaChangeDetectionCompletion\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1314    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1314 40 \"%0ClassSendTestUnitIrp: FdoExtension->TimeOutValue is set to zero?! -- resetting to 10\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1322    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1322 41 \"%0ClassSendTestUnitIrp: Someone set srb->TimeOutValue to zero?! -- resetting to %10!x!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->TimeOutValue * 2, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_autorun_c1409    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1409 42 \"%0> ClasspSendMediaStateIrp\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1439    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1439 43 \"%0ClasspSendMediaStateIrp: irp in use for %10!x! seconds when synchronizing for MCD\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", "{", "timeInUse, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_autorun_c1455    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1455 44 \"%0CdRom%10!d!: Media Change Notification has lost it's irp and doesn't know where to find it.  Leave it alone and it'll come home dragging it's stack behind it.\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceNumber, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_autorun_c1460    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1460 45 \"%0< ClasspSendMediaStateIrp - irpInUse\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1469    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1469 46 \"%0ClassCheckMediaState: device %10!p! has  detection disabled \" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c1479    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1479 47 \"%0ClassCheckMediaState: device %10!p! is powered down and flags are set to let it sleep\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c1494    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1494 48 \"%0ClassCheckMediaState: device %10!p! needs to powerup to handle this io (may take a few extra seconds).\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c1506    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1506 49 \"%0ClassCheckMediaState: timer expired\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1510    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1510 50 \"%0ClassCheckMediaState: detection disabled\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1528    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1528 51 \"%0ClasspSendMediaStateIrp: Device %10!p! getting TUR  irp %11!p!\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "irp, ItemPtr -- 11" , "}")
# define WPP_ANNOTATE_autorun_c1546    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1546 52 \"%0  ClasspSendMediaStateIrp - calling IoCallDriver.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1561    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1561 53 \"%0< ClasspSendMediaStateIrp\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1595    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1595 54 \"%0ClassCheckMediaState: detection not enabled\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c172    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c172 10 \"%0ClassSendEjectionNotification: media EJECT_REQUEST\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1768    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1768 55 \"%0ClasspInitializePolling: Testing for GESN\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c1773    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1773 56 \"%0ClasspInitializePolling: GESN available for %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c1783    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1783 57 \"%0ClasspInitializePolling: GESN *NOT* available for %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c1985    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c1985 58 \"%0Classpnp => GESN test failed %10!x! for fdo %11!p!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "status, ItemLong -- 10" , "FdoExtension->DeviceObject, ItemPtr -- 11" , "}")
# define WPP_ANNOTATE_autorun_c2000    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2000 59 \"%0Classpnp => GESN test failed %10!x! for fdo %11!p!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "status, ItemLong -- 10" , "FdoExtension->DeviceObject, ItemPtr -- 11" , "}")
# define WPP_ANNOTATE_autorun_c201    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c201 11 \"%0Error sending event: size too large! (%10!x!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "requiredSize, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2015    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2015 60 \"%0Classpnp => Fdo %10!p! supports event mask %11!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "header->SupportedEventClasses, ItemLong -- 11" , "}")
# define WPP_ANNOTATE_autorun_c2021    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2021 61 \"%0Classpnp => GESN supports MCN\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c2026    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2026 62 \"%0Classpnp => GESN supports DeviceBusy\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c2035    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2035 63 \"%0Classpnp => GESN supports OpChange, but must ignore these events for compatibility\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c2040    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2040 64 \"%0Classpnp => GESN supports OpChange\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c2080    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2080 65 \"%0Classpnp => GESN supported, but not mask we care about (%10!x!) for FDO %11!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "header->SupportedEventClasses, ItemLong -- 10" , "FdoExtension->DeviceObject, ItemPtr -- 11" , "}")
# define WPP_ANNOTATE_autorun_c2087    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2087 66 \"%0Classpnp => GESN hack not required for FDO %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2093    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2093 67 \"%0Classpnp => GESN hack enabled for FDO %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2141    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2141 68 \"%0Classpnp => Enabling GESN support for fdo %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2155    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2155 69 \"%0Classpnp => GESN available but not enabled for fdo %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2163    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2163 70 \"%0Classpnp => GESN support detection failed  for fdo %10!p! with status %11!08x!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "status, ItemLong -- 11" , "}")
# define WPP_ANNOTATE_autorun_c2295    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2295 71 \"%0ClassInitializeMCN: Disabled due to hardwarelimitations for this device\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c2310    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2310 72 \"%0ClassInitializeMCN: Class    MCN is %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "(disabled ? 'disabled' : 'enabled'), ItemString -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2318    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2318 73 \"%0ClassInitializeMCN: Instance using default\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c2322    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2322 74 \"%0ClassInitializeMCN: Instance override: %10!s! MCN\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "(instanceOverride ? 'Enabling' : 'Disabling'), ItemString -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2328    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2328 75 \"%0ClassInitializeMCN: Instance MCN is %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "(disabled ? 'disabled' : 'enabled'), ItemString -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2401    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2401 76 \"%0ClassMediaChangeDeviceInstanceDisabled: Could not open device registry key [%10!x!]\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "status, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2423    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2423 77 \"%0ClassMediaChangeDeviceInstanceDisabled: subkey could not be created. %10!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "status, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2472    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2472 78 \"%0ClassMediaChangeDeviceInstanceDisabled: %10!s! selected\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "'Both Enable and Disable set -- DISABLE', ItemString -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2481    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2481 79 \"%0ClassMediaChangeDeviceInstanceDisabled: %10!s! selected\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "'DISABLE', ItemString -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2490    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2490 80 \"%0ClassMediaChangeDeviceInstanceDisabled: %10!s! selected\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "'ENABLE', ItemString -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2499    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2499 81 \"%0ClassMediaChangeDeviceInstanceDisabled: %10!s! selected\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "'DEFAULT', ItemString -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2644    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2644 82 \"%0ClassMediaChangeDisabledForHardware: Unable to alloc string buffer\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c2688    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2688 83 \"%0ClassMediaChangeDisabledForHardware: cannot convert to unicode %10!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "status, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2726    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2726 84 \"%0ClassMediaChangeDisabledForHardware: Device is on disable list\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c2809    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2809 85 \"%0ClassCheckServiceMCN: Defaulting to %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "(mcnRegistryValue ? 'Enabled' : 'Disabled'), ItemString -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2855    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2855 86 \"%0ClassCheckServiceMCN: <Service>/Autorun flag = %10!d!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "mcnRegistryValue, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2867    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2867 87 \"%0ClassCheckServiceMCN: <Service>/Parameters/Autorun flag = %10!d!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "mcnRegistryValue, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2877    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2877 88 \"%0ClassCheckServiceMCN: Autoplay for device %10!p! is %11!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "(mcnRegistryValue ? 'on' : 'off'), ItemString -- 11" , "}")
# define WPP_ANNOTATE_autorun_c2916    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2916 89 \"%0ClassEnableMediaChangeDetection: not initialized\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c2932    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2932 90 \"%0ClassEnableMediaChangeDetection: Disable count reduced to %10!d! -\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "info->MediaChangeDetectionDisableCount, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_autorun_c2951    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2951 91 \"%0MCD is enabled\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c2955    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c2955 92 \"%0MCD still disabled\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c3011    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3011 93 \"%0ClassDisableMediaChangeDetection: disable count is %10!d!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "info->MediaChangeDetectionDisableCount, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_autorun_c3203    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3203 94 \"%0ClasspMcnRegCB: already set to true\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c3209    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3209 95 \"%0ClasspMcnRegCB: NULL string should never be passed to registry call-back!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c3239    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3239 96 \"%0ClasspRegMcnCB: Match found\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c3241    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3241 97 \"%0ClasspRegMcnCB: DeviceString at %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "deviceString->Buffer, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c3243    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3243 98 \"%0ClasspRegMcnCB: KeyValue at %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "keyValue, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c3329    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3329 99 \"%0ClasspTimerTick: Send FP irp for %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c3345    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3345 100 \"%0ClassTimerTick: Couldn't allocate item - try again in one minute\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c3369    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3369 101 \"%0ClasspTimerTick: Failure Prediction work item is already active for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c3378    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3378 102 \"%0ClassTimerTick, SHHHH!!! device is %10!p! is sleeping\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c3436    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3436 103 \"%0ClasspEnableTimer: Once a second timer enabled for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c3441    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3441 104 \"%0ClasspEnableTimer: Device %10!p!, Status %11!x! initializing timer\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "DeviceObject, ItemPtr -- 10" , "status, ItemLong -- 11" , "}")
# define WPP_ANNOTATE_autorun_c3485    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3485 105 \"%0ClasspDisableTimer: Once a second timer disabled for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c3489    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3489 106 \"%0ClasspDisableTimer: Timer never enabled\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c3529    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3529 107 \"%0ClasspFailurePredict: Polling for failure\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_WMI", "{", "}")
# define WPP_ANNOTATE_autorun_c3655    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3655 108 \"%0ClasspFailurePredictPollCompletion: Failure predicted for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_WMI", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c372    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c372 12 \"%0Classpnp => GESN::NONE: Compliant drive found, removing GESN hack (%10!x!, %11!x!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "thisEventBit, ItemLong -- 10" , "info->Gesn.EventMask, ItemLong -- 11" , "}")
# define WPP_ANNOTATE_autorun_c3834    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3834 109 \"%0ClassEnableFailurePredictPoll: Enabled for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_WMI", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c3841    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c3841 110 \"%0ClassEnableFailurePredictPoll: Disabled for device %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_WMI", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c415    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c415 13 \"%0Classpnp => GESN returned only %10!x! bytes data for fdo %11!p!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "dataLength, ItemLong -- 10" , "FdoExtension->DeviceObject, ItemPtr -- 11" , "}")
# define WPP_ANNOTATE_autorun_c422    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c422 14 \"%0Classpnp => GESN returned too many (%10!x!) bytes data for fdo %11!p!\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "dataLength, ItemLong -- 10" , "FdoExtension->DeviceObject, ItemPtr -- 11" , "}")
# define WPP_ANNOTATE_autorun_c491    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c491 15 \"%0Classpnp => GESN OpChange events are broken.  Working around this problem in software (for fdo %10!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c527    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c527 16 \"%0Classpnp => GESN says features added/changedfor fdo %10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "FdoExtension->DeviceObject, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_autorun_c599    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c599 17 \"%0Classpnp => GESN::EXTERNAL: Event: %10!x! Status %11!x! Req %12!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "externalInfo->ExternalEvent, ItemLong -- 10" , "externalInfo->ExternalStatus, ItemLong -- 11" , "(externalInfo->Request[0] << 8) | externalInfo->Request[1], ItemLong -- 12" , "}")
# define WPP_ANNOTATE_autorun_c610    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c610 18 \"%0ClasspInterpretGesnData: media DEVICE_EXTERNAL_REQUEST\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c625    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c625 19 \"%0Classpnp => GESN::MEDIA: Event: %10!x! Status %11!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "mediaInfo->MediaEvent, ItemLong -- 10" , "mediaInfo->MediaStatus, ItemLong -- 11" , "}")
# define WPP_ANNOTATE_autorun_c656    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c656 20 \"%0Classpnp => GESN Ejection request received!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c691    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c691 21 \"%0Classpnp => GESN::BUSY: Event: %10!x! Status %11!x! Time %12!x!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "busyInfo->DeviceBusyEvent, ItemLong -- 10" , "busyInfo->DeviceBusyStatus, ItemLong -- 11" , "busyData.Estimated100msToReady, ItemLong -- 12" , "}")
# define WPP_ANNOTATE_autorun_c701    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c701 22 \"%0ClasspInterpretGesnData: media BECOMING_READY\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c782    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c782 23 \"%0ClassSetMediaChangeState: State was unknown - this may not be a change\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c799    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c799 24 \"%0ClassSetMediaChangeState: MCN not enabled, state changed from %10!s! to %11!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "states[oldMediaState], ItemString -- 10" , "states[NewState], ItemString -- 11" , "}")
# define WPP_ANNOTATE_autorun_c807    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c807 25 \"%0ClassSetMediaChangeState: State change from %10!s! to %11!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "states[oldMediaState], ItemString -- 10" , "states[NewState], ItemString -- 11" , "}")
# define WPP_ANNOTATE_autorun_c818    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c818 26 \"%0ClasspInternalSetMediaChangeState: media ARRIVAL\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c827    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c827 27 \"%0ClasspInternalSetMediaChangeState: media REMOVAL\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c887    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c887 28 \"%0> ClasspSetMediaChangeStateEx\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c921    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c921 29 \"%0ClasspSetMediaChangeStateEx - timed out waiting for mutex\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c933    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c933 30 \"%0< ClasspSetMediaChangeStateEx\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_FLAG_MCN", "{", "}")
# define WPP_ANNOTATE_autorun_c997    __annotation("TMF:", "bd3024d6-5029-b64d-3933-219a96a83b1b classpnp // SRC=autorun.c MJ= MN=", "#typev  autorun_c997 31 \"%0> ClasspMediaChangeDetectionCompletion: Device %10!p! completed MCN irp %11!p!.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_FLAG_MCN", "{", "DeviceObject, ItemPtr -- 10" , "Irp, ItemPtr -- 11" , "}")
#endif
# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,
#else
# define WPP_ANNOTATE(x)
#endif

#define WPP_LOCAL_TraceGuids WPP_autorun_c_Traceguids

#if 1
static const GUID WPP_LOCAL_TraceGuids[] = { {0xbd3024d6,0x5029,0xb64d,{0x39,0x33,0x21,0x9a,0x96,0xa8,0x3b,0x1b}}, };
#endif

#ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_TRACE_OPTIONS)
enum {WPP_TRACE_OPTIONS = TRACE_MESSAGE_SEQUENCE   | TRACE_MESSAGE_GUID
                        | TRACE_MESSAGE_SYSTEMINFO | TRACE_MESSAGE_TIMESTAMP };
#endif

#if !defined(WPP_LOGPAIR)
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((SIZE_T)_Size),
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#if !defined(WPP_LOGASTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR(strlen(_value) + 1, _value )
# else
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( (_value)?strlen(_value) + 1:5, (_value)?(_value):"NULL" )
# endif
#endif

#if !defined(WPP_LOGWSTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( (wcslen(_value)+1) * sizeof(WCHAR), _value)
# else
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( (_value)?(((_value)[0] == 0)?7 * sizeof(WCHAR):(wcslen(_value) + 1)* sizeof(WCHAR)):5 * sizeof(WCHAR), (_value)?(((_value)[0] == 0) ? L"<NULL>" : (_value)):L"NULL")
# endif
#endif

#if !defined(WPP_LOGPGUID)
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif


#if !defined(WPP_LOGPSID)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( WPP_GetLengthSid(_value), (_value) )
# else
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( (_value)? (WPP_IsValidSid(_value)? \
                                                                        WPP_GetLengthSid(_value):5):5, \
                                                                        (_value)? (WPP_IsValidSid(_value)?\
                                                                        (_value):"NULL"):"NULL")
#endif
#endif

#if !defined(WPP_LOGCSTR)
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGUSTR)
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGPUSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#else
# define WPP_LOGPUSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x && (*(_x)).Length)? &(*(_x)).Length : L"\5")\
                          WPP_LOGPAIR( (_x && (*(_x)).Buffer)?(*(_x)).Length:5*sizeof(WCHAR), (_x && (*(_x)).Buffer)?(*(_x)).Buffer:L"NULL")
#endif
#endif

#if !defined(WPP_LOGPCSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#else
# define WPP_LOGPCSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x && (*(_x)).Length)? &(*(_x)).Length : L"\5")\
                          WPP_LOGPAIR( (_x && (*(_x)).Buffer)?(*(_x)).Length:5*sizeof(char), (_x && (*(_x)).Buffer)?((const char *)(*(_x)).Buffer):"NULL")
#endif
#endif

#if !defined(WPP_LOGSTDSTR)
#define WPP_LOGSTDSTR(_value)  WPP_LOGPAIR( (_value).size()+1, (_value).c_str() )
#endif

#endif  //  #ifndef WPP_ALREADY_INCLUDED


#ifndef WPP_SF__def
#       define WPP_SF__def
WPP_INLINE void WPP_SF_(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id,  0); }
#endif  // #ifndef WPP_SF__def
#ifndef WPP_SF_D_def
#       define WPP_SF_D_def
WPP_INLINE void WPP_SF_D(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int,_a1)  0); }
#endif  // #ifndef WPP_SF_D_def
#ifndef WPP_SF_DD_def
#       define WPP_SF_DD_def
WPP_INLINE void WPP_SF_DD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, unsigned int _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int,_a1) WPP_LOGTYPEVAL(unsigned int,_a2)  0); }
#endif  // #ifndef WPP_SF_DD_def
#ifndef WPP_SF_DDD_def
#       define WPP_SF_DDD_def
WPP_INLINE void WPP_SF_DDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, unsigned int _a2, unsigned int _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int,_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(unsigned int,_a3)  0); }
#endif  // #ifndef WPP_SF_DDD_def
#ifndef WPP_SF_Dq_def
#       define WPP_SF_Dq_def
WPP_INLINE void WPP_SF_Dq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1, const void* _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int,_a1) WPP_LOGTYPEVAL(const void*,_a2)  0); }
#endif  // #ifndef WPP_SF_Dq_def
#ifndef WPP_SF_L_def
#       define WPP_SF_L_def
WPP_INLINE void WPP_SF_L(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned long _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned long,_a1)  0); }
#endif  // #ifndef WPP_SF_L_def
#ifndef WPP_SF_d_def
#       define WPP_SF_d_def
WPP_INLINE void WPP_SF_d(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, signed int _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(signed int,_a1)  0); }
#endif  // #ifndef WPP_SF_d_def
#ifndef WPP_SF_q_def
#       define WPP_SF_q_def
WPP_INLINE void WPP_SF_q(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*,_a1)  0); }
#endif  // #ifndef WPP_SF_q_def
#ifndef WPP_SF_qD_def
#       define WPP_SF_qD_def
WPP_INLINE void WPP_SF_qD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, unsigned int _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*,_a1) WPP_LOGTYPEVAL(unsigned int,_a2)  0); }
#endif  // #ifndef WPP_SF_qD_def
#ifndef WPP_SF_qL_def
#       define WPP_SF_qL_def
WPP_INLINE void WPP_SF_qL(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, unsigned long _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*,_a1) WPP_LOGTYPEVAL(unsigned long,_a2)  0); }
#endif  // #ifndef WPP_SF_qL_def
#ifndef WPP_SF_qq_def
#       define WPP_SF_qq_def
WPP_INLINE void WPP_SF_qq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, const void* _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*,_a1) WPP_LOGTYPEVAL(const void*,_a2)  0); }
#endif  // #ifndef WPP_SF_qq_def
#ifndef WPP_SF_qs_def
#       define WPP_SF_qs_def
WPP_INLINE void WPP_SF_qs(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1, const char* _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*,_a1) WPP_LOGASTR(_a2)  0); }
#endif  // #ifndef WPP_SF_qs_def
#ifndef WPP_SF_s_def
#       define WPP_SF_s_def
WPP_INLINE void WPP_SF_s(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1)  0); }
#endif  // #ifndef WPP_SF_s_def
#ifndef WPP_SF_ss_def
#       define WPP_SF_ss_def
WPP_INLINE void WPP_SF_ss(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const char* _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2)  0); }
#endif  // #ifndef WPP_SF_ss_def
#ifndef WPP_SF_ssss_def
#       define WPP_SF_ssss_def
WPP_INLINE void WPP_SF_ssss(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const char* _a2, const char* _a3, const char* _a4)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGASTR(_a3) WPP_LOGASTR(_a4)  0); }
#endif  // #ifndef WPP_SF_ssss_def
#ifndef WPP_POST
#  define WPP_POST()
#endif

#ifndef WPP_PRE
#  define WPP_PRE()
#endif


#ifdef WPP_DEBUG
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1032(LEVEL, FLAGS, MSG,a10,a11,a12,a13) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1032) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11,a12,a13)), \
          WPP_SF_ssss(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 32, \
                             WPP_LOCAL_TraceGuids+0,a10,a11,a12,a13), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1049(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1049) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 33, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1059(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1059) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 34, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1066(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1066) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 35, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1071(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1071) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 36, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1127(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1127) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 37, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1178(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1178) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 38, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1188(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1188) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 39, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1314(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1314) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 40, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1322(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1322) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 41, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1409(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1409) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 42, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1439(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1439) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 43, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1455(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1455) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 44, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1460(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1460) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 45, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1469(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1469) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 46, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1479(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1479) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 47, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1494(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1494) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 48, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1506(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1506) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 49, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1510(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1510) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 50, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1528(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1528) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_qq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 51, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1546(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1546) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 52, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1561(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1561) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 53, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1595(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1595) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 54, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c172(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c172) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 10, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1768(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1768) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 55, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1773(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1773) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 56, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1783(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1783) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 57, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1985(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1985) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_Dq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 58, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2000(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2000) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_Dq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 59, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c201(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c201) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 11, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2015(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2015) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_qD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 60, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2021(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2021) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 61, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2026(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2026) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 62, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2035(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2035) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 63, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2040(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2040) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 64, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2080(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2080) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_Dq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 65, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2087(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2087) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 66, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2093(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2093) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 67, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2141(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2141) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 68, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2155(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2155) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 69, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2163(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2163) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_qD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 70, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2295(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2295) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 71, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2310(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2310) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 72, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2318(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2318) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 73, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2322(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2322) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 74, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2328(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2328) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 75, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2401(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2401) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_L(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 76, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2423(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2423) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_L(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 77, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2472(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2472) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 78, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2481(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2481) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 79, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2490(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2490) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 80, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2499(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2499) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 81, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2644(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2644) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 82, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2688(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2688) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_L(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 83, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2726(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2726) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 84, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2809(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2809) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 85, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2855(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2855) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 86, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2867(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2867) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 87, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2877(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2877) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_qs(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 88, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2916(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2916) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 89, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2932(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2932) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 90, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2951(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2951) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 91, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2955(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2955) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 92, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3011(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3011) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 93, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3203(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3203) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 94, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3209(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3209) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 95, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3239(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3239) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 96, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3241(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3241) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 97, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3243(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3243) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 98, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3329(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3329) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 99, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3345(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3345) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 100, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3369(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3369) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 101, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3378(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3378) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 102, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3436(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3436) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 103, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3441(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3441) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_qL(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 104, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3485(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3485) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 105, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3489(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3489) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 106, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3529(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3529) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 107, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3655(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3655) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 108, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c372(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c372) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_DD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 12, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3834(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3834) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 109, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3841(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3841) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 110, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c415(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c415) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_Dq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 13, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c422(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c422) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_Dq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 14, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c491(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c491) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 15, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c527(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c527) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 16, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c599(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c599) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11,a12)), \
          WPP_SF_DDD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 17, \
                             WPP_LOCAL_TraceGuids+0,a10,a11,a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c610(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c610) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 18, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c625(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c625) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_DD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 19, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c656(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c656) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 20, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c691(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c691) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11,a12)), \
          WPP_SF_DDD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 21, \
                             WPP_LOCAL_TraceGuids+0,a10,a11,a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c701(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c701) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 22, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c782(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c782) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 23, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c799(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c799) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_ss(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 24, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c807(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c807) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_ss(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 25, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c818(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c818) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 26, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c827(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c827) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 27, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c887(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c887) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 28, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c921(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c921) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 29, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c933(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c933) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 30, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c997(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c997) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10,a11)), \
          WPP_SF_qq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 31, \
                             WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1032(LEVEL, FLAGS, MSG,a10,a11,a12,a13) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1032) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_ssss(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 32, \
                               WPP_LOCAL_TraceGuids+0,a10,a11,a12,a13), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1049(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1049) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 33, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1059(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1059) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 34, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1066(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1066) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 35, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1071(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1071) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 36, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1127(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1127) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 37, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1178(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1178) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 38, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1188(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1188) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 39, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1314(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1314) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 40, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1322(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1322) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 41, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1409(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1409) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 42, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1439(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1439) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 43, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1455(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1455) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 44, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1460(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1460) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 45, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1469(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1469) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 46, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1479(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1479) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 47, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1494(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1494) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 48, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1506(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1506) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 49, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1510(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1510) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 50, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1528(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1528) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_qq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 51, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1546(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1546) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 52, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1561(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1561) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 53, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1595(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1595) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 54, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c172(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c172) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 10, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1768(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1768) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 55, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1773(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1773) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 56, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1783(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1783) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 57, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c1985(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c1985) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_Dq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 58, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2000(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2000) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_Dq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 59, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c201(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c201) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 11, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2015(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2015) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_qD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 60, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2021(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2021) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 61, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2026(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2026) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 62, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2035(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2035) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 63, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2040(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2040) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 64, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2080(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2080) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_Dq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 65, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2087(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2087) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 66, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2093(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2093) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 67, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2141(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2141) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 68, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2155(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2155) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 69, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2163(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2163) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_qD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 70, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2295(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2295) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 71, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2310(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2310) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 72, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2318(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2318) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 73, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2322(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2322) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 74, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2328(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2328) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 75, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2401(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2401) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_L(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 76, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2423(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2423) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_L(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 77, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2472(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2472) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 78, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2481(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2481) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 79, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2490(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2490) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 80, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2499(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2499) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 81, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2644(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2644) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 82, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2688(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2688) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_L(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 83, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2726(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2726) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 84, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2809(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2809) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 85, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2855(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2855) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 86, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2867(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2867) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 87, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2877(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2877) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_qs(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 88, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2916(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2916) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 89, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2932(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2932) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 90, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2951(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2951) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 91, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c2955(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c2955) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 92, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3011(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3011) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 93, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3203(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3203) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 94, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3209(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3209) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 95, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3239(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3239) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 96, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3241(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3241) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 97, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3243(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3243) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 98, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3329(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3329) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 99, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3345(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3345) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 100, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3369(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3369) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 101, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3378(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3378) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 102, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3436(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3436) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 103, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3441(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3441) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_qL(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 104, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3485(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3485) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 105, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3489(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3489) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 106, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3529(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3529) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 107, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3655(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3655) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 108, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c372(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c372) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_DD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 12, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3834(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3834) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 109, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c3841(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c3841) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 110, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c415(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c415) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_Dq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 13, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c422(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c422) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_Dq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 14, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c491(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c491) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 15, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c527(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c527) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 16, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c599(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c599) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_DDD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 17, \
                               WPP_LOCAL_TraceGuids+0,a10,a11,a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c610(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c610) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 18, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c625(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c625) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_DD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 19, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c656(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c656) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 20, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c691(LEVEL, FLAGS, MSG,a10,a11,a12) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c691) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_DDD(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 21, \
                               WPP_LOCAL_TraceGuids+0,a10,a11,a12), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c701(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c701) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 22, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c782(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c782) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 23, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c799(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c799) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_ss(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 24, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c807(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c807) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_ss(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 25, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c818(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c818) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 26, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c827(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c827) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 27, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c887(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c887) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 28, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c921(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c921) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 29, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c933(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c933) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 30, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_autorun_c997(LEVEL, FLAGS, MSG,a10,a11) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(autorun_c997) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_qq(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 31, \
                               WPP_LOCAL_TraceGuids+0,a10,a11), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif


#ifdef WPP_DEBUG
#else
#endif



#if defined(__cplusplus)
};
#endif



//
// Tracing Macro name redefinition
//

// NoMsgArgs

#undef DoDebugTrace
#define DoDebugTrace WPP_(CALL)
#undef DoTraceMessage
#define DoTraceMessage WPP_(CALL)
#undef TracePrint
#define TracePrint(ARGS) WPP_(CALL) ARGS
// MsgArgs

