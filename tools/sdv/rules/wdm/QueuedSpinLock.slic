/*
	Copyright (c) Microsoft Corporation.  All rights reserved.

	Description: 

	This rule verifies that calls to
	KeAcquireInStackQueuedSpinLock and
	KeReleaseInStackQueuedSpinLock are used in strict alternation.
	Moreover, at the end of a dispatch or cancel routine, the
	driver should not hold the queued spinlock.
*/

#include "ntddk_slic.h"

state{
   enum {initial,unlocked,locked} s = initial;
}
watch KeAcquireInStackQueuedSpinLock.exit.$2;

KeAcquireInStackQueuedSpinLock.exit[guard $2]
{   
        if (s == locked) {
            abort "The driver is calling $fname after already acquiring the queued spinlock.";
        } else {
            s = locked;
        }
}

KeReleaseInStackQueuedSpinLock.entry [guard $1]
{
        if (s != locked) {
            abort "The driver is calling $fname without first acquiring the queued spinlock.";
        } else {
            s = unlocked;
        }
}

[DriverEntry,sdv_RunAddDevice,sdv_RunStartDevice,sdv_RunStartIo,sdv_RunDPC,
 sdv_RunISR,sdv_RunCancelRoutine,sdv_RunDispatchFunction,sdv_RunRemoveDevice,
 sdv_RunUnload].exit
{
        if(s == locked) {
            abort "The dispatch routine has returned without releasing a queued spinlock.";
        }
}
