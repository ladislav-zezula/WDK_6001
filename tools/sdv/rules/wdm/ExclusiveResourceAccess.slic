/*
	Copyright (c) Microsoft Corporation.  All rights reserved.

	Description:

	This rule verifies that calls to
	ExAcquireResourceExclusiveLite and ExReleaseResourceLite or
	ExReleaseResourceForThreadLite are used in strict alternation.
*/

#include "ntddk_slic.h"

state{
    enum {acquired, notAcquired} accessState = notAcquired;
}
watch ExAcquireResourceExclusiveLite.entry.$1;

ExAcquireResourceExclusiveLite.exit[guard $1]
{
    if (accessState == acquired) {
       abort "The driver is calling $fname after already acquiring exclusive access to the resource.";
    } else if ($return == 1) {
       accessState = acquired;                
    }
}

[ExReleaseResourceLite,ExReleaseResourceForThreadLite].entry [guard $1]
{   
    if (accessState == notAcquired) {
        abort "The driver is calling $fname without first acquiring exclusive access to the resource.";
    } else {
        accessState = notAcquired;
    }
}

[DriverEntry,sdv_RunAddDevice,sdv_RunStartDevice,sdv_RunStartIo,
 sdv_RunDPC,sdv_RunISR,sdv_RunCancelRoutine,sdv_RunDispatchFunction,
 sdv_RunRemoveDevice,sdv_RunUnload].exit
{
    if (accessState == acquired) {
       abort "The driver has returned without releasing exclusive access to the resource.";
    }
}

